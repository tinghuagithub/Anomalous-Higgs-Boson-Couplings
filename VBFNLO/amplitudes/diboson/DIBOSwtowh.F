c*****************************************************************************
c
c    begin function WPMTOWH
c
c*****************************************************************************
c
c  this function generates the leptonic tensor for WH, WHj
c
c  Robin Roth <robin@particle.physik.uni-karlsruhe.de>
c  Initial version: November 2012
c  Last modified: November 2012

c ------------------------------------------------------------
      SUBROUTINE WPMTOWH(V,N,whamp,wbos)

c       REAL*8 FUNCTION MATRIX(P,NHEL,IC)
C     
C     Generated by MadGraph 5 v. 1.5.1, 2012-11-06
C     By the MadGraph Development Team
C     Please visit us at https://launchpad.net/madgraph5
C     
C     Returns amplitude squared summed/avg over colors
C     for the point with external lines W(0:6,NEXTERNAL)
C     
C     Process: w+ > w+ h
C      
C     wbos = 3 : W+
C     wbos = 4 : W-
C     
      IMPLICIT NONE
C     
C     CONSTANTS
C     

      INTEGER   wbos

      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=1)

      INTEGER    NEXTERNAL
      PARAMETER (NEXTERNAL=3)
c      INTEGER    NINCOMING
c      PARAMETER (NINCOMING=1)
      
      INTEGER    MAXAMPS, MAXFLOW !, MAXPROC, MAXSPROC
      PARAMETER (MAXAMPS=1, MAXFLOW=1)
!      PARAMETER (MAXPROC=1, MAXSPROC=1)
      
      INTEGER    NWAVEFUNCS !,     NCOLOR
      PARAMETER (NWAVEFUNCS=5) ! , NCOLOR=1)
c      REAL*8     ZERO
c      PARAMETER (ZERO=0D0)
c      COMPLEX*16 IMAG1
c      PARAMETER (IMAG1=(0D0,1D0))

C     
C     ARGUMENTS 
C     
c      REAL*8 P(0:3,NEXTERNAL)

#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/global.inc"

#include "tensor.inc"

      REAL*8 Q(0:3), v(0:3,max_v,max_kin) !remove max_kin, make 2d, already get right kin
c      INTEGER NHEL(NEXTERNAL)
C     
C     LOCAL VARIABLES 
C     
      INTEGER I,MU
C      COMPLEX*16 ZTEMP
C      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS) !, JAMP(NCOLOR)
      COMPLEX*16 W(18,NWAVEFUNCS)
C     
C     GLOBAL VARIABLES
C     
#ifdef WITH_MADGRAPH
      DOUBLE PRECISION AMP2(MAXAMPS), JAMP2(0:MAXFLOW)
      COMMON/TO_AMPS/  AMP2,       JAMP2
#endif      
c      INCLUDE 'coupl.inc'
      complex*16 whamp(0:5)
      integer N

      logical ldebug
      parameter (ldebug=.false.)

c      logical lswitch
c      parameter (lswitch=.true.)


C     
C     COLOR DATA
C     
C      DATA DENOM(1)/1/
C      DATA (CF(I,1),I=1,1) /1/
C     ----------
C     BEGIN CODE
C     ----------


c     w(1,1) is W from pp collision
c     w(*,2) ep
c     w(*,3) ve
c     w(*,4) H
c     w(*,5) is w decaying to ep and ve
c      if (lswitch) then      ! read in lepton an W states from common block
         do i=1,6
            w(i,2) = wep(i,N)
            w(i,3) = wve(i,N)
            w(i,4) = hig(i,N) !H
         enddo
c      endif

      do mu=0,3
        q(mu) = 0d0
        do i=1,n_v
          q(mu) = q(mu)+v(mu,i,1) !remove ",1', already right kin
       enddo
        !missing 5,6: q(mu) = v(mu,1,1)+v(mu,2,1)+v(mu,3,1)+v(mu,4,1)
      enddo
         
c  CALL VXXXXX(P(0,1),MW,NHEL(1),-1,W(1,1)) ! W ein

      if (ldebug) then
         write(6,*) " wtowh.F -------------------------- "
         print *, "q ", q
         do i=2,4
            print *, "W",i," ",
     `            w(1,i),w(2,i),w(3,i),w(4,i),w(5,i),w(6,i)
         enddo
      endif

      do mu = 0,3      
         CALL DIBOSVCARTX(q(0), WMASS, WWIDTH, MU, -1, W(1, 1))
         if (wbos .eq. 4) then
                 !W- -> e- ve
            CALL JIOXXX(W(1, 3), W(1, 2), GWF, WMASS, WWIDTH, W(1, 5)) 
                 !WWH vertex
            CALL VVSXXX(W(1, 5), W(1, 1), W(1, 4), GWWH, AMP(1)) 
         elseif (wbos .eq. 3) then
                 !W+ -> e+ ve
            CALL JIOXXX(W(1, 2), W(1, 3), GWF, WMASS, WWIDTH, W(1, 5)) 
                 !WWH vertex
            CALL VVSXXX(W(1, 1), W(1, 5), W(1, 4), GWWH, AMP(1)) 
         endif
         whamp(mu) = AMP(1)
         if (ldebug) then
            print*, "W(1,5) ", W(1,5)
            print*, "W(1,1) ", W(1,1)
            print*, "amp ", amp
         endif
      enddo

      whamp(4) = dcmplx(q(0),q(3))
      whamp(5) = dcmplx(q(1),q(2))

      if ( ldebug ) then
 20      format( " v(", i1, ") = ", 4(f10.3, 2x) )
c
         write(6,*) " "
         do i = 1, n_v
            write(6,20) i, v(0,i,1), v(1,i,1), v(2,i,1), v(3,i,1)
         end do
      end if !ldebug


      return

      END


c ------------------------------------------------------------


