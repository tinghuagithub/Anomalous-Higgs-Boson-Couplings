c ------------------------------------------------------------

      subroutine ZA_ATOZA(v,N,atoza,NW)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : a -> e- e+ a  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   4) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=   8) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,2:5), Q(0:3), v(0:3,6)
      INTEGER N
      complex*16 atoza(0:5)
      integer NW ! = 0: all diagrams, = 1: no non resonant diagrams
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/global.inc"
#include "VBFNLO/utilities/process.inc"
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
c  lepton spinors and W+-, Z/A polarization vectors
#include "tensor.inc"

      logical lswitch
      parameter (lswitch=.true.)

C                                                                          
C ----------
C BEGIN CODE
C ----------
      do mu = 0,3
         P(mu,2) = v(mu,1)
         P(mu,3) = v(mu,2)
         P(mu,4) = v(mu,3)
      enddo

      if (lswitch) then      ! read in lepton an W states from common block
         do i =1,6
            w(i,2) = wve(i,N)
            w(i,3) = wep(i,N)
            w(i,4) = atau2(i,N)
         enddo
      endif

      do mu = 0,3
         q(mu) = p(mu,2)+p(mu,3)+p(mu,4)
      enddo

      do mu = 0,3

      CALL DIBOSVCARTX(Q(0),ZERO,ZERO,MU,-1,W(1,1   ))
      CALL FVIXXX(W(1,3   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,5   ))    
      CALL IOVXXX(W(1,5   ),W(1,2   ),W(1,4   ),GAL ,AMP(1   ))            
      CALL FVOXXX(W(1,2   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL IOVXXX(W(1,3   ),W(1,6   ),W(1,4   ),GAL ,AMP(2   ))            

         AMP(3)=0d0

c no AZA vertex in SM
      atoza(mu) = -AMP(3)
      if (narrowwidth.eq.0) then
      atoza(mu) = atoza(mu)  -AMP(1)-AMP(2)
c      print*, amp(3)
      endif
      enddo
      atoza(4) = dcmplx(q(0),q(3))
      atoza(5) = dcmplx(q(1),q(2))
      return
      END

c ------------------------------------------------------------

      subroutine ZA_ZTOZA(v,N,ztoza,NW)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : z -> e- e+ a  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  5) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=   10) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,2:5),Q(0:3), v(0:3,6)
      INTEGER N
      complex*16 ztoza(0:5)
      integer NW ! = 0: all diagrams, = 1: no non resonant diagrams
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"          
#include "VBFNLO/utilities/global.inc"          
#include "VBFNLO/utilities/process.inc"
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
c  lepton spinors and W+-, Z/A polarization vectors
#include "tensor.inc"

      logical lswitch
      parameter (lswitch=.true.)

C
C ----------
C BEGIN CODE
C ----------

      do mu = 0,3
         P(mu,2) = v(mu,1)
         P(mu,3) = v(mu,2)
         P(mu,4) = v(mu,3)
      enddo

      if (lswitch) then      ! read in lepton an W states from common block
         do i =1,6
            w(i,2) = wve(i,N)
            w(i,3) = wep(i,N)
            w(i,4) = atau2(i,N)
         enddo
      endif

      do mu = 0,3
         q(mu) = p(mu,2)+p(mu,3)+p(mu,4)
      enddo

      do mu = 0,3
      CALL DIBOSVCARTX(Q(0),ZMASS,ZWIDTH,MU,-1,W(1,1   ))
      CALL FVIXXX(W(1,3   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,5   ))    
      CALL IOVXXX(W(1,5   ),W(1,2   ),W(1,4   ),GAL ,AMP(1   ))            
      CALL FVOXXX(W(1,2   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL IOVXXX(W(1,3   ),W(1,6   ),W(1,4   ),GAL ,AMP(2   ))            

         AMP(3)=0d0
         AMP(4)=0d0
c no ZZA vertex in SM
      ztoza(mu) = -AMP(3)
      if (narrowwidth.eq.0) then
      ztoza(mu) = ztoza(mu) -AMP(1)-AMP(2)-AMP(4)
      endif

c      print*, abs(amp(4)/ztoza(mu))
      enddo
      ztoza(4) = dcmplx(q(0),q(3))
      ztoza(5) = dcmplx(q(1),q(2))
      return
      END


      SUBROUTINE ZA_HTOZA(v,N,myhza,NW)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : h -> e- e+ a  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   2)
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=  7)
      DOUBLE PRECISION     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      DOUBLE PRECISION P(0:3,2:4), Q(0:3), v(0:3,3)
      double complex myhza
      INTEGER NW ! = 0: all diagrams, = 1: no non resonant diagrams
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"          
#include "VBFNLO/utilities/global.inc"          
#include "VBFNLO/utilities/process.inc"
C  
C LOCAL VARIABLES 
C  
      INTEGER I, mu, N
      DOUBLE COMPLEX AMP(NGRAPHS)
      DOUBLE COMPLEX W(6,NWAVEFUNCS)

c  lepton spinors and W+- polarization vectors
#include "tensor.inc"

      logical lswitch
      parameter (lswitch=.true.)
C                                                                          
C ----------
C BEGIN CODE
C ----------
      do mu = 0,3
         P(mu,2) = v(mu,1)
         P(mu,3) = v(mu,2)
         P(mu,4) = v(mu,3)
      enddo

      if (lswitch) then      ! read in lepton an W states from common block
         do i=1,6
            w(i,2) = wve(i,N)
            w(i,3) = wep(i,N)
            w(i,4) = atau2(i,N)
         enddo
      endif

      do mu = 0,3
         q(mu) = p(mu,2)+p(mu,3)+p(mu,4)
      enddo
c
      CALL SXXXXX(Q(0     ),-1,W(1,1   ))                         
      CALL JIOXXX(W(1,3   ),W(1,2   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,6   ))    
      CALL JIOXXX(W(1,3   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,7   ))    

      CALL VVHAXX(W(1,6   ),W(1,4   ),W(1,1   ),2,1,AMP(1   ))            
      CALL VVHAXX(W(1,7   ),W(1,4   ),W(1,1   ),1,1,AMP(2   ))            

      myhza = +AMP(   1)
      if (narrowwidth.eq.0) then
      myhza = myhza     +AMP(   2)
      endif

      END


