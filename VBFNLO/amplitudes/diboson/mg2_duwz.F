
      SUBROUTINE SDUWMZ(P1,fsign,ANS)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : d u~ -> e- ve~ mu- mu+ 
C  
C Crossing   1 is d u~ -> e- ve~ mu- mu+  
      IMPLICIT NONE
C  
C CONSTANTS
C  
#include "VBFNLO/utilities/global.inc"
#include "VBFNLO/utilities/coupl.inc"
#include "genps.inc"
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB=  64, NCROSS=  1)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
      integer fsign(6)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T!, P(0:3,NEXTERNAL)
      REAL*8 DUWMZL
      INTEGER IHEL,IDEN(NCROSS)!,IC(NEXTERNAL,NCROSS)
      INTEGER IPROC,I!,JC(NEXTERNAL), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
      INTEGER idum, ngood, igood(ncomb), jhel, j, jj
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
      Double Precision amp2(maxamps), jamp2(0:maxamps)
      common/to_amps24/  amp2,       jamp2

      character*79         hel_buff
      common/to_helicity/  hel_buff

      REAL*8 POL(2)
      common/to_polarization/ POL

      integer          isum_hel
      logical                    multi_channel
      common/to_matrix24/isum_hel, multi_channel
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      common/to_mconfigs/mapconfig, iconfig
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,0/
      DATA multi_channel/.true./
      SAVE yfrac, igood, jhel
      DATA NGRAPHS /   10/          
      DATA jamp2(0) /   1/          
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1, 6) /-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1, 6) /-1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,   3),IHEL=1, 6) /-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1, 6) /-1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,   5),IHEL=1, 6) /-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1, 6) /-1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1, 6) /-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1, 6) /-1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,   9),IHEL=1, 6) /-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1, 6) /-1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  11),IHEL=1, 6) /-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1, 6) /-1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1, 6) /-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1, 6) /-1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  15),IHEL=1, 6) /-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1, 6) /-1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  17),IHEL=1, 6) /-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  18),IHEL=1, 6) /-1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1, 6) /-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1, 6) /-1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  21),IHEL=1, 6) /-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  22),IHEL=1, 6) /-1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  23),IHEL=1, 6) /-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  24),IHEL=1, 6) /-1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  25),IHEL=1, 6) /-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  26),IHEL=1, 6) /-1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  27),IHEL=1, 6) /-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  28),IHEL=1, 6) /-1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  29),IHEL=1, 6) /-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  30),IHEL=1, 6) /-1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  31),IHEL=1, 6) /-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  32),IHEL=1, 6) /-1, 1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  33),IHEL=1, 6) / 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  34),IHEL=1, 6) / 1,-1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  35),IHEL=1, 6) / 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  36),IHEL=1, 6) / 1,-1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  37),IHEL=1, 6) / 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  38),IHEL=1, 6) / 1,-1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  39),IHEL=1, 6) / 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  40),IHEL=1, 6) / 1,-1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  41),IHEL=1, 6) / 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  42),IHEL=1, 6) / 1,-1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  43),IHEL=1, 6) / 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  44),IHEL=1, 6) / 1,-1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  45),IHEL=1, 6) / 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  46),IHEL=1, 6) / 1,-1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  47),IHEL=1, 6) / 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  48),IHEL=1, 6) / 1,-1, 1, 1, 1, 1/
      DATA (NHEL(IHEL,  49),IHEL=1, 6) / 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  50),IHEL=1, 6) / 1, 1,-1,-1,-1, 1/
      DATA (NHEL(IHEL,  51),IHEL=1, 6) / 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  52),IHEL=1, 6) / 1, 1,-1,-1, 1, 1/
      DATA (NHEL(IHEL,  53),IHEL=1, 6) / 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  54),IHEL=1, 6) / 1, 1,-1, 1,-1, 1/
      DATA (NHEL(IHEL,  55),IHEL=1, 6) / 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  56),IHEL=1, 6) / 1, 1,-1, 1, 1, 1/
      DATA (NHEL(IHEL,  57),IHEL=1, 6) / 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  58),IHEL=1, 6) / 1, 1, 1,-1,-1, 1/
      DATA (NHEL(IHEL,  59),IHEL=1, 6) / 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  60),IHEL=1, 6) / 1, 1, 1,-1, 1, 1/
      DATA (NHEL(IHEL,  61),IHEL=1, 6) / 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  62),IHEL=1, 6) / 1, 1, 1, 1,-1, 1/
      DATA (NHEL(IHEL,  63),IHEL=1, 6) / 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  64),IHEL=1, 6) / 1, 1, 1, 1, 1, 1/
c      DATA (  IC(IHEL,  1),IHEL=1, 6) / 1, 2, 3, 4, 5, 6/
      DATA  (IDEN(IHEL),IHEL=  1,  1) /  1/!alt:(IDEN(IHEL),IHEL=  1,  1) /  36/
C ----------
C BEGIN CODE
C ----------
c neu

      iproc=1
c-------
      NTRY=NTRY+1
c      DO IPROC=1,NCROSS
c      CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,NEXTERNAL)
c      DO IHEL=1,NEXTERNAL
c         JC(IHEL) = +1
c      ENDDO
c       
c      IF (multi_channel) THEN
c          DO IHEL=1,NGRAPHS
c              amp2(ihel)=0d0
c          ENDDO
c          DO IHEL=1,int(jamp2(0))
c              jamp2(ihel)=0d0
c          ENDDO
c      ENDIF
      ANS(IPROC) = 0D0
      write(hel_buff,'(16i5)') (0,i=1,nexternal)
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
          DO IHEL=1,1!******************8ganzneu
             IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
                 T=DUWMZL(P1 ,fsign(1))         
!                 T=DUWMZL(P1 ,NHEL(1,IHEL),fsign(1))            
c?               DO JJ=1,nincoming
c?                 IF(POL(JJ).NE.1d0.AND.
c?     &              NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
c?                   T=T*ABS(POL(JJ))
c?                 ELSE IF(POL(JJ).NE.1d0)THEN
c?                   T=T*(2d0-ABS(POL(JJ)))
c?                 ENDIF
c?               ENDDO
               ANS(IPROC)=ANS(IPROC)+T
               IF (T .NE. 0D0 .AND. .NOT.    GOODHEL(IHEL,IPROC)) THEN
                   GOODHEL(IHEL,IPROC)=.TRUE.
                   NGOOD = NGOOD +1
                   IGOOD(NGOOD) = IHEL
               ENDIF
             ENDIF
          ENDDO
          JHEL = 1
          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE              !RANDOM HELICITY
          DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
              T=DUWMZL(P1 ,fsign(1))   
!              T=DUWMZL(P1 ,NHEL(1,IHEL),fsign(1))            
c?              DO JJ=1,nincoming
c?                IF(POL(JJ).NE.1d0.AND.
c?     &             NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
c?                  T=T*ABS(POL(JJ))
c?                ELSE IF(POL(JJ).NE.1d0)THEN
c?                  T=T*(2d0-ABS(POL(JJ)))
c?                ENDIF
c?              ENDDO
              ANS(IPROC)=ANS(IPROC)+T*HWGT
          ENDDO
          IF (ISUM_HEL .EQ. 1) THEN
              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
          ENDIF
      ENDIF
      IF (MULTI_CHANNEL) THEN
          XTOT=0D0
          DO IHEL=1,MAPCONFIG(0)
              XTOT=XTOT+AMP2(MAPCONFIG(IHEL))
          ENDDO
          IF (XTOT.NE.0D0) THEN
              ANS(IPROC)=ANS(IPROC)*AMP2(MAPCONFIG(ICONFIG))/XTOT
c          ELSE
c              ANS(IPROC)=0D0
          ENDIF
      ENDIF
      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
c      ENDDO
      END
       
       
      REAL*8 FUNCTION DUWMZL(P,fsign)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : d u~ -> e- ve~ mu- mu+   
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=  11,NEIGEN=  1) 
#include "VBFNLO/utilities/global.inc"
#include "VBFNLO/utilities/process.inc"
#include "genps.inc"
#include "tensor.inc"
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=  55, NCOLOR=   1) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER fsign(NEXTERNAL)!NHEL(NEXTERNAL), *****ganzneu
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(18,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
      Double Precision amp2(maxamps), jamp2(0:maxamps)
      common/to_amps24/  amp2,       jamp2
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/coupl_haddecay.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,1  ) /     3/                                  
C               T[ 2, 1]                                                   
C ----------
C BEGIN CODE
C ----------
c      CALL IXXXXX(P(0,1   ),ZERO ,NHEL(1   ),+1*IC(1   ),W(1,1   ))        
c      CALL OXXXXX(P(0,2   ),ZERO ,NHEL(2   ),-1*IC(2   ),W(1,2   ))        
c      CALL OXXXXX(P(0,3   ),ZERO ,NHEL(3   ),+1*IC(3   ),W(1,3   ))        
c      CALL IXXXXX(P(0,4   ),ZERO ,NHEL(4   ),-1*IC(4   ),W(1,4   ))        
c      CALL OXXXXX(P(0,5   ),ZERO ,NHEL(5   ),+1*IC(5   ),W(1,5   ))        
c      CALL IXXXXX(P(0,6   ),ZERO ,NHEL(6   ),-1*IC(6   ),W(1,6   ))        

      CALL IXXXXX(P(0,1),ZERO ,-1,1,W(1,1   ))        
      CALL OXXXXX(P(0,2),ZERO ,1,-1,W(1,2   ))        

         do i=1,6
            w(i,3) = wve(i,1)
            w(i,4) = wep(i,1)
            w(i,5) = wmu(i,1)
            w(i,6) = wmubar(i,1)!***************ganzneu

         enddo

      if (procid.eq.WMhadZ) then

      CALL JIOXXX(W(1,4   ),W(1,2   ),GAU ,ZERO    ,AWIDTH  ,W(1,7   ))    
      CALL FVOXXX(W(1,3   ),W(1,7   ),GAD ,ZERO    ,ZERO    ,W(1,8   ))    
      CALL JIOXXX(W(1,1   ),W(1,8   ),GAD ,ZERO    ,AWIDTH  ,W(1,9   ))    
      CALL JIOXXX(W(1,1   ),W(1,8   ),GZD ,ZMASS   ,ZWIDTH  ,W(1,10  ))    
      CALL JIOXXX(W(1,4   ),W(1,2   ),GZU ,ZMASS   ,ZWIDTH  ,W(1,11  ))    
      CALL FVOXXX(W(1,3   ),W(1,11  ),GZD ,ZERO    ,ZERO    ,W(1,12  ))    
      CALL JIOXXX(W(1,1   ),W(1,12  ),GAD ,ZERO    ,AWIDTH  ,W(1,13  ))    
      CALL JIOXXX(W(1,1   ),W(1,12  ),GZD ,ZMASS   ,ZWIDTH  ,W(1,14  ))    
      CALL JIOXXX(W(1,1   ),W(1,3   ),GAD ,ZERO    ,AWIDTH  ,W(1,15  ))    
      CALL FVIXXX(W(1,4   ),W(1,15  ),GAU ,ZERO    ,ZERO    ,W(1,16  ))    
      CALL JIOXXX(W(1,16  ),W(1,2   ),GAU ,ZERO    ,AWIDTH  ,W(1,17  ))    
      CALL JIOXXX(W(1,16  ),W(1,2   ),GZU ,ZMASS   ,ZWIDTH  ,W(1,18  ))    
      CALL JIOXXX(W(1,1   ),W(1,3   ),GZD ,ZMASS   ,ZWIDTH  ,W(1,19  ))    
      CALL FVIXXX(W(1,4   ),W(1,19  ),GZU ,ZERO    ,ZERO    ,W(1,20  ))    
      CALL JIOXXX(W(1,20  ),W(1,2   ),GAU ,ZERO    ,AWIDTH  ,W(1,21  ))    
      CALL JIOXXX(W(1,20  ),W(1,2   ),GZU ,ZMASS   ,ZWIDTH  ,W(1,22  ))    
      CALL FVIXXX(W(1,1   ),W(1,7   ),GAD ,ZERO    ,ZERO    ,W(1,23  ))    
      CALL JIOXXX(W(1,23  ),W(1,3   ),GAD ,ZERO    ,AWIDTH  ,W(1,24  ))    
      CALL JIOXXX(W(1,23  ),W(1,3   ),GZD ,ZMASS   ,ZWIDTH  ,W(1,25  ))    
      CALL FVIXXX(W(1,1   ),W(1,11  ),GZD ,ZERO    ,ZERO    ,W(1,26  ))    
      CALL JIOXXX(W(1,26  ),W(1,3   ),GAD ,ZERO    ,AWIDTH  ,W(1,27  ))    
      CALL JIOXXX(W(1,26  ),W(1,3   ),GZD ,ZMASS   ,ZWIDTH  ,W(1,28  ))    
      CALL FVOXXX(W(1,2   ),W(1,15  ),GAU ,ZERO    ,ZERO    ,W(1,29  ))    
      CALL JIOXXX(W(1,4   ),W(1,29  ),GAU ,ZERO    ,AWIDTH  ,W(1,30  ))    
      CALL JIOXXX(W(1,4   ),W(1,29  ),GZU ,ZMASS   ,ZWIDTH  ,W(1,31  ))    
      CALL FVOXXX(W(1,2   ),W(1,19  ),GZU ,ZERO    ,ZERO    ,W(1,32  ))    
      CALL JIOXXX(W(1,4   ),W(1,32  ),GAU ,ZERO    ,AWIDTH  ,W(1,33  ))    
      CALL JIOXXX(W(1,4   ),W(1,32  ),GZU ,ZMASS   ,ZWIDTH  ,W(1,34  ))    
      CALL FVOXXX(W(1,5   ),W(1,7   ),GAL ,ZERO    ,ZERO    ,W(1,35  ))    
      CALL FVOXXX(W(1,5   ),W(1,11  ),GZL ,ZERO    ,ZERO    ,W(1,36  ))    
      CALL FVOXXX(W(1,5   ),W(1,15  ),GAL ,ZERO    ,ZERO    ,W(1,37  ))    
      CALL FVOXXX(W(1,5   ),W(1,19  ),GZL ,ZERO    ,ZERO    ,W(1,38  ))    
      CALL JIOXXX(W(1,4   ),W(1,3   ),GWF ,WMASS   ,WWIDTH  ,W(1,39  ))    
      CALL FVOXXX(W(1,2   ),W(1,39  ),GWF ,ZERO    ,ZERO    ,W(1,40  ))    
      CALL JIOXXX(W(1,1   ),W(1,40  ),GAD ,ZERO    ,AWIDTH  ,W(1,41  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,41  ),GAL ,AMP(1  ))            
      CALL JIOXXX(W(1,1   ),W(1,40  ),GZD ,ZMASS   ,ZWIDTH  ,W(1,42  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,42  ),GZL ,AMP(2  ))            
      CALL FVIXXX(W(1,1   ),W(1,39  ),GWF ,ZERO    ,ZERO    ,W(1,43  ))    
      CALL JIOXXX(W(1,43  ),W(1,2   ),GAU ,ZERO    ,AWIDTH  ,W(1,44  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,44  ),GAL ,AMP(3  ))            
      CALL JIOXXX(W(1,43  ),W(1,2   ),GZU ,ZMASS   ,ZWIDTH  ,W(1,45  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,45  ),GZL ,AMP(4  ))            
      CALL JIOXXX(W(1,1   ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,46  ))    
      CALL FVIXXX(W(1,4   ),W(1,46  ),GWF ,ZERO    ,ZERO    ,W(1,47  ))    
      CALL JIOXXX(W(1,47  ),W(1,3   ),GAD ,ZERO    ,AWIDTH  ,W(1,48  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,48  ),GAL ,AMP(5  ))            
      CALL JIOXXX(W(1,47  ),W(1,3   ),GZD ,ZMASS   ,ZWIDTH  ,W(1,49  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,49  ),GZL ,AMP(6  ))            
      CALL FVOXXX(W(1,3   ),W(1,46  ),GWF ,ZERO    ,ZERO    ,W(1,50  ))    
      CALL JIOXXX(W(1,4   ),W(1,50  ),GAU ,ZERO    ,AWIDTH  ,W(1,51  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,51  ),GAL ,AMP(7  ))            
      CALL JIOXXX(W(1,4   ),W(1,50  ),GZU ,ZMASS   ,ZWIDTH  ,W(1,52  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,52  ),GZL ,AMP(8  ))            
      CALL JVVXXX(W(1,39  ),W(1,46  ),GWWA ,ZERO    ,AWIDTH  ,W(1,         
     &     53  ))                                                          
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,53  ),GAL ,AMP(9  ))            
      CALL JVVXXX(W(1,39  ),W(1,46  ),GWWZ ,ZMASS   ,ZWIDTH  ,W(1,         
     &     54  ))                                                          
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,54  ),GZL ,AMP(10  ))            
      CALL FVOXXX(W(1,5   ),W(1,46  ),GWF ,ZERO    ,ZERO    ,W(1,55  ))    
      CALL IOVXXX(W(1,6   ),W(1,55  ),W(1,39  ),GWF ,AMP(11  ))            
      JAMP(   1) = +AMP(   1)+AMP(   2)+AMP(   3)+AMP(   4)+AMP(   5)
     &             +AMP(   6)+AMP(   7)+AMP(   8)+AMP(   9)+AMP(  10)+AMP(  11)

      elseif (procid.eq.WMZhad) then

      if (Ztouu) then

      CALL JIOXXX(W(1,1   ),W(1,5   ),GWF ,WMASS   ,WWIDTH  ,W(1,7   ))    
      CALL FVIXXX(W(1,4   ),W(1,7   ),GWF ,ZERO    ,ZERO    ,W(1,8   ))    
      CALL JIOXXX(W(1,8   ),W(1,3   ),GAL ,ZERO    ,AWIDTH  ,W(1,9   ))    
      CALL JIOXXX(W(1,8   ),W(1,3   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,10  ))    
      CALL FVOXXX(W(1,3   ),W(1,7   ),GWF ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL JIOXXX(W(1,4   ),W(1,11  ),GZN ,ZMASS   ,ZWIDTH  ,W(1,12  ))    
      CALL JIOXXX(W(1,4   ),W(1,3   ),GWF ,WMASS   ,WWIDTH  ,W(1,13  ))    
      CALL JVVXXX(W(1,13  ),W(1,7   ),GWWA ,ZERO    ,AWIDTH  ,W(1,         
     &     14  ))                                                          
      CALL JVVXXX(W(1,13  ),W(1,7   ),GWWZ ,ZMASS   ,ZWIDTH  ,W(1,         
     &     15  ))                                                          
      CALL FVOXXX(W(1,2   ),W(1,13  ),GWF ,ZERO    ,ZERO    ,W(1,16  ))    
      CALL FVIXXX(W(1,1   ),W(1,13  ),GWF ,ZERO    ,ZERO    ,W(1,17  ))    
      CALL JIOXXX(W(1,17  ),W(1,5   ),GAU ,ZERO    ,AWIDTH  ,W(1,18  ))    
      CALL JIOXXX(W(1,17  ),W(1,5   ),GZU ,ZMASS   ,ZWIDTH  ,W(1,19  ))    
      CALL FVOXXX(W(1,5   ),W(1,13  ),GWF ,ZERO    ,ZERO    ,W(1,20  ))    
      CALL JIOXXX(W(1,1   ),W(1,20  ),GAD ,ZERO    ,AWIDTH  ,W(1,21  ))    
      CALL JIOXXX(W(1,1   ),W(1,20  ),GZD ,ZMASS   ,ZWIDTH  ,W(1,22  ))    
      CALL JIOXXX(W(1,1   ),W(1,16  ),GAD ,ZERO    ,AWIDTH  ,W(1,23  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,23  ),GAU ,AMP(1  ))            
      CALL JIOXXX(W(1,1   ),W(1,16  ),GZD ,ZMASS   ,ZWIDTH  ,W(1,24  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,24  ),GZU ,AMP(2  ))            
      CALL JIOXXX(W(1,17  ),W(1,2   ),GAU ,ZERO    ,AWIDTH  ,W(1,25  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,25  ),GAU ,AMP(3  ))            
      CALL JIOXXX(W(1,17  ),W(1,2   ),GZU ,ZMASS   ,ZWIDTH  ,W(1,26  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,26  ),GZU ,AMP(4  ))            
      CALL JIOXXX(W(1,1   ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,27  ))    
      CALL FVIXXX(W(1,4   ),W(1,27  ),GWF ,ZERO    ,ZERO    ,W(1,28  ))    
      CALL JIOXXX(W(1,28  ),W(1,3   ),GAL ,ZERO    ,AWIDTH  ,W(1,29  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,29  ),GAU ,AMP(5  ))            
      CALL JIOXXX(W(1,28  ),W(1,3   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,30  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,30  ),GZU ,AMP(6  ))            
      CALL FVOXXX(W(1,3   ),W(1,27  ),GWF ,ZERO    ,ZERO    ,W(1,31  ))    
      CALL JIOXXX(W(1,4   ),W(1,31  ),GZN ,ZMASS   ,ZWIDTH  ,W(1,32  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,32  ),GZU ,AMP(7  ))            
      CALL JVVXXX(W(1,13  ),W(1,27  ),GWWA ,ZERO    ,AWIDTH  ,W(1,         
     &     33  ))                                                          
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,33  ),GAU ,AMP(8  ))            
      CALL JVVXXX(W(1,13  ),W(1,27  ),GWWZ ,ZMASS   ,ZWIDTH  ,W(1,         
     &     34  ))                                                          
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,34  ),GZU ,AMP(9  ))            
      CALL IOVXXX(W(1,6   ),W(1,20  ),W(1,27  ),GWF ,AMP(10  ))            
      JAMP(   1) = -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)-AMP(   5)
     &             -AMP(   6)-AMP(   7)-AMP(   8)-AMP(   9)-AMP(  10)

      else

      CALL JIOXXX(W(1,1   ),W(1,5   ),GZD ,ZMASS   ,ZWIDTH  ,W(1,7   ))    
      CALL FVIXXX(W(1,4   ),W(1,7   ),GZN ,ZERO    ,ZERO    ,W(1,8   ))    
      CALL JIOXXX(W(1,8   ),W(1,3   ),GWF ,WMASS   ,WWIDTH  ,W(1,9   ))    
      CALL JIOXXX(W(1,1   ),W(1,5   ),GAD ,ZERO    ,AWIDTH  ,W(1,10  ))    
      CALL FVOXXX(W(1,3   ),W(1,10  ),GAL ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL JIOXXX(W(1,4   ),W(1,11  ),GWF ,WMASS   ,WWIDTH  ,W(1,12  ))    
      CALL FVOXXX(W(1,3   ),W(1,7   ),GZL ,ZERO    ,ZERO    ,W(1,13  ))    
      CALL JIOXXX(W(1,4   ),W(1,13  ),GWF ,WMASS   ,WWIDTH  ,W(1,14  ))    
      CALL JIOXXX(W(1,4   ),W(1,3   ),GWF ,WMASS   ,WWIDTH  ,W(1,15  ))    
      CALL JVVXXX(W(1,10  ),W(1,15  ),GWWA ,WMASS   ,WWIDTH  ,W(1,         
     &     16  ))                                                          
      CALL JVVXXX(W(1,7   ),W(1,15  ),GWWZ ,WMASS   ,WWIDTH  ,W(1,         
     &     17  ))                                                          
      CALL FVOXXX(W(1,2   ),W(1,10  ),GAU ,ZERO    ,ZERO    ,W(1,18  ))    
      CALL FVOXXX(W(1,2   ),W(1,7   ),GZU ,ZERO    ,ZERO    ,W(1,19  ))    
      CALL FVOXXX(W(1,2   ),W(1,15  ),GWF ,ZERO    ,ZERO    ,W(1,20  ))    
      CALL FVIXXX(W(1,1   ),W(1,15  ),GWF ,ZERO    ,ZERO    ,W(1,21  ))    
      CALL JIOXXX(W(1,21  ),W(1,5   ),GWF ,WMASS   ,WWIDTH  ,W(1,22  ))    
      CALL JIOXXX(W(1,1   ),W(1,20  ),GAD ,ZERO    ,AWIDTH  ,W(1,23  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,23  ),GAD ,AMP(1  ))            
      CALL JIOXXX(W(1,1   ),W(1,20  ),GZD ,ZMASS   ,ZWIDTH  ,W(1,24  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,24  ),GZD ,AMP(2  ))            
      CALL JIOXXX(W(1,21  ),W(1,2   ),GAU ,ZERO    ,AWIDTH  ,W(1,25  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,25  ),GAD ,AMP(3  ))            
      CALL JIOXXX(W(1,21  ),W(1,2   ),GZU ,ZMASS   ,ZWIDTH  ,W(1,26  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,26  ),GZD ,AMP(4  ))            
      CALL JIOXXX(W(1,1   ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,27  ))    
      CALL FVIXXX(W(1,4   ),W(1,27  ),GWF ,ZERO    ,ZERO    ,W(1,28  ))    
      CALL JIOXXX(W(1,28  ),W(1,3   ),GAL ,ZERO    ,AWIDTH  ,W(1,29  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,29  ),GAD ,AMP(5  ))            
      CALL JIOXXX(W(1,28  ),W(1,3   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,30  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,30  ),GZD ,AMP(6  ))            
      CALL FVOXXX(W(1,3   ),W(1,27  ),GWF ,ZERO    ,ZERO    ,W(1,31  ))    
      CALL JIOXXX(W(1,4   ),W(1,31  ),GZN ,ZMASS   ,ZWIDTH  ,W(1,32  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,32  ),GZD ,AMP(7  ))            
      CALL JVVXXX(W(1,15  ),W(1,27  ),GWWA ,ZERO    ,AWIDTH  ,W(1,         
     &     33  ))                                                          
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,33  ),GAD ,AMP(8  ))            
      CALL JVVXXX(W(1,15  ),W(1,27  ),GWWZ ,ZMASS   ,ZWIDTH  ,W(1,         
     &     34  ))                                                          
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,34  ),GZD ,AMP(9  ))            
      CALL FVOXXX(W(1,5   ),W(1,27  ),GWF ,ZERO    ,ZERO    ,W(1,35  ))    
      CALL IOVXXX(W(1,6   ),W(1,35  ),W(1,15  ),GWF ,AMP(10  ))            
      JAMP(   1) = +AMP(   1)+AMP(   2)+AMP(   3)+AMP(   4)+AMP(   5)
     &             +AMP(   6)+AMP(   7)+AMP(   8)+AMP(   9)+AMP(  10)

      endif

      else

      CALL JIOXXX(W(1,4   ),W(1,3   ),GWF ,WMASS   ,WWIDTH  ,W(1,7   ))    
      CALL FVOXXX(W(1,2   ),W(1,7   ),GWF ,ZERO    ,ZERO    ,W(1,8   ))    
      CALL JIOXXX(W(1,1   ),W(1,8   ),GAD ,ZERO    ,AWIDTH  ,W(1,9   ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,9   ),GAL ,AMP(1   ))            
      CALL JIOXXX(W(1,1   ),W(1,8   ),GZD ,ZMASS   ,ZWIDTH  ,W(1,10  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,10  ),GZL ,AMP(2   ))            
      CALL FVIXXX(W(1,1   ),W(1,7   ),GWF ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL JIOXXX(W(1,11  ),W(1,2   ),GAU ,ZERO    ,AWIDTH  ,W(1,12  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,12  ),GAL ,AMP(3   ))            
      CALL JIOXXX(W(1,11  ),W(1,2   ),GZU ,ZMASS   ,ZWIDTH  ,W(1,13  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,13  ),GZL ,AMP(4   ))            
      CALL JIOXXX(W(1,1   ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,14  ))    
      CALL FVIXXX(W(1,4   ),W(1,14  ),GWF ,ZERO    ,ZERO    ,W(1,15  ))    
      CALL JIOXXX(W(1,15  ),W(1,3   ),GAL ,ZERO    ,AWIDTH  ,W(1,16  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,16  ),GAL ,AMP(5   ))            
      CALL JIOXXX(W(1,15  ),W(1,3   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,17  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,17  ),GZL ,AMP(6   ))            
      CALL FVOXXX(W(1,3   ),W(1,14  ),GWF ,ZERO    ,ZERO    ,W(1,18  ))    
      CALL JIOXXX(W(1,4   ),W(1,18  ),GZN ,ZMASS   ,ZWIDTH  ,W(1,19  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,19  ),GZL ,AMP(7   ))            
      CALL JVVXXX(W(1,7   ),W(1,14  ),GWWA ,ZERO    ,AWIDTH  ,W(1,         
     &     20  ))                                                          
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,20  ),GAL ,AMP(8   ))            
      CALL JVVXXX(W(1,7   ),W(1,14  ),GWWZ ,ZMASS   ,ZWIDTH  ,W(1,         
     &     21  ))                                                          
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,21  ),GZL ,AMP(9   ))            
      CALL FVOXXX(W(1,5   ),W(1,14  ),GWF ,ZERO    ,ZERO    ,W(1,22  ))    
      CALL IOVXXX(W(1,6   ),W(1,22  ),W(1,7   ),GWF ,AMP(10  ))  
      JAMP(   1) = +AMP(   1)+AMP(   2)+AMP(   3)+AMP(   4)+AMP(   5)
     &             +AMP(   6)+AMP(   7)+AMP(   8)+AMP(   9)+AMP(  10)

      endif

      DUWMZL = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
           DUWMZL=DUWMZL+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO

c          print*,UDWPZL
          

      Do I = 1, NGRAPHS
          amp2(i)=amp2(i)+amp(i)*dconjg(amp(i))
      Enddo
      Do I = 1, NCOLOR
          Jamp2(i)=Jamp2(i)+Jamp(i)*dconjg(Jamp(i))
      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END



