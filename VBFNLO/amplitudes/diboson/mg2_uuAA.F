      SUBROUTINE SUU_AA(P1,fsign,ANS)
C  
C Generated by MadGraph II                                              
C MadGraph StandAlone Version
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : u u~ -> a a  
C  
C Crossing   1 is u u~ -> a a  
      IMPLICIT NONE
C  
C CONSTANTS
C  
#include "genps.inc"
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB=  16, NCROSS=  1)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      DOUBLE PRECISION P1(0:3,NEXTERNAL),ANS(NCROSS)
      integer fsign(NEXTERNAL)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      DOUBLE PRECISION T !, P(0:3,NEXTERNAL)
      DOUBLE PRECISION UU_AA
      INTEGER IHEL,IDEN(NCROSS) !,IC(NEXTERNAL,NCROSS)
      INTEGER IPROC,I !JC(NEXTERNAL), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      DOUBLE PRECISION hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
      INTEGER idum, ngood, igood(ncomb), jhel, j
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C
C GLOBAL VARIABLES
C
      Double Precision amp2(maxamps), jamp2(0:maxamps)
      common/to_ampstri303/  amp2,       jamp2

      character*79         hel_buff
      common/to_helicity/  hel_buff

      integer          isum_hel
      logical                    multi_channel
      common/to_matrix/isum_hel, multi_channel
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      common/to_mconfigs/mapconfig, iconfig
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
c      DATA warned, isum_hel/.false.,0/
      DATA warned /.false./
c      DATA multi_channel/.false./
      DATA jamp2(0) /   1/
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1, 4) /-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1, 4) /-1,-1,-1, 1/
      DATA (NHEL(IHEL,   3),IHEL=1, 4) /-1,-1, 1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1, 4) /-1,-1, 1, 1/
      DATA (NHEL(IHEL,   5),IHEL=1, 4) /-1, 1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1, 4) /-1, 1,-1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1, 4) /-1, 1, 1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1, 4) /-1, 1, 1, 1/
      DATA (NHEL(IHEL,   9),IHEL=1, 4) / 1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1, 4) / 1,-1,-1, 1/
      DATA (NHEL(IHEL,  11),IHEL=1, 4) / 1,-1, 1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1, 4) / 1,-1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1, 4) / 1, 1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1, 4) / 1, 1,-1, 1/
      DATA (NHEL(IHEL,  15),IHEL=1, 4) / 1, 1, 1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1, 4) / 1, 1, 1, 1/
c      DATA (  IC(IHEL,  1),IHEL=1, 4) / 1, 2, 3, 4/
      DATA (IDEN(IHEL),IHEL=  1,  1) /   1/
C ----------
C BEGIN CODE
C ----------
c neu
      iproc=1
c -------
      NTRY=NTRY+1
c     DO IPROC=1,NCROSS
c     CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,NEXTERNAL)
c     DO IHEL=1,NEXTERNAL
c        JC(IHEL) = +1
c     ENDDO

c      IF (multi_channel) THEN
c          DO IHEL=1,NGRAPHS
c              amp2(ihel)=0d0
c              jamp2(ihel)=0d0
c          ENDDO
c          DO IHEL=1,int(jamp2(0))
c              jamp2(ihel)=0d0
c          ENDDO
c      ENDIF
      ANS(IPROC) = 0D0
      write(hel_buff,'(16i5)') (0,i=1,nexternal)
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
          DO IHEL=1,NCOMB
             IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
                 T=UU_AA(P1 ,NHEL(1,IHEL),fsign(1))            
               ANS(IPROC)=ANS(IPROC)+T
               IF (T .NE. 0D0 .AND. .NOT.    GOODHEL(IHEL,IPROC)) THEN
                   GOODHEL(IHEL,IPROC)=.TRUE.
                      NGOOD = NGOOD +1
                      IGOOD(NGOOD) = IHEL
c                      WRITE(*,*) ngood,IHEL,T
               ENDIF
             ENDIF
          ENDDO
          JHEL = 1
          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE              !RANDOM HELICITY
          DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
              T=UU_AA(P1 ,NHEL(1,IHEL),fsign(1))
           ANS(IPROC)=ANS(IPROC)+T*HWGT
          ENDDO
          IF (ISUM_HEL .EQ. 1) THEN
              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
          ENDIF
      ENDIF
      IF (MULTI_CHANNEL) THEN
          XTOT=0D0
          DO IHEL=1,MAPCONFIG(0)
              XTOT=XTOT+AMP2(MAPCONFIG(IHEL))
          ENDDO
          ANS(IPROC)=ANS(IPROC)*AMP2(MAPCONFIG(ICONFIG))/XTOT
      ENDIF

      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
c      ENDDO
      END
       
       
      DOUBLE PRECISION FUNCTION UU_AA(P,NHEL,fsign)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : u u~ -> a a  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   2,NEIGEN=  1) 
#include "VBFNLO/utilities/global.inc"
#include "genps.inc"
#include "tensor.inc"
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=   6, NCOLOR=   1) 
      DOUBLE PRECISION     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      DOUBLE PRECISION P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), fsign(NEXTERNAL)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      DOUBLE COMPLEX ZTEMP
      DOUBLE PRECISION DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      DOUBLE COMPLEX AMP(NGRAPHS), JAMP(NCOLOR)
      DOUBLE COMPLEX W(18,NWAVEFUNCS)
      DOUBLE COMPLEX subprocess(1)

C  
C GLOBAL VARIABLES
C  
      Double Precision amp2(maxamps), jamp2(0:maxamps)
      common/to_ampstri303/  amp2,       jamp2
#include "VBFNLO/utilities/coupl.inc"
      integer h
      common /hcount / h


C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,1  ) /     3/                                  
C               T[ 2, 1]                                                   
C ----------
C BEGIN CODE
C ----------
      CALL IXXXXX(P(0,1),ZERO ,NHEL(1)*FSIGN(1),FSIGN(1),W(1,1   ))        
      CALL OXXXXX(P(0,2),ZERO ,NHEL(2)*FSIGN(2),FSIGN(2),W(1,2   ))        
      CALL VXXXXX(P(0,3),ZERO ,NHEL(3)*FSIGN(3),FSIGN(3),W(1,3   ))        
      CALL VXXXXX(P(0,4),ZERO ,NHEL(4)*FSIGN(4),FSIGN(4),W(1,4   ))        
      CALL FVOXXX(W(1,2   ),W(1,3   ),GAU ,ZERO    ,ZERO    ,W(1,5   ))    
      CALL IOVXXX(W(1,1   ),W(1,5   ),W(1,4   ),GAU ,AMP(1   ))            
      CALL FVIXXX(W(1,1   ),W(1,3   ),GAU ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL IOVXXX(W(1,6   ),W(1,2   ),W(1,4   ),GAU ,AMP(2   ))            

c qq -> A A

      subprocess(1) =-AMP( 1) - AMP( 2)


         JAMP(   1) =
     &        subprocess(1)

c------------------------------------------------------------------

c comparison with hand made code

      do i = 1,1
         if (nhel(1).eq.nhel(2)) then
           if((h.eq.1.and.nhel(3).eq.+1.and.nhel(4).eq.+1).or.
     &        (h.eq.2.and.nhel(3).eq.-1.and.nhel(4).eq.+1).or.
     &        (h.eq.3.and.nhel(3).eq.+1.and.nhel(4).eq.-1).or.
     &        (h.eq.4.and.nhel(3).eq.-1.and.nhel(4).eq.-1)
     &                                                    ) then
                tamp(i,nhel(1),1) = subprocess(i)
           endif
         endif
      enddo


c------------------------------------------------------------------

      UU_AA = 0.D0
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          UU_AA =UU_AA+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
      Do I = 1, NGRAPHS
          amp2(i)=amp2(i)+amp(i)*dconjg(amp(i))
      Enddo
      Do I = 1, NCOLOR
          Jamp2(i)=Jamp2(i)+Jamp(i)*dconjg(Jamp(i))
      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END


