c These are the charged current processes.
c
      SUBROUTINE SUS_DCGGH(pbar,fsign,qbar,gsign,ph,ANS)
c  Last modified: 1 Sept 2008
c  Terrance figy
c
c  ANS(0) = sum_{i=1,NCOLOR} ANS(i)
c     ANS(i) = weight(i) * ANS(0)
c     weight(i) = |A(i)|^2/sum_{j=1,NCOLOR} |A(j)|^2
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : u s -> d c g g h  
C  
C Crossing   1 is u s -> d c g g h  
      IMPLICIT NONE
C  
C CONSTANTS
C  
#include "genps.inc"
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB=  64, NCROSS=  1)
      integer nexternal
      parameter(nexternal = 7)
c     sign factors 
      integer fsign(4),gsign(2)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
c      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
      real*8 ans(0:6)
      real*8 pbar(0:3,4),qbar(0:3,2),ph(0:3)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T(0:6)
c
      INTEGER IHEL,IDEN(NCROSS)
      INTEGER IPROC, ICOL
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtry, xrej
      INTEGER idum, ngood, igood(ncomb), jhel, j
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
     

      character*79         hel_buff
      common/to_helicity/  hel_buff

      integer          isum_hel
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,0/
      SAVE igood, IDUM, jhel
      DATA NGRAPHS /   24/               
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1,7) /-1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1,7) /-1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,   3),IHEL=1,7) /-1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1,7) /-1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,   5),IHEL=1,7) /-1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1,7) /-1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,   7),IHEL=1,7) /-1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1,7) /-1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,   9),IHEL=1,7) /-1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1,7) /-1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  11),IHEL=1,7) /-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1,7) /-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  13),IHEL=1,7) /-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1,7) /-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  15),IHEL=1,7) /-1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1,7) /-1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  17),IHEL=1,7) /-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  18),IHEL=1,7) /-1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  19),IHEL=1,7) /-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1,7) /-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  21),IHEL=1,7) /-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  22),IHEL=1,7) /-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  23),IHEL=1,7) /-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  24),IHEL=1,7) /-1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  25),IHEL=1,7) /-1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  26),IHEL=1,7) /-1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  27),IHEL=1,7) /-1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  28),IHEL=1,7) /-1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  29),IHEL=1,7) /-1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  30),IHEL=1,7) /-1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  31),IHEL=1,7) /-1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  32),IHEL=1,7) /-1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  33),IHEL=1,7) / 1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  34),IHEL=1,7) / 1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  35),IHEL=1,7) / 1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  36),IHEL=1,7) / 1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  37),IHEL=1,7) / 1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  38),IHEL=1,7) / 1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  39),IHEL=1,7) / 1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  40),IHEL=1,7) / 1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  41),IHEL=1,7) / 1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  42),IHEL=1,7) / 1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  43),IHEL=1,7) / 1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  44),IHEL=1,7) / 1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  45),IHEL=1,7) / 1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  46),IHEL=1,7) / 1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  47),IHEL=1,7) / 1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  48),IHEL=1,7) / 1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  49),IHEL=1,7) / 1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  50),IHEL=1,7) / 1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  51),IHEL=1,7) / 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  52),IHEL=1,7) / 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  53),IHEL=1,7) / 1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  54),IHEL=1,7) / 1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  55),IHEL=1,7) / 1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  56),IHEL=1,7) / 1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  57),IHEL=1,7) / 1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  58),IHEL=1,7) / 1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  59),IHEL=1,7) / 1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  60),IHEL=1,7) / 1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  61),IHEL=1,7) / 1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  62),IHEL=1,7) / 1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  63),IHEL=1,7) / 1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  64),IHEL=1,7) / 1, 1, 1, 1, 1, 1,-1/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  72/
C ----------
C BEGIN CODE
C ----------
      NTRY=NTRY+1
      IPROC=1
       
      do ICOL=0,6
      ANS(ICOL) = 0D0
      enddo
      
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
         
         DO IHEL=1,NCOMB
            IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
               call US_DCGGH(pbar,qbar,ph,nhel(1,ihel),fsign,gsign,T)
               do ICOL=0,6
                  ANS(ICOL) = ANS(ICOL) + T(ICOL)
               enddo
               IF (T(0) .GT. 0D0 .AND. .NOT. GOODHEL(IHEL,IPROC)) THEN
                  GOODHEL(IHEL,IPROC)=.TRUE.
                  NGOOD = NGOOD +1
                  IGOOD(NGOOD) = IHEL
C     WRITE(*,*) ngood,IHEL,T
               ENDIF
            ENDIF
         ENDDO
         JHEL = 1
         ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE                      !RANDOM HELICITY
         DO J=1,ISUM_HEL
            JHEL=JHEL+1
            IF (JHEL .GT. NGOOD) JHEL=1
            HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
            IHEL = IGOOD(JHEL)
            call US_DCGGH(pbar,qbar,ph,nhel(1,ihel),fsign,gsign,T)
            do ICOL=0,6
               ANS(ICOL)=ANS(ICOL)+T(ICOL)*HWGT
            enddo
         ENDDO
c     IF (ISUM_HEL .EQ. 1) THEN
c            WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
c     ENDIF
      ENDIF
         
      
c      ANS = ANS /DBLE(IDEN(IPROC))
c     now color and spin sum is returned
c
      return
      END
       
       
      subroutine US_DCGGH(pbar,qbar,ph,nhel,fsign,gsign,matrix)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : u s -> d c g g h  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=  24,NEIGEN=  6) 
#include "genps.inc"
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=  36, NCOLOR=   6) 
      integer nexternal
      parameter(nexternal = 7)
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
c      REAL*8 P(0:3,NEXTERNAL)
      real*8 pbar(0:3,4),qbar(0:3,2),ph(0:3)
      real*8 matrix(0:NCOLOR),sum
      INTEGER NHEL(NEXTERNAL)
      integer fsign(4),gsign(2)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(6,NWAVEFUNCS)
c     local switch
      logical lintOff
      common/interference/ lintOff
      real*8 tfac(ncolor)
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
c      include "coupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,6  ) /    16,    0,   -2,    0,    2,    2/    
C               T[3,1,5,6]T[4,2]                                           
      DATA Denom(2  )/            1/                                       
      DATA (CF(i,2  ),i=1  ,6  ) /     0,   16,    0,    2,    0,    0/    
C               T[3,1,5]T[4,2,6]                                           
      DATA Denom(3  )/            1/                                       
      DATA (CF(i,3  ),i=1  ,6  ) /    -2,    0,   16,    0,    2,    2/    
C               T[3,1,6,5]T[4,2]                                           
      DATA Denom(4  )/            1/                                       
      DATA (CF(i,4  ),i=1  ,6  ) /     0,    2,    0,   16,    0,    0/    
C               T[3,1,6]T[4,2,5]                                           
      DATA Denom(5  )/            1/                                       
      DATA (CF(i,5  ),i=1  ,6  ) /     2,    0,    2,    0,   16,   -2/    
C               T[3,1]T[4,2,5,6]                                           
      DATA Denom(6  )/            1/                                       
      DATA (CF(i,6  ),i=1  ,6  ) /     2,    0,    2,    0,   -2,   16/    
C               T[3,1]T[4,2,6,5]                                           
C ----------
C BEGIN CODE
C ----------
c      CALL IXXXXX(P(0,1   ),ZERO ,NHEL(1   ),+1*IC(1   ),W(1,1   ))        
c      CALL IXXXXX(P(0,2   ),ZERO ,NHEL(2   ),+1*IC(2   ),W(1,2   ))        
c      CALL OXXXXX(P(0,3   ),ZERO ,NHEL(3   ),+1*IC(3   ),W(1,3   ))        
c      CALL OXXXXX(P(0,4   ),ZERO ,NHEL(4   ),+1*IC(4   ),W(1,4   ))        
c      CALL VXXXXX(P(0,5   ),ZERO ,NHEL(5   ),+1*IC(5   ),W(1,5   ))        
c      CALL VXXXXX(P(0,6   ),ZERO ,NHEL(6   ),+1*IC(6   ),W(1,6   ))        
c      CALL SXXXXX(P(0,7   ),+1*IC(7   ),W(1,7   ))                         
      CALL IXXXXX(Pbar(0,1),ZERO ,NHEL(1)*fsign(1),fsign(1),W(1,1))        
      CALL IXXXXX(Pbar(0,3),ZERO ,NHEL(3)*fsign(3),fsign(3),W(1,2))        
      CALL OXXXXX(Pbar(0,2),ZERO ,NHEL(2)*fsign(2),fsign(2),W(1,3))        
      CALL OXXXXX(Pbar(0,4),ZERO ,NHEL(4)*fsign(4),fsign(4),W(1,4))        
      CALL VXXXXX(qbar(0,1),ZERO ,NHEL(5),gsign(1),W(1,5))        
      CALL VXXXXX(qbar(0,2),ZERO ,NHEL(6),gsign(2),W(1,6))        
      CALL SXXXXX(Ph,+1,W(1,7))         
c
      CALL JIOXXX(W(1,2   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,8   ))    
      CALL FVIXXX(W(1,1   ),W(1,6   ),GG ,ZERO    ,ZERO    ,W(1,9   ))     
      CALL JVSXXX(W(1,8   ),W(1,7   ),GWWH ,WMASS   ,WWIDTH  ,W(1,         
     &     10  ))                                                          
      CALL FVOXXX(W(1,3   ),W(1,10  ),GWF ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL IOVXXX(W(1,9   ),W(1,11  ),W(1,5   ),GG ,AMP(1   ))             
      CALL FVIXXX(W(1,1   ),W(1,5   ),GG ,ZERO    ,ZERO    ,W(1,12  ))     
      CALL FVIXXX(W(1,2   ),W(1,6   ),GG ,ZERO    ,ZERO    ,W(1,13  ))     
      CALL JIOXXX(W(1,12  ),W(1,3   ),GWF ,WMASS   ,WWIDTH  ,W(1,14  ))    
      CALL JIOXXX(W(1,13  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,15  ))    
      CALL VVSXXX(W(1,14  ),W(1,15  ),W(1,7   ),GWWH ,AMP(2   ))           
      CALL FVOXXX(W(1,3   ),W(1,6   ),GG ,ZERO    ,ZERO    ,W(1,16  ))     
      CALL IOVXXX(W(1,12  ),W(1,16  ),W(1,10  ),GWF ,AMP(3   ))            
      CALL FVOXXX(W(1,4   ),W(1,6   ),GG ,ZERO    ,ZERO    ,W(1,17  ))     
      CALL JIOXXX(W(1,2   ),W(1,17  ),GWF ,WMASS   ,WWIDTH  ,W(1,18  ))    
      CALL VVSXXX(W(1,14  ),W(1,18  ),W(1,7   ),GWWH ,AMP(4   ))           
      CALL JVVXXX(W(1,6   ),W(1,5   ),G ,ZERO    ,ZERO    ,W(1,19  ))      
      CALL IOVXXX(W(1,1   ),W(1,11  ),W(1,19  ),GG ,AMP(5   ))             
      CALL FVIXXX(W(1,12  ),W(1,6   ),GG ,ZERO    ,ZERO    ,W(1,20  ))     
      CALL IOVXXX(W(1,20  ),W(1,3   ),W(1,10  ),GWF ,AMP(6   ))            
      CALL FVIXXX(W(1,2   ),W(1,5   ),GG ,ZERO    ,ZERO    ,W(1,21  ))     
      CALL JIOXXX(W(1,9   ),W(1,3   ),GWF ,WMASS   ,WWIDTH  ,W(1,22  ))    
      CALL JIOXXX(W(1,21  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,23  ))    
      CALL VVSXXX(W(1,22  ),W(1,23  ),W(1,7   ),GWWH ,AMP(7   ))           
      CALL JIOXXX(W(1,1   ),W(1,3   ),GWF ,WMASS   ,WWIDTH  ,W(1,24  ))    
      CALL JVSXXX(W(1,24  ),W(1,7   ),GWWH ,WMASS   ,WWIDTH  ,W(1,         
     &     25  ))                                                          
      CALL FVOXXX(W(1,4   ),W(1,25  ),GWF ,ZERO    ,ZERO    ,W(1,26  ))    
      CALL IOVXXX(W(1,13  ),W(1,26  ),W(1,5   ),GG ,AMP(8   ))             
      CALL JIOXXX(W(1,1   ),W(1,16  ),GWF ,WMASS   ,WWIDTH  ,W(1,27  ))    
      CALL VVSXXX(W(1,27  ),W(1,23  ),W(1,7   ),GWWH ,AMP(9   ))           
      CALL IOVXXX(W(1,21  ),W(1,17  ),W(1,25  ),GWF ,AMP(10  ))            
      CALL IOVXXX(W(1,2   ),W(1,26  ),W(1,19  ),GG ,AMP(11  ))             
      CALL FVIXXX(W(1,21  ),W(1,6   ),GG ,ZERO    ,ZERO    ,W(1,28  ))     
      CALL IOVXXX(W(1,28  ),W(1,4   ),W(1,25  ),GWF ,AMP(12  ))            
      CALL FVOXXX(W(1,3   ),W(1,5   ),GG ,ZERO    ,ZERO    ,W(1,29  ))     
      CALL IOVXXX(W(1,9   ),W(1,29  ),W(1,10  ),GWF ,AMP(13  ))            
      CALL JIOXXX(W(1,1   ),W(1,29  ),GWF ,WMASS   ,WWIDTH  ,W(1,30  ))    
      CALL VVSXXX(W(1,30  ),W(1,15  ),W(1,7   ),GWWH ,AMP(14  ))           
      CALL FVIXXX(W(1,1   ),W(1,10  ),GWF ,ZERO    ,ZERO    ,W(1,31  ))    
      CALL IOVXXX(W(1,31  ),W(1,16  ),W(1,5   ),GG ,AMP(15  ))             
      CALL VVSXXX(W(1,30  ),W(1,18  ),W(1,7   ),GWWH ,AMP(16  ))           
      CALL IOVXXX(W(1,31  ),W(1,3   ),W(1,19  ),GG ,AMP(17  ))             
      CALL FVOXXX(W(1,29  ),W(1,6   ),GG ,ZERO    ,ZERO    ,W(1,32  ))     
      CALL IOVXXX(W(1,1   ),W(1,32  ),W(1,10  ),GWF ,AMP(18  ))            
      CALL FVOXXX(W(1,4   ),W(1,5   ),GG ,ZERO    ,ZERO    ,W(1,33  ))     
      CALL JIOXXX(W(1,2   ),W(1,33  ),GWF ,WMASS   ,WWIDTH  ,W(1,34  ))    
      CALL VVSXXX(W(1,22  ),W(1,34  ),W(1,7   ),GWWH ,AMP(19  ))           
      CALL IOVXXX(W(1,13  ),W(1,33  ),W(1,25  ),GWF ,AMP(20  ))            
      CALL VVSXXX(W(1,27  ),W(1,34  ),W(1,7   ),GWWH ,AMP(21  ))           
      CALL FVIXXX(W(1,2   ),W(1,25  ),GWF ,ZERO    ,ZERO    ,W(1,35  ))    
      CALL IOVXXX(W(1,35  ),W(1,17  ),W(1,5   ),GG ,AMP(22  ))             
      CALL IOVXXX(W(1,35  ),W(1,4   ),W(1,19  ),GG ,AMP(23  ))             
      CALL FVOXXX(W(1,33  ),W(1,6   ),GG ,ZERO    ,ZERO    ,W(1,36  ))     
      CALL IOVXXX(W(1,2   ),W(1,36  ),W(1,25  ),GWF ,AMP(24  ))            
      JAMP(   1) = -AMP(   1)+AMP(   5)-AMP(  13)+AMP(  17)-AMP(  18)
      JAMP(   2) = -AMP(   2)-AMP(   4)-AMP(  14)-AMP(  16)
      JAMP(   3) = -AMP(   3)-AMP(   5)-AMP(   6)-AMP(  15)-AMP(  17)
      JAMP(   4) = -AMP(   7)-AMP(   9)-AMP(  19)-AMP(  21)
      JAMP(   5) = -AMP(   8)+AMP(  11)-AMP(  20)+AMP(  23)-AMP(  24)
      JAMP(   6) = -AMP(  10)-AMP(  11)-AMP(  12)-AMP(  22)-AMP(  23)
c
      if(lintOff) then
         cf(2,4) = 0d0
         cf(4,2) = 0d0
         cf(5,1) = 0d0
         cf(1,5) = 0d0
         cf(6,1) = 0d0
         cf(1,6) = 0d0
         cf(5,3) = 0d0
         cf(3,5) = 0d0
         cf(6,3) = 0d0
         cf(3,6) = 0d0
      endif
c     eliminate graphs with V-> q qbar
c     for gsign(1 or 2) = -1
      call vetographs(fsign,gsign,tfac)
c
      matrix(0) = 0.D0 
      sum = 0.D0
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)*tfac(J)
          ENDDO
          matrix(0) = matrix(0) + ZTEMP*DCONJG(JAMP(I))/DENOM(I)*tfac(I) 
c          sum       = sum + JAMP(I)*DCONJG(JAMP(I))*tfac(I)
          sum       = sum + (DBLE(JAMP(I))**2 + DIMAG(JAMP(I))**2)*tfac(I)
      ENDDO
      
      do I=1,NCOLOR
         matrix(I) = matrix(0) * (DBLE(JAMP(I))**2 + DIMAG(JAMP(I))**2) 
     $        * tfac(I)         !/sum
         if(abs(sum).gt.0.D0) matrix(I)=matrix(I)/sum
      enddo
c    
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END
c
c
      SUBROUTINE SDC_USGGH(pbar,fsign,qbar,gsign,ph,ANS)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : d c -> u s g g h  
C              p1 p3 p2 p4 q1 q2 ph
C Crossing   1 is d c -> u s g g h  
      IMPLICIT NONE
C  
C CONSTANTS
C  
#include "genps.inc"
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB=  64, NCROSS=  1)
      integer nexternal
      parameter (nexternal = 7)
c     sign factors
      integer fsign(4),gsign(2)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
c      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
      real*8 ans(0:6)
      real*8 pbar(0:3,4),qbar(0:3,2),ph(0:3)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T(0:6)
      INTEGER IHEL,IDEN(NCROSS)
      INTEGER IPROC, ICOL
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtry, xrej
      INTEGER idum, ngood, igood(ncomb), jhel, j
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
     
      character*79         hel_buff
      common/to_helicity/  hel_buff

      integer          isum_hel
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,1/
      SAVE igood, IDUM, jhel
      DATA NGRAPHS /   24/          
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1,7) /-1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1,7) /-1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,   3),IHEL=1,7) /-1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1,7) /-1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,   5),IHEL=1,7) /-1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1,7) /-1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,   7),IHEL=1,7) /-1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1,7) /-1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,   9),IHEL=1,7) /-1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1,7) /-1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  11),IHEL=1,7) /-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1,7) /-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  13),IHEL=1,7) /-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1,7) /-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  15),IHEL=1,7) /-1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1,7) /-1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  17),IHEL=1,7) /-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  18),IHEL=1,7) /-1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  19),IHEL=1,7) /-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1,7) /-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  21),IHEL=1,7) /-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  22),IHEL=1,7) /-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  23),IHEL=1,7) /-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  24),IHEL=1,7) /-1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  25),IHEL=1,7) /-1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  26),IHEL=1,7) /-1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  27),IHEL=1,7) /-1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  28),IHEL=1,7) /-1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  29),IHEL=1,7) /-1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  30),IHEL=1,7) /-1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  31),IHEL=1,7) /-1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  32),IHEL=1,7) /-1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  33),IHEL=1,7) / 1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  34),IHEL=1,7) / 1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  35),IHEL=1,7) / 1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  36),IHEL=1,7) / 1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  37),IHEL=1,7) / 1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  38),IHEL=1,7) / 1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  39),IHEL=1,7) / 1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  40),IHEL=1,7) / 1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  41),IHEL=1,7) / 1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  42),IHEL=1,7) / 1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  43),IHEL=1,7) / 1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  44),IHEL=1,7) / 1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  45),IHEL=1,7) / 1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  46),IHEL=1,7) / 1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  47),IHEL=1,7) / 1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  48),IHEL=1,7) / 1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  49),IHEL=1,7) / 1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  50),IHEL=1,7) / 1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  51),IHEL=1,7) / 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  52),IHEL=1,7) / 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  53),IHEL=1,7) / 1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  54),IHEL=1,7) / 1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  55),IHEL=1,7) / 1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  56),IHEL=1,7) / 1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  57),IHEL=1,7) / 1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  58),IHEL=1,7) / 1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  59),IHEL=1,7) / 1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  60),IHEL=1,7) / 1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  61),IHEL=1,7) / 1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  62),IHEL=1,7) / 1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  63),IHEL=1,7) / 1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  64),IHEL=1,7) / 1, 1, 1, 1, 1, 1,-1/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  72/
C ----------
C BEGIN CODE
C ----------
      NTRY=NTRY+1
      IPROC=1
     
      do ICOL=0,6
         ANS(ICOL) = 0D0
      enddo
      
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
          DO IHEL=1,NCOMB
              IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
                 call DC_USGGH(pbar,qbar,ph,nhel(1,ihel),fsign,gsign,T)
                 do ICOL=0,6
                    ANS(ICOL) = ANS(ICOL) + T(ICOL)
                 enddo
                  IF (T(0) .GT. 0D0 .AND. .NOT. GOODHEL(IHEL,IPROC)) THEN
                      GOODHEL(IHEL,IPROC)=.TRUE.
                      NGOOD = NGOOD +1
                      IGOOD(NGOOD) = IHEL
C                WRITE(*,*) ngood,IHEL,T
                  ENDIF
              ENDIF
          ENDDO
          JHEL = 1
          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE              !RANDOM HELICITY
          DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
              call DC_USGGH(pbar,qbar,ph,nhel(1,ihel),fsign,gsign,T)
              do ICOL=0,6
              ANS(ICOL) = ANS(ICOL) +T(ICOL)*HWGT
              enddo
          ENDDO
c          IF (ISUM_HEL .EQ. 1) THEN
c              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
c          ENDIF
      ENDIF
      
c      ANS = ANS /DBLE(IDEN(IPROC))
c     now color and spin sum is returned
      return
      END
       
       
      subroutine DC_USGGH(pbar,qbar,ph,nhel,fsign,gsign,matrix)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : d c -> u s g g h  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=  24,NEIGEN=  6) 
#include "genps.inc"
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=  36, NCOLOR=   6) 
      integer nexternal
      parameter(nexternal = 7)
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
c      REAL*8 P(0:3,NEXTERNAL)
      real*8 pbar(0:3,4),qbar(0:3,2),ph(0:3)
      real*8 matrix(0:NCOLOR),sum
      INTEGER NHEL(NEXTERNAL)
      integer fsign(4),gsign(2)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(6,NWAVEFUNCS)
c     local switch
      logical lintOff
      common/interference/ lintOff
      real*8 tfac(ncolor)
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
c      include "coupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,6  ) /    16,    0,   -2,    0,    2,    2/    
C               T[3,1,5,6]T[4,2]                                           
      DATA Denom(2  )/            1/                                       
      DATA (CF(i,2  ),i=1  ,6  ) /     0,   16,    0,    2,    0,    0/    
C               T[3,1,5]T[4,2,6]                                           
      DATA Denom(3  )/            1/                                       
      DATA (CF(i,3  ),i=1  ,6  ) /    -2,    0,   16,    0,    2,    2/    
C               T[3,1,6,5]T[4,2]                                           
      DATA Denom(4  )/            1/                                       
      DATA (CF(i,4  ),i=1  ,6  ) /     0,    2,    0,   16,    0,    0/    
C               T[3,1,6]T[4,2,5]                                           
      DATA Denom(5  )/            1/                                       
      DATA (CF(i,5  ),i=1  ,6  ) /     2,    0,    2,    0,   16,   -2/    
C               T[3,1]T[4,2,5,6]                                           
      DATA Denom(6  )/            1/                                       
      DATA (CF(i,6  ),i=1  ,6  ) /     2,    0,    2,    0,   -2,   16/    
C               T[3,1]T[4,2,6,5]                                           
C ----------
C BEGIN CODE
C ----------
c      CALL IXXXXX(P(0,1   ),ZERO ,NHEL(1   ),+1*IC(1   ),W(1,1   ))        
c      CALL IXXXXX(P(0,2   ),ZERO ,NHEL(2   ),+1*IC(2   ),W(1,2   ))        
c      CALL OXXXXX(P(0,3   ),ZERO ,NHEL(3   ),+1*IC(3   ),W(1,3   ))        
c      CALL OXXXXX(P(0,4   ),ZERO ,NHEL(4   ),+1*IC(4   ),W(1,4   ))        
c      CALL VXXXXX(P(0,5   ),ZERO ,NHEL(5   ),+1*IC(5   ),W(1,5   ))        
c      CALL VXXXXX(P(0,6   ),ZERO ,NHEL(6   ),+1*IC(6   ),W(1,6   ))        
c      CALL SXXXXX(P(0,7   ),+1*IC(7   ),W(1,7   ))  
      CALL IXXXXX(Pbar(0,1),ZERO ,NHEL(1)*fsign(1),fsign(1),W(1,1))        
      CALL IXXXXX(Pbar(0,3),ZERO ,NHEL(3)*fsign(3),fsign(3),W(1,2))        
      CALL OXXXXX(Pbar(0,2),ZERO ,NHEL(2)*fsign(2),fsign(2),W(1,3))        
      CALL OXXXXX(Pbar(0,4),ZERO ,NHEL(4)*fsign(4),fsign(4),W(1,4))        
      CALL VXXXXX(qbar(0,1),ZERO ,NHEL(5),gsign(1),W(1,5))        
      CALL VXXXXX(qbar(0,2),ZERO ,NHEL(6),gsign(2),W(1,6))        
      CALL SXXXXX(ph,+1,W(1,7))  
c                       
      CALL JIOXXX(W(1,2   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,8   ))    
      CALL FVIXXX(W(1,1   ),W(1,6   ),GG ,ZERO    ,ZERO    ,W(1,9   ))     
      CALL JVSXXX(W(1,8   ),W(1,7   ),GWWH ,WMASS   ,WWIDTH  ,W(1,         
     &     10  ))                                                          
      CALL FVOXXX(W(1,3   ),W(1,10  ),GWF ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL IOVXXX(W(1,9   ),W(1,11  ),W(1,5   ),GG ,AMP(1   ))             
      CALL FVIXXX(W(1,1   ),W(1,5   ),GG ,ZERO    ,ZERO    ,W(1,12  ))     
      CALL FVIXXX(W(1,2   ),W(1,6   ),GG ,ZERO    ,ZERO    ,W(1,13  ))     
      CALL JIOXXX(W(1,12  ),W(1,3   ),GWF ,WMASS   ,WWIDTH  ,W(1,14  ))    
      CALL JIOXXX(W(1,13  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,15  ))    
      CALL VVSXXX(W(1,15  ),W(1,14  ),W(1,7   ),GWWH ,AMP(2   ))           
      CALL FVOXXX(W(1,3   ),W(1,6   ),GG ,ZERO    ,ZERO    ,W(1,16  ))     
      CALL IOVXXX(W(1,12  ),W(1,16  ),W(1,10  ),GWF ,AMP(3   ))            
      CALL FVOXXX(W(1,4   ),W(1,6   ),GG ,ZERO    ,ZERO    ,W(1,17  ))     
      CALL JIOXXX(W(1,2   ),W(1,17  ),GWF ,WMASS   ,WWIDTH  ,W(1,18  ))    
      CALL VVSXXX(W(1,18  ),W(1,14  ),W(1,7   ),GWWH ,AMP(4   ))           
      CALL JVVXXX(W(1,6   ),W(1,5   ),G ,ZERO    ,ZERO    ,W(1,19  ))      
      CALL IOVXXX(W(1,1   ),W(1,11  ),W(1,19  ),GG ,AMP(5   ))             
      CALL FVIXXX(W(1,12  ),W(1,6   ),GG ,ZERO    ,ZERO    ,W(1,20  ))     
      CALL IOVXXX(W(1,20  ),W(1,3   ),W(1,10  ),GWF ,AMP(6   ))            
      CALL FVIXXX(W(1,2   ),W(1,5   ),GG ,ZERO    ,ZERO    ,W(1,21  ))     
      CALL JIOXXX(W(1,9   ),W(1,3   ),GWF ,WMASS   ,WWIDTH  ,W(1,22  ))    
      CALL JIOXXX(W(1,21  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,23  ))    
      CALL VVSXXX(W(1,23  ),W(1,22  ),W(1,7   ),GWWH ,AMP(7   ))           
      CALL JIOXXX(W(1,1   ),W(1,3   ),GWF ,WMASS   ,WWIDTH  ,W(1,24  ))    
      CALL JVSXXX(W(1,24  ),W(1,7   ),GWWH ,WMASS   ,WWIDTH  ,W(1,         
     &     25  ))                                                          
      CALL FVOXXX(W(1,4   ),W(1,25  ),GWF ,ZERO    ,ZERO    ,W(1,26  ))    
      CALL IOVXXX(W(1,13  ),W(1,26  ),W(1,5   ),GG ,AMP(8   ))             
      CALL JIOXXX(W(1,1   ),W(1,16  ),GWF ,WMASS   ,WWIDTH  ,W(1,27  ))    
      CALL VVSXXX(W(1,23  ),W(1,27  ),W(1,7   ),GWWH ,AMP(9   ))           
      CALL IOVXXX(W(1,21  ),W(1,17  ),W(1,25  ),GWF ,AMP(10  ))            
      CALL IOVXXX(W(1,2   ),W(1,26  ),W(1,19  ),GG ,AMP(11  ))             
      CALL FVIXXX(W(1,21  ),W(1,6   ),GG ,ZERO    ,ZERO    ,W(1,28  ))     
      CALL IOVXXX(W(1,28  ),W(1,4   ),W(1,25  ),GWF ,AMP(12  ))            
      CALL FVOXXX(W(1,3   ),W(1,5   ),GG ,ZERO    ,ZERO    ,W(1,29  ))     
      CALL IOVXXX(W(1,9   ),W(1,29  ),W(1,10  ),GWF ,AMP(13  ))            
      CALL JIOXXX(W(1,1   ),W(1,29  ),GWF ,WMASS   ,WWIDTH  ,W(1,30  ))    
      CALL VVSXXX(W(1,15  ),W(1,30  ),W(1,7   ),GWWH ,AMP(14  ))           
      CALL FVIXXX(W(1,1   ),W(1,10  ),GWF ,ZERO    ,ZERO    ,W(1,31  ))    
      CALL IOVXXX(W(1,31  ),W(1,16  ),W(1,5   ),GG ,AMP(15  ))             
      CALL VVSXXX(W(1,18  ),W(1,30  ),W(1,7   ),GWWH ,AMP(16  ))           
      CALL IOVXXX(W(1,31  ),W(1,3   ),W(1,19  ),GG ,AMP(17  ))             
      CALL FVOXXX(W(1,29  ),W(1,6   ),GG ,ZERO    ,ZERO    ,W(1,32  ))     
      CALL IOVXXX(W(1,1   ),W(1,32  ),W(1,10  ),GWF ,AMP(18  ))            
      CALL FVOXXX(W(1,4   ),W(1,5   ),GG ,ZERO    ,ZERO    ,W(1,33  ))     
      CALL JIOXXX(W(1,2   ),W(1,33  ),GWF ,WMASS   ,WWIDTH  ,W(1,34  ))    
      CALL VVSXXX(W(1,34  ),W(1,22  ),W(1,7   ),GWWH ,AMP(19  ))           
      CALL IOVXXX(W(1,13  ),W(1,33  ),W(1,25  ),GWF ,AMP(20  ))            
      CALL VVSXXX(W(1,34  ),W(1,27  ),W(1,7   ),GWWH ,AMP(21  ))           
      CALL FVIXXX(W(1,2   ),W(1,25  ),GWF ,ZERO    ,ZERO    ,W(1,35  ))    
      CALL IOVXXX(W(1,35  ),W(1,17  ),W(1,5   ),GG ,AMP(22  ))             
      CALL IOVXXX(W(1,35  ),W(1,4   ),W(1,19  ),GG ,AMP(23  ))             
      CALL FVOXXX(W(1,33  ),W(1,6   ),GG ,ZERO    ,ZERO    ,W(1,36  ))     
      CALL IOVXXX(W(1,2   ),W(1,36  ),W(1,25  ),GWF ,AMP(24  ))            
      JAMP(   1) = -AMP(   1)+AMP(   5)-AMP(  13)+AMP(  17)-AMP(  18)
      JAMP(   2) = -AMP(   2)-AMP(   4)-AMP(  14)-AMP(  16)
      JAMP(   3) = -AMP(   3)-AMP(   5)-AMP(   6)-AMP(  15)-AMP(  17)
      JAMP(   4) = -AMP(   7)-AMP(   9)-AMP(  19)-AMP(  21)
      JAMP(   5) = -AMP(   8)+AMP(  11)-AMP(  20)+AMP(  23)-AMP(  24)
      JAMP(   6) = -AMP(  10)-AMP(  11)-AMP(  12)-AMP(  22)-AMP(  23)
c
      if(lintOff) then
         cf(2,4) = 0d0
         cf(4,2) = 0d0
         cf(5,1) = 0d0
         cf(1,5) = 0d0
         cf(6,1) = 0d0
         cf(1,6) = 0d0
         cf(5,3) = 0d0
         cf(3,5) = 0d0
         cf(6,3) = 0d0
         cf(3,6) = 0d0
      endif
c     eliminate graphs with V-> q qbar
c     for gsign(1 or 2) = -1
      call vetographs(fsign,gsign,tfac)
c
      matrix(0) = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)*tfac(J)
          ENDDO
          matrix(0) = matrix(0) + ZTEMP*DCONJG(JAMP(I))/DENOM(I)*tfac(I)  
c          sum       = sum + JAMP(I)*DCONJG(JAMP(I))*tfac(I)
          sum       = sum + (DBLE(JAMP(I))**2 + DIMAG(JAMP(I))**2)*tfac(I)
      ENDDO 

      do I=1,NCOLOR
c         matrix(I) = matrix(0) * JAMP(I)*DCONJG(JAMP(I)) * tfac(I)/sum
         matrix(I) = matrix(0) * (DBLE(JAMP(I))**2 + DIMAG(JAMP(I))**2) 
     $        * tfac(I)         !/sum
         if(abs(sum).gt.0.D0) matrix(I)=matrix(I)/sum
      enddo
     
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END
c
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c     this subroutine computes tfac(ncolor) 
c     tfac is used to eliminate gauge graphs with V-> q qbar.
c
      subroutine vetographs(fsign,gsign,tfac)
      implicit none 
      integer fsign(4),gsign(2),i
      real*8 tfac(6)
c
c   by default tfac(i) = one    
      do i=1,6
         tfac(i) = 1d0
      enddo
c
      if((gsign(1).eq.-1).and.(gsign(2).eq.1)) then !one gluon
         if((fsign(3).eq.fsign(4)).and.
     $        (fsign(1).eq.-fsign(2))) then !initial gluon on 21 line
            tfac(5) = 0
            tfac(6) = 0
            tfac(4) = 0
         elseif((fsign(3).eq.-fsign(4)).and.
     $           (fsign(1).eq.fsign(2))) then !initial gluon on 43 line
            tfac(1) = 0
            tfac(2) = 0
            tfac(3) = 0
         endif
         
      elseif((gsign(1).eq.1).and.(gsign(2).eq.-1)) then !one gluon
         if((fsign(3).eq.fsign(4)).and.
     $        (fsign(1).eq.-fsign(2))) then !initial gluon on 21 line    
             tfac(5) = 0
             tfac(6) = 0
             tfac(2) = 0
          elseif((fsign(3).eq.-fsign(4)).and.
     $            (fsign(1).eq.fsign(2))) then !initial gluon on 43 line
             tfac(1) = 0
             tfac(4) = 0
             tfac(3) = 0
          endif
      elseif((gsign(1).eq.-1).and.(gsign(2).eq.-1)) then !two gluons
         if((fsign(3).eq.-fsign(4)).and. !gluon qbar(mu,2) on 43 line
     $        (fsign(1).eq.-fsign(2))) then !gluon qbar(mu,1) on 21 line
            tfac(1) = 0
            tfac(3) = 0
            tfac(5) = 0
            tfac(6) = 0
            tfac(4) = 0
         else
            print*,'error in vetograph'
            stop
         endif
      endif
      return
      end
