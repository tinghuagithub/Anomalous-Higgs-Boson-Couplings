c ------------------------------------------------------------

      SUBROUTINE WMTOWA(v,N,h,wma,NW)

      IMPLICIT NONE

      DOUBLE PRECISION P(0:3,2:5), v(0:3,6)
      COMPLEX*16 wma(0:5)
      INTEGER lsign(2:5,2),ll,mu,h,N
      INTEGER NW ! = 0: all diagrams, = 1: no non resonant diagrams

      !possible lepton helicities: 
      DATA (lsign(ll,1),ll=2,5) / -1, -1, -1, -1/ !h=1
      DATA (lsign(ll,2),ll=2,5) / -1, -1, +1, +1/ !h=2

      do mu = 0,3
         P(mu,2) = v(mu,3)
         P(mu,3) = v(mu,4)
         P(mu,4) = v(mu,5)
         P(mu,5) = v(mu,6)
      enddo

      call WMTOWA1(P,N,lsign(2,h),wma,NW)

      ! helicity combi nr.h is selected

      end

c ------------------------------------------------------------

      SUBROUTINE WMTOWA1(P,N,lsign,wma,NW)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : w- -> vm~ mu- a  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   2) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=   6) 
      DOUBLE PRECISION     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      DOUBLE PRECISION P(0:3,2:5), Q(0:3)
      INTEGER N
      COMPLEX*16 wma(0:5)
      INTEGER lsign(2:5)
      INTEGER NW ! = 0: all diagrams, = 1: no non resonant diagrams

C  
C LOCAL VARIABLES 
C  
      INTEGER I, mu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)

c  lepton spinors and W+-, Z/A polarization vectors
#include "tensor.inc"

      LOGICAL lswitch
      PARAMETER (lswitch=.true.)

C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"                       
C                                                                          
C ----------
C BEGIN CODE
C ----------
      if (lswitch) then      ! read in lepton an W states from common block
         do i=1,6
            w(i,2)  = wvm(i,N)
            w(i,3)  = wmu(i,N)
            w(i,4)  = atau(i,N)
         enddo
      endif

      do mu = 0,3
         q(mu) = p(mu,2)+p(mu,3)+p(mu,4)+p(mu,5)
      enddo

      if (.not.lswitch) then     
         CALL OXXXXX(P(0,2   ),ZERO ,  lsign(2),+1, W(1,2   )) ! mu-       
         CALL IXXXXX(P(0,3   ),ZERO , -lsign(3),-1, W(1,3   )) ! vm~       
         CALL VXXXXX(P(0,4)+P(0,5),ZERO ,  +1,  +1, W(1,4   )) ! A
         print*," mu  ",(wmu(i,N)/w(i,2),i=1,6)
         print*," vm  ",(wvm(i,N)/w(i,3),i=1,6)
         print*," A   ",(atau(i,N)/w(i,4),i=1,6)
      endif
      do mu = 0,3
      CALL TRIBOSVCARTX(Q(0),WMASS ,WWIDTH, MU,-1,W(1,1   ))
      CALL JIOXXX(W(1,2   ),W(1,3   ),GWF ,WMASS   ,WWIDTH  ,W(1,5   ))    
      CALL VVVXXX(W(1,5   ),W(1,1   ),W(1,4   ),GWWA ,AMP(1   ))           
      CALL FVIXXX(W(1,2   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL IOVXXX(W(1,6   ),W(1,3   ),W(1,4   ),GAL ,AMP(2   ))            
      wma(mu) = +AMP(   1)+AMP(   2)
      enddo
      wma(4) = dcmplx(q(0),q(3))
      wma(5) = dcmplx(q(1),q(2))
c
      return
      END


c----------------------------------------------------------------------

      SUBROUTINE WPTOWA(v,N,h,wpa,NW)

      IMPLICIT NONE

      DOUBLE PRECISION v(0:3,6)
      DOUBLE PRECISION P(0:3,2:5)
      
      COMPLEX*16 wpa(0:5)
      INTEGER lsign(2:5,2),ll,mu,h,N
      INTEGER NW ! = 0: all diagrams, = 1: no non resonant diagrams

      ! possible lepton helicities:
      DATA (lsign(ll,1),ll=2,5) / -1, -1, -1, -1/  !h=1
      DATA (lsign(ll,2),ll=2,5) / -1, -1,  1,  1/  !h=2

      do mu = 0,3
         P(mu,2) = v(mu,1)
         P(mu,3) = v(mu,2)
         P(mu,4) = v(mu,5)
         P(mu,5) = v(mu,6)
      enddo

      call WPTOWA1(P,N,lsign(2,h),wpa,NW)

      ! helicity combi nr.h is selected

      end

c ------------------------------------------------------------

      SUBROUTINE WPTOWA1(P,N,lsign,wpa,NW)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : w+ -> ve e+ a  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   2)
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=   6)
      DOUBLE PRECISION     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      DOUBLE PRECISION P(0:3,2:5), Q(0:3)
      INTEGER N
      COMPLEX*16 wpa(0:5)
      INTEGER lsign(2:5)
      integer NW ! = 0: all diagrams, = 1: no non resonant diagrams
C  
C LOCAL VARIABLES 
C  
      INTEGER I, mu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)

c  lepton spinors and W+-, Z/A polarization vectors
#include "tensor.inc"

  
C GLOBAL VARIABLES
  
#include "VBFNLO/utilities/coupl.inc"       

      logical lswitch
      parameter (lswitch=.true.)
                       
C                                                                          
C ----------
C BEGIN CODE
C ----------
      if (lswitch) then      ! read in lepton an W states from common block
         do i=1,6
            w(i,2)  = wve(i,N)
            w(i,3)  = wep(i,N)
            w(i,4)  = atau(i,N)
         enddo
      endif

      do mu = 0,3
         q(mu) = p(mu,2)+p(mu,3)+p(mu,4)+p(mu,5)
      enddo

      if (.not.lswitch) then     
         CALL OXXXXX(P(0,2   ),ZERO ,  lsign(2),+1,W(1,2   )) ! ve       
         CALL IXXXXX(P(0,3   ),ZERO , -lsign(3),-1,W(1,3   )) ! e+       
         CALL VXXXXX(P(0,4)+P(0,5),ZERO ,  +1,  +1, W(1,4   )) ! A
         print*,' ve  ',(wve(i,N)/w(i,2),i=1,6)
         print*,' e+  ',(wep(i,N)/w(i,3),i=1,6)
         print*,' A  ',(atau(i,N)/w(i,4),i=1,6)
      endif
      do mu = 0,3
      CALL TRIBOSVCARTX(Q(0),WMASS ,WWIDTH, MU,-1,W(1,1   ))
      CALL JIOXXX(W(1,3   ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,5   ))    
      CALL VVVXXX(W(1,1   ),W(1,5   ),W(1,4   ),GWWA ,AMP(1   ))           
      CALL FVOXXX(W(1,2   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL IOVXXX(W(1,3   ),W(1,6   ),W(1,4   ),GAL ,AMP(2   ))            
c      wpa(mu) = -AMP(   1)-AMP(   2)
      wpa(mu) = AMP(   1)+AMP(   2)
      enddo
      wpa(4) = dcmplx(q(0),q(3))
      wpa(5) = dcmplx(q(1),q(2))
c
      return
      END
