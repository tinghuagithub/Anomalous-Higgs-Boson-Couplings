c
c this is the modified version of WWwtowww.F / WWwtoww.F that includes
c anomalous couplings and semileptonic decays
c


C-------------------------------------------------------------------------------


      SUBROUTINE WWW_WPTOWWW_had(P,N,H,WPWWW,NW)
c Leptonic tensor for process 
c     W+ --> W+ W- W+ --> ve e+ mu- vm~ vt ta+
c computed for fixed helicity set h

      IMPLICIT NONE

C ARGUMENTS

      DOUBLE PRECISION P(0:3,2:7)
      INTEGER N,H,NW
      DOUBLE COMPLEX WPWWW(0:5)
C
C LOCAL VARIABLES
C

      INTEGER LSIGN(2:7,2),L
      DATA(LSIGN(L,1),L=2,7)/-1,-1,-1,-1,-1,-1/	! H=1
      DATA(LSIGN(L,2),L=2,7)/-1,-1,-1,-1,+1,+1/	! H=2

      CALL WWW_WPTOWWW1_had(P,N,LSIGN(2,H),WPWWW(0),NW)    ! HELICITY COMBINATION #H IS SELECTED
							! ONLY HELICITY SET H=1 NEEDED HERE
      END


      SUBROUTINE WWW_WPTOWWW1_had(P,N,LSIGN,WPWWW,NW)
C  
C Generated by MadGraph II, SLIGHTLY CHANGED
C RETURNS AMPLITUDE
C FOR PROCESS : w+ -> ve e+ mu- vm~ vt ta+
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=58)
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=97)
      DOUBLE PRECISION     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      DOUBLE PRECISION P(0:3,2:7)
      INTEGER N
      INTEGER LSIGN(2:7)
      DOUBLE COMPLEX WPWWW(0:5)
      INTEGER NW
C  
C LOCAL VARIABLES 
C  
      DOUBLE PRECISION Q(0:3)
      INTEGER I,MU
      DOUBLE COMPLEX AMP(NGRAPHS)
      DOUBLE COMPLEX W(18,NWAVEFUNCS)

      LOGICAL LSWITCH
      PARAMETER(LSWITCH =.true.)

!LEPTON SPINORS + POLARISATION VECTORS GENERATED IN M2S_QQWWW
#include "tensor.inc"

C
C GLOBAL VARIABLES
C
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/global.inc"
#include "VBFNLO/utilities/coupl_haddecay.inc"
#include "VBFNLO/utilities/process.inc"

C ------------------------------------------------------------------------------
C BEGIN CODE
C ------------------------------------------------------------------------------

      IF(LSWITCH) THEN                                    !READ IN LEPTON WF FROM COMMON BLOCK
         DO I=1,6
            W(I,2) = WVE1(I,N)
            W(I,3) = WEP1(I,N)
            W(I,4) = WMU1(I,N)
            W(I,5) = WVM1(I,N)
            W(I,6) = WVT(I,N)
            W(I,7) = WTP(I,N)
            W(I,8) = WP1(I,N)
            W(I,16)= W1M(I,N)
         ENDDO
      ENDIF

      DO MU=0,3
         Q(MU) = P(MU,2) + P(MU,3) + P(MU,4) + P(MU,5) + P(MU,6) + P(MU,7)
      ENDDO

      IF(.NOT.LSWITCH) THEN
         CALL OXXXXX(P(0,2   ),ZERO ,+1*LSIGN(2   ),+1,W(1,2   ))        
         CALL IXXXXX(P(0,3   ),ZERO ,-1*LSIGN(3   ),-1,W(1,3   ))        
         CALL OXXXXX(P(0,4   ),ZERO ,+1*LSIGN(4   ),+1,W(1,4   ))        
         CALL IXXXXX(P(0,5   ),ZERO ,-1*LSIGN(5   ),-1,W(1,5   ))        
         CALL OXXXXX(P(0,6   ),ZERO ,+1*LSIGN(6   ),+1,W(1,6   ))        
         CALL IXXXXX(P(0,7   ),LMASS,-1*LSIGN(7   ),-1,W(1,7   ))       
         CALL JIOXXX(W(1,3   ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,8   ))    
         CALL JIOXXX(W(1,5   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,16  ))    
      ENDIF

      DO MU=0,3
      CALL TRIPLEWVCARTX(Q(0),WMASS,WWIDTH,MU,-1,W(1,1))
      CALL FVOXXX(W(1,4   ),W(1,8   ),GWF ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL JIOXXX(W(1,5   ),W(1,9   ),GWM_ZUN ,ZMASS   ,ZWIDTH  ,W(1,10  ))    ! W-
      CALL FVOXXX(W(1,6   ),W(1,10  ),GZN ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL IOVXXX(W(1,7   ),W(1,11  ),W(1,1   ),GWF ,AMP(1   ))            
      CALL jwpzwm_anomal3(W(1,10  ),W(1,1   ),W(1,12 )) 
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,12  ),GWF ,AMP(2   ))            
      CALL FVIXXX(W(1,7   ),W(1,10  ),GZL ,LMASS   ,ZERO    ,W(1,13  ))    
      CALL IOVXXX(W(1,13  ),W(1,6   ),W(1,1   ),GWF ,AMP(3   ))            
      CALL FVOXXX(W(1,9   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL JIOXXX(W(1,5   ),W(1,14  ),GWF ,WMASS   ,WWIDTH  ,W(1,15  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,15  ),GWF ,AMP(4   ))            
      CALL FVIXXX(W(1,7   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,17  ))    
      CALL jzww_anomal3(W(1,16  ),W(1,8   ),W(1,18 ))   
      CALL IOVXXX(W(1,17  ),W(1,6   ),W(1,18  ),GZN ,AMP(5   ))            
      CALL jaww_anomal3(W(1,16  ),W(1,8   ),W(1,19 ))   
      CALL jwpawm_anomal3(W(1,19  ),W(1,1   ),W(1,20 )) 
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,20  ),GWF ,AMP(6   ))            
      CALL jwpzwm_anomal3(W(1,18  ),W(1,1   ),W(1,21 ))   
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,21  ),GWF ,AMP(7   ))            
      CALL jhww_anomal3(W(1,16  ),W(1,8   ),W(1,22 ))     
      CALL JIOXXX(W(1,7   ),W(1,6  ),GWF ,WMASS   ,WWIDTH  ,W(1,23  ))    
      CALL wwh_anomal3(W(1,1  ),W(1,23   ),W(1,22  ),AMP(8   ))
      CALL FVIXXX(W(1,7   ),W(1,16  ),GWF ,ZERO    ,ZERO    ,W(1,24  ))    
      CALL FVIXXX(W(1,24  ),W(1,8   ),GWF ,LMASS   ,ZERO    ,W(1,25  ))    
      CALL IOVXXX(W(1,25  ),W(1,6   ),W(1,1   ),GWF ,AMP(9   ))            
      CALL FVIXXX(W(1,7   ),W(1,19  ),GAL ,LMASS   ,ZERO    ,W(1,26  ))    
      CALL IOVXXX(W(1,26  ),W(1,6   ),W(1,1   ),GWF ,AMP(10  ))            
      CALL FVIXXX(W(1,7   ),W(1,18  ),GZL ,LMASS   ,ZERO    ,W(1,27  ))    
      CALL IOVXXX(W(1,27  ),W(1,6   ),W(1,1   ),GWF ,AMP(11  ))            
      CALL jzww_anomal3(W(1,1   ),W(1,8   ),W(1,29 ))                
      CALL FVIXXX(W(1,5   ),W(1,29  ),GWM_ZUN ,ZERO    ,ZERO    ,W(1,30  ))    ! W-
      CALL JIOXXX(W(1,30  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,31  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,31  ),GWF ,AMP(13  ))            
      CALL jaww_anomal3(W(1,1   ),W(1,8   ),W(1,32 ))              
      CALL FVOXXX(W(1,4   ),W(1,32  ),GWM_ADL ,ZERO    ,ZERO    ,W(1,33  ))    ! W-
      CALL JIOXXX(W(1,5   ),W(1,33  ),GWF ,WMASS   ,WWIDTH  ,W(1,34  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,34  ),GWF ,AMP(14  ))            
      CALL FVOXXX(W(1,4   ),W(1,29  ),GWM_ZDL ,ZERO    ,ZERO    ,W(1,35  ))    ! W-
      CALL JIOXXX(W(1,5   ),W(1,35  ),GWF ,WMASS   ,WWIDTH  ,W(1,36  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,36  ),GWF ,AMP(15  ))            
      CALL FVIXXX(W(1,17  ),W(1,8   ),GWF ,LMASS   ,ZERO    ,W(1,37  ))    
      CALL IOVXXX(W(1,37  ),W(1,6   ),W(1,16  ),GWF ,AMP(16  ))            
      CALL jwpawm_anomal3(W(1,32  ),W(1,16  ),W(1,38 ))      
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,38  ),GWF ,AMP(17  ))            
      CALL jwpzwm_anomal3(W(1,29  ),W(1,16  ),W(1,39 ))      
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,39  ),GWF ,AMP(18  ))            
      CALL jhww_anomal3(W(1,1   ),W(1,8   ),W(1,40 ))           
      CALL JIOXXX(W(1,7   ),W(1,6  ),GWF ,WMASS   ,WWIDTH  ,W(1,41  ))    
      CALL wwh_anomal3(W(1,16  ),W(1,41   ),W(1,40  ),AMP(19   ))
      CALL IOVXXX(W(1,24  ),W(1,6   ),W(1,29  ),GZN ,AMP(20  ))            
      CALL FVIXXX(W(1,7   ),W(1,32  ),GAL ,LMASS   ,ZERO    ,W(1,42  ))    
      CALL IOVXXX(W(1,42  ),W(1,6   ),W(1,16  ),GWF ,AMP(21  ))            
      CALL FVIXXX(W(1,7   ),W(1,29  ),GZL ,LMASS   ,ZERO    ,W(1,43  ))    
      CALL IOVXXX(W(1,43  ),W(1,6   ),W(1,16  ),GWF ,AMP(22  ))            
      CALL JIOXXX(W(1,7),W(1,6),GWF,WMASS,WWIDTH,W(1,45))
      CALL wwww_anomal4(W(1,1),W(1,8),W(1,16),W(1,45), AMP(24))              !W+ -> WWW
      CALL FVIXXX(W(1,5   ),W(1,8   ),GWF ,ZERO    ,ZERO    ,W(1,46  ))    
      CALL JIOXXX(W(1,46  ),W(1,4   ),GWM_ZDL ,ZMASS   ,ZWIDTH  ,W(1,47  ))    ! W-
      CALL IOVXXX(W(1,17  ),W(1,6   ),W(1,47  ),GZN ,AMP(25  ))            
      CALL JIOXXX(W(1,46  ),W(1,4   ),GWM_ADL ,ZERO    ,AWIDTH  ,W(1,48  ))    ! W-
      CALL jwpawm_anomal3(W(1,48  ),W(1,1   ),W(1,49 ))                 
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,49  ),GWF ,AMP(26  ))            
      CALL jwpzwm_anomal3(W(1,47  ),W(1,1   ),W(1,50 ))   
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,50  ),GWF ,AMP(27  ))            
      CALL FVIXXX(W(1,7   ),W(1,48  ),GAL ,LMASS   ,ZERO    ,W(1,51  ))    
      CALL IOVXXX(W(1,51  ),W(1,6   ),W(1,1   ),GWF ,AMP(28  ))            
      CALL FVIXXX(W(1,7   ),W(1,47  ),GZL ,LMASS   ,ZERO    ,W(1,52  ))    
      CALL IOVXXX(W(1,52  ),W(1,6   ),W(1,1   ),GWF ,AMP(29  ))            
      CALL FVIXXX(W(1,46  ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,53  ))    
      CALL JIOXXX(W(1,53  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,54  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,54  ),GWF ,AMP(30  ))            
      CALL FVOXXX(W(1,2   ),W(1,16  ),GWF ,ZERO    ,ZERO    ,W(1,55  ))    
      CALL JIOXXX(W(1,3   ),W(1,55  ),GWP_ZDL ,ZMASS   ,ZWIDTH  ,W(1,56  ))    ! W+
      CALL IOVXXX(W(1,17  ),W(1,6   ),W(1,56  ),GZN ,AMP(31  ))            
      CALL JIOXXX(W(1,3   ),W(1,55  ),GWP_ADL ,ZERO    ,AWIDTH  ,W(1,57  ))    ! W+
      CALL jwpawm_anomal3(W(1,57  ),W(1,1   ),W(1,58 ))
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,58  ),GWF ,AMP(32  ))            
      CALL jwpzwm_anomal3(W(1,56  ),W(1,1   ),W(1,59 ))  
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,59  ),GWF ,AMP(33  ))            
      CALL FVIXXX(W(1,7   ),W(1,57  ),GAL ,LMASS   ,ZERO    ,W(1,60  ))    
      CALL IOVXXX(W(1,60  ),W(1,6   ),W(1,1   ),GWF ,AMP(34  ))            
      CALL FVIXXX(W(1,7   ),W(1,56  ),GZL ,LMASS   ,ZERO    ,W(1,61  ))    
      CALL IOVXXX(W(1,61  ),W(1,6   ),W(1,1   ),GWF ,AMP(35  ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,62  ))    
      CALL JIOXXX(W(1,62  ),W(1,2   ),GWP_ZUN ,ZMASS   ,ZWIDTH  ,W(1,63  ))    ! W+
      CALL FVIXXX(W(1,5   ),W(1,63  ),GWM_ZUN ,ZERO    ,ZERO    ,W(1,64  ))    ! W-
      CALL JIOXXX(W(1,64  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,65  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,65  ),GWF ,AMP(36  ))            
      CALL FVOXXX(W(1,4   ),W(1,63  ),GWM_ZDL ,ZERO    ,ZERO    ,W(1,66  ))    ! W-
      CALL JIOXXX(W(1,5   ),W(1,66  ),GWF ,WMASS   ,WWIDTH  ,W(1,67  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,67  ),GWF ,AMP(37  ))            
      CALL JIOXXX(W(1,62  ),W(1,55  ),GWF ,WMASS   ,WWIDTH  ,W(1,68  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,68  ),GWF ,AMP(38  ))            
      CALL jwpzwm_anomal3(W(1,63  ),W(1,16  ),W(1,69 ))
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,69  ),GWF ,AMP(39  ))            
      CALL IOVXXX(W(1,24  ),W(1,6   ),W(1,63  ),GZN ,AMP(40  ))            
      CALL FVIXXX(W(1,7   ),W(1,63  ),GZL ,LMASS   ,ZERO    ,W(1,70  ))    
      CALL IOVXXX(W(1,70  ),W(1,6   ),W(1,16  ),GWF ,AMP(41  ))            
      CALL FVIXXX(W(1,3   ),W(1,16  ),GWF ,ZERO    ,ZERO    ,W(1,71  ))    
      CALL JIOXXX(W(1,71  ),W(1,2   ),GWP_ZUN ,ZMASS   ,ZWIDTH  ,W(1,72  ))    ! W+
      CALL IOVXXX(W(1,17  ),W(1,6   ),W(1,72  ),GZN ,AMP(42  ))            
      CALL jwpzwm_anomal3(W(1,72  ),W(1,1   ),W(1,73 )) 
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,73  ),GWF ,AMP(43  ))            
      CALL FVIXXX(W(1,7   ),W(1,72  ),GZL ,LMASS   ,ZERO    ,W(1,74  ))    
      CALL IOVXXX(W(1,74  ),W(1,6   ),W(1,1   ),GWF ,AMP(44  ))            
      CALL FVOXXX(W(1,2   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,75  ))    
      CALL JIOXXX(W(1,3   ),W(1,75  ),GWP_ZDL ,ZMASS   ,ZWIDTH  ,W(1,76  ))    ! W+
      CALL FVIXXX(W(1,5   ),W(1,76  ),GWM_ZUN ,ZERO    ,ZERO    ,W(1,77  ))    ! W-
      CALL JIOXXX(W(1,77  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,78  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,78  ),GWF ,AMP(45  ))            
      CALL JIOXXX(W(1,3   ),W(1,75  ),GWP_ADL ,ZERO    ,AWIDTH  ,W(1,79  ))    ! W+
      CALL FVOXXX(W(1,4   ),W(1,79  ),GWM_ADL ,ZERO    ,ZERO    ,W(1,80  ))    ! W-
      CALL JIOXXX(W(1,5   ),W(1,80  ),GWF ,WMASS   ,WWIDTH  ,W(1,81  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,81  ),GWF ,AMP(46  ))            
      CALL FVOXXX(W(1,4   ),W(1,76  ),GWM_ZDL ,ZERO    ,ZERO    ,W(1,82  ))    ! W-
      CALL JIOXXX(W(1,5   ),W(1,82  ),GWF ,WMASS   ,WWIDTH  ,W(1,83  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,83  ),GWF ,AMP(47  ))            
      CALL JIOXXX(W(1,71  ),W(1,75  ),GWF ,WMASS   ,WWIDTH  ,W(1,84  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,84  ),GWF ,AMP(48  ))            
      CALL jwpawm_anomal3(W(1,79  ),W(1,16  ),W(1,85 ))   
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,85  ),GWF ,AMP(49  ))            
      CALL jwpzwm_anomal3(W(1,76  ),W(1,16  ),W(1,86 ))     
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,86  ),GWF ,AMP(50  ))            
      CALL IOVXXX(W(1,24  ),W(1,6   ),W(1,76  ),GZN ,AMP(51  ))            
      CALL FVIXXX(W(1,7   ),W(1,79  ),GAL ,LMASS   ,ZERO    ,W(1,87  ))    
      CALL IOVXXX(W(1,87  ),W(1,6   ),W(1,16  ),GWF ,AMP(52  ))            
      CALL FVIXXX(W(1,7   ),W(1,76  ),GZL ,LMASS   ,ZERO    ,W(1,88  ))    
      CALL IOVXXX(W(1,88  ),W(1,6   ),W(1,16  ),GWF ,AMP(53  ))            

      WPWWW(MU) = -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)-AMP(   5)
     &             -AMP(   6)-AMP(   7)-AMP(   9)-AMP(  10)
     &             -AMP(  11)-AMP(  13)-AMP(  14)-AMP(  15)
     &             -AMP(  16)-AMP(  17)-AMP(  18)-AMP(  20)
     &             -AMP(  21)-AMP(  22)-AMP(  24)-AMP(  25)
     &             -AMP(  26)-AMP(  27)-AMP(  28)-AMP(  29)-AMP(  30)
     &             -AMP(  31)-AMP(  32)-AMP(  33)-AMP(  34)-AMP(  35)
     &             -AMP(  36)-AMP(  37)-AMP(  38)-AMP(  39)-AMP(  40)
     &             -AMP(  41)-AMP(  42)-AMP(  43)-AMP(  44)-AMP(  45)
     &             -AMP(  46)-AMP(  47)-AMP(  48)-AMP(  49)-AMP(  50)
     &             -AMP(  51)-AMP(  52)-AMP(  53)
     &             -AMP(   8)-AMP(  19) !H coupled to WW
!     &             -AMP(  12)-AMP(  23) !H coupled to tau

      if (procid .eq. WPhadWMWP) then
        ! new graphs for W+ decay
      CALL JIOXXX(W(1,62  ),W(1,2   ),GWP_AUN ,ZERO   ,ZERO  ,W(1,89  ))    ! W+
      CALL FVOXXX(W(1,4   ),W(1,89  ),GWM_ADL ,ZERO    ,ZERO    ,W(1,90  ))    ! W-
      CALL JIOXXX(W(1,5   ),W(1,90  ),GWF ,WMASS   ,WWIDTH  ,W(1,91  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,91  ),GWF ,AMP(54  ))            
      CALL jwpawm_anomal3(W(1,89  ),W(1,16  ),W(1,92 ))
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,92  ),GWF ,AMP(55  ))            
      CALL FVIXXX(W(1,7   ),W(1,89  ),GAL ,LMASS   ,ZERO    ,W(1,93  ))    
      CALL IOVXXX(W(1,93  ),W(1,6   ),W(1,16  ),GWF ,AMP(56  ))            
      CALL JIOXXX(W(1,71  ),W(1,2   ),GWP_AUN ,ZERO   ,ZERO  ,W(1,94  ))    ! W+
      CALL jwpawm_anomal3(W(1,94  ),W(1,1   ),W(1,95 )) 
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,95  ),GWF ,AMP(57  ))            
      CALL FVIXXX(W(1,7   ),W(1,94  ),GAL ,LMASS   ,ZERO    ,W(1,96  ))    
      CALL IOVXXX(W(1,96  ),W(1,6   ),W(1,1   ),GWF ,AMP(58  ))            
        WPWWW(MU) = WPWWW(MU) -AMP(  54)-AMP(  55)-AMP(  56)-AMP(  57)-AMP(  58)
      endif

      if (procid .eq. WPWMhadWP) then
        ! new graphs for W- decay
      CALL JIOXXX(W(1,5   ),W(1,9   ),GAU ,ZERO   ,ZERO  ,W(1,89  ))    ! W-
      CALL jwpawm_anomal3(W(1,89  ),W(1,1   ),W(1,90 )) 
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,90  ),GWF ,AMP(54  ))            
      CALL FVIXXX(W(1,7   ),W(1,89  ),GAL ,LMASS   ,ZERO    ,W(1,91  ))    
      CALL IOVXXX(W(1,91  ),W(1,6   ),W(1,1   ),GWF ,AMP(55  ))            
      CALL jaww_anomal3(W(1,1   ),W(1,8   ),W(1,92 ))                
      CALL FVIXXX(W(1,5   ),W(1,92  ),GAU ,ZERO    ,ZERO    ,W(1,93  ))    ! W-
      CALL JIOXXX(W(1,93  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,94  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,94  ),GWF ,AMP(56  ))            
      CALL JIOXXX(W(1,3   ),W(1,75  ),GWP_ADL ,ZERO   ,ZERO  ,W(1,95  ))    ! W+
      CALL FVIXXX(W(1,5   ),W(1,95  ),GWM_AUN ,ZERO    ,ZERO    ,W(1,96  ))    ! W-
      CALL JIOXXX(W(1,96  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,97  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,97  ),GWF ,AMP(57  ))            
        WPWWW(MU) = WPWWW(MU) -AMP(  54)-AMP(  55)-AMP(  56)-AMP(  57)
      endif

      ENDDO

      WPWWW(4) = DCMPLX(Q(0),Q(3))
      WPWWW(5) = DCMPLX(Q(1),Q(2))

      RETURN
      END


C-------------------------------------------------------------------------------


      SUBROUTINE WWW_WMTOWWW_had(P,N,H,WMWWW,NW)
c Leptonic tensor for process 
c     W- --> W+ W- W- --> ve e+ mu- vm~ ta- vt~
c computed for fixed helicity set h

      IMPLICIT NONE

C ARGUMENTS

      DOUBLE PRECISION P(0:3,2:7)
      INTEGER N,H
      DOUBLE COMPLEX WMWWW(0:5)
      INTEGER NW
C
C LOCAL VARIABLES
C

      INTEGER LSIGN(2:7,2),L
      DATA(LSIGN(L,1),L=2,7)/-1,-1,-1,-1,-1,-1/	! H=1
      DATA(LSIGN(L,2),L=2,7)/-1,-1,-1,-1,+1,+1/	! H=2

      CALL WWW_WMTOWWW1_had(P,N,LSIGN(2,H),WMWWW(0),NW)    ! HELICITY COMBINATION #H IS SELECTED
							! HERE ONE ONLY NEEDS HELICITY SET H=1
      END


      SUBROUTINE WWW_WMTOWWW1_had(P,N,LSIGN,WMWWW,NW)
C  
C Generated by MadGraph II, SLIGHTLY CHANGED
C RETURNS AMPLITUDE
C FOR PROCESS : w- -> ve e+ mu- vm~ ta- vt~
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  58) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=  90) 
      DOUBLE PRECISION     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      DOUBLE PRECISION P(0:3,2:7)
      INTEGER N
      INTEGER LSIGN(2:7)
      DOUBLE COMPLEX WMWWW(0:5)
      INTEGER NW
C  
C LOCAL VARIABLES 
C  
      DOUBLE PRECISION Q(0:3)
      INTEGER I,MU
      DOUBLE COMPLEX AMP(NGRAPHS)
      DOUBLE COMPLEX W(18,NWAVEFUNCS)

      LOGICAL LSWITCH
      PARAMETER(LSWITCH=.true.)

!LEPTON SPINORS + POLARISATION VECTORS GENERATED IN M2S_QQWWW
#include "tensor.inc"

C
C GLOBAL VARIABLES
C
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/global.inc"
#include "VBFNLO/utilities/coupl_haddecay.inc"
#include "VBFNLO/utilities/process.inc"

C ------------------------------------------------------------------------------
C BEGIN CODE
C ------------------------------------------------------------------------------

      IF(LSWITCH) THEN                                    !READ LEPTON WF FROM COMMMON BLOCK
         DO I=1,6
            W(I,2) = WVE2(I,N)
            W(I,3) = WEP2(I,N)
            W(I,4) = WMU2(I,N)
            W(I,5) = WVM2(I,N)
            W(I,6) = WTM(I,N)
            W(I,7) = WVTBAR(I,N)
            W(I,8) = W1P(I,N)
            W(I,28)= WM1(I,N)
         ENDDO
      ENDIF

      DO MU=0,3
         Q(MU) = P(MU,2) +  P(MU,3) +  P(MU,4) +  P(MU,5) +  P(MU,6) +  P(MU,7)
      ENDDO

      IF(.NOT.LSWITCH) THEN
         CALL OXXXXX(P(0,2   ),ZERO ,+1*LSIGN(2   ),+1,W(1,2   ))        
         CALL IXXXXX(P(0,3   ),ZERO ,-1*LSIGN(3   ),-1,W(1,3   ))        
         CALL OXXXXX(P(0,4   ),ZERO ,+1*LSIGN(4   ),+1,W(1,4   ))        
         CALL IXXXXX(P(0,5   ),ZERO ,-1*LSIGN(5   ),-1,W(1,5   ))        
         CALL OXXXXX(P(0,6   ),LMASS,+1*LSIGN(6   ),+1,W(1,6   ))       
         CALL IXXXXX(P(0,7   ),ZERO ,-1*LSIGN(7   ),-1,W(1,7   ))        
         CALL JIOXXX(W(1,3   ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,8   ))    
         CALL JIOXXX(W(1,5   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,28  ))    
      ENDIF

      DO MU=0,3
      CALL TRIPLEWVCARTX(Q(0),WMASS,WWIDTH,MU,-1,W(1,1))
      CALL FVOXXX(W(1,4   ),W(1,8   ),GWF ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL JIOXXX(W(1,5   ),W(1,9   ),GWM_ZUN ,ZMASS   ,ZWIDTH  ,W(1,10  ))    ! W-
      CALL FVOXXX(W(1,6   ),W(1,10  ),GZL ,LMASS   ,ZERO    ,W(1,11  ))    
      CALL IOVXXX(W(1,7   ),W(1,11  ),W(1,1   ),GWF ,AMP(1   ))            
      CALL jwmwpz_anomal3(W(1,1   ),W(1,10  ),W(1,12 )) 
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,12  ),GWF ,AMP(2   ))            
      CALL FVIXXX(W(1,7   ),W(1,10  ),GZN ,ZERO    ,ZERO    ,W(1,13  ))    
      CALL IOVXXX(W(1,13  ),W(1,6   ),W(1,1   ),GWF ,AMP(3   ))            
      CALL FVIXXX(W(1,5   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL JIOXXX(W(1,14  ),W(1,4   ),GWM_ADL ,ZERO    ,AWIDTH  ,W(1,15  ))    ! W-
      CALL FVIXXX(W(1,3   ),W(1,15  ),GWP_ADL ,ZERO    ,ZERO    ,W(1,16  ))    ! W+
      CALL JIOXXX(W(1,16  ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,17  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,17  ),GWF ,AMP(4   ))            
      CALL JIOXXX(W(1,14  ),W(1,4   ),GWM_ZDL ,ZMASS   ,ZWIDTH  ,W(1,18  ))    ! W-
      CALL FVIXXX(W(1,3   ),W(1,18  ),GWP_ZDL ,ZERO    ,ZERO    ,W(1,19  ))    ! W+
      CALL JIOXXX(W(1,19  ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,20  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,20  ),GWF ,AMP(5   ))            
      CALL FVOXXX(W(1,2   ),W(1,18  ),GWP_ZUN ,ZERO    ,ZERO    ,W(1,21  ))    ! W+
      CALL JIOXXX(W(1,3   ),W(1,21  ),GWF ,WMASS   ,WWIDTH  ,W(1,22  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,22  ),GWF ,AMP(6   ))            
      CALL jwmwpa_anomal3(W(1,8   ),W(1,15  ),W(1,23 )) 
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,23  ),GWF ,AMP(7   ))            
      CALL jwmwpz_anomal3(W(1,8   ),W(1,18  ),W(1,24 )) 
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,24  ),GWF ,AMP(8   ))            
      CALL FVIXXX(W(1,7   ),W(1,18  ),GZN ,ZERO    ,ZERO    ,W(1,25  ))    
      CALL IOVXXX(W(1,25  ),W(1,6   ),W(1,8   ),GWF ,AMP(9   ))            
      CALL FVIXXX(W(1,7   ),W(1,8   ),GWF ,LMASS   ,ZERO    ,W(1,26  ))    
      CALL IOVXXX(W(1,26  ),W(1,6   ),W(1,15  ),GAL ,AMP(10  ))            
      CALL IOVXXX(W(1,26  ),W(1,6   ),W(1,18  ),GZL ,AMP(11  ))            
      CALL JIOXXX(W(1,14  ),W(1,9   ),GWF ,WMASS   ,WWIDTH  ,W(1,27  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,27  ),GWF ,AMP(12  ))            
      CALL FVIXXX(W(1,7   ),W(1,1   ),GWF ,LMASS   ,ZERO    ,W(1,29  ))    
      CALL jaww_anomal3(W(1,28  ),W(1,8   ),W(1,30 )) 
      CALL IOVXXX(W(1,29  ),W(1,6   ),W(1,30  ),GAL ,AMP(13  ))            
      CALL jzww_anomal3(W(1,28  ),W(1,8   ),W(1,31 ))    
      CALL IOVXXX(W(1,29  ),W(1,6   ),W(1,31  ),GZL ,AMP(14  ))            
      CALL jhww_anomal3(W(1,28  ),W(1,8   ),W(1,32 ))     
      CALL jwmwpa_anomal3(W(1,1   ),W(1,30  ),W(1,33 ))  
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,33  ),GWF ,AMP(16  ))            
      CALL jwmwpz_anomal3(W(1,1   ),W(1,31  ),W(1,34 )) 
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,34  ),GWF ,AMP(17  ))            
      CALL JIOXXX(W(1,7   ),W(1,6  ),GWF ,WMASS   ,WWIDTH  ,W(1,35  ))    
      CALL wwh_anomal3(W(1,1  ),W(1,35   ),W(1,32  ),AMP(18   ))
      CALL FVIXXX(W(1,26  ),W(1,28  ),GWF ,ZERO    ,ZERO    ,W(1,36  ))    
      CALL IOVXXX(W(1,36  ),W(1,6   ),W(1,1   ),GWF ,AMP(19  ))            
      CALL FVIXXX(W(1,7   ),W(1,31  ),GZN ,ZERO    ,ZERO    ,W(1,37  ))    
      CALL IOVXXX(W(1,37  ),W(1,6   ),W(1,1   ),GWF ,AMP(20  ))            
      CALL jaww_anomal3(W(1,28  ),W(1,1   ),W(1,38 ))    
      CALL FVIXXX(W(1,3   ),W(1,38  ),GWP_ADL ,ZERO    ,ZERO    ,W(1,39  ))    ! W+
      CALL JIOXXX(W(1,39  ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,40  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,40  ),GWF ,AMP(21  ))            
      CALL jzww_anomal3(W(1,28  ),W(1,1   ),W(1,41 )) 
      CALL FVIXXX(W(1,3   ),W(1,41  ),GWP_ZDL ,ZERO    ,ZERO    ,W(1,42  ))    ! W+
      CALL JIOXXX(W(1,42  ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,43  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,43  ),GWF ,AMP(22  ))            
      CALL FVOXXX(W(1,2   ),W(1,41  ),GWP_ZUN ,ZERO    ,ZERO    ,W(1,44  ))    ! W+
      CALL JIOXXX(W(1,3   ),W(1,44  ),GWF ,WMASS   ,WWIDTH  ,W(1,45  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,45  ),GWF ,AMP(23  ))            
      CALL FVIXXX(W(1,29  ),W(1,28  ),GWF ,ZERO    ,ZERO    ,W(1,46  ))    
      CALL IOVXXX(W(1,46  ),W(1,6   ),W(1,8   ),GWF ,AMP(24  ))            
      CALL jwmwpa_anomal3(W(1,8   ),W(1,38  ),W(1,47 )) 
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,47  ),GWF ,AMP(25  ))            
      CALL jwmwpz_anomal3(W(1,8   ),W(1,41  ),W(1,48 )) 
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,48  ),GWF ,AMP(26  ))            
      CALL jhww_anomal3(W(1,28  ),W(1,1   ),W(1,49 ))  
      CALL JIOXXX(W(1,7   ),W(1,6  ),GWF ,WMASS   ,WWIDTH  ,W(1,50  ))    
      CALL wwh_anomal3(W(1,8  ),W(1,50   ),W(1,49  ),AMP(27  ))
      CALL FVIXXX(W(1,7   ),W(1,41  ),GZN ,ZERO    ,ZERO    ,W(1,51  ))    
      CALL IOVXXX(W(1,51  ),W(1,6   ),W(1,8   ),GWF ,AMP(28  ))            
      CALL IOVXXX(W(1,26  ),W(1,6   ),W(1,38  ),GAL ,AMP(29  ))            
      CALL IOVXXX(W(1,26  ),W(1,6   ),W(1,41  ),GZL ,AMP(30  ))            
      CALL JIOXXX(W(1,7),W(1,6),GWF,WMASS,WWIDTH,W(1,52))
      CALL wwww_anomal4(W(1,28),W(1,8),W(1,52),W(1,1) ,AMP(32))              !W- -> WWW
      CALL FVIXXX(W(1,5   ),W(1,8   ),GWF ,ZERO    ,ZERO    ,W(1,53  ))    
      CALL JIOXXX(W(1,53  ),W(1,4   ),GWM_ADL ,ZERO    ,AWIDTH  ,W(1,54  ))    ! W-
      CALL IOVXXX(W(1,29  ),W(1,6   ),W(1,54  ),GAL ,AMP(33  ))            
      CALL JIOXXX(W(1,53  ),W(1,4   ),GWM_ZDL ,ZMASS   ,ZWIDTH  ,W(1,55  ))    ! W-
      CALL IOVXXX(W(1,29  ),W(1,6   ),W(1,55  ),GZL ,AMP(34  ))            
      CALL jwmwpa_anomal3(W(1,1   ),W(1,54  ),W(1,56 )) 
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,56  ),GWF ,AMP(35  ))            
      CALL jwmwpz_anomal3(W(1,1   ),W(1,55  ),W(1,57 ))   
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,57  ),GWF ,AMP(36  ))            
      CALL FVIXXX(W(1,7   ),W(1,55  ),GZN ,ZERO    ,ZERO    ,W(1,58  ))    
      CALL IOVXXX(W(1,58  ),W(1,6   ),W(1,1   ),GWF ,AMP(37  ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,59  ))    
      CALL JIOXXX(W(1,5   ),W(1,59  ),GWM_ZUN ,ZMASS   ,ZWIDTH  ,W(1,60  ))    ! W-
      CALL FVIXXX(W(1,3   ),W(1,60  ),GWP_ZDL ,ZERO    ,ZERO    ,W(1,61  ))    ! W+
      CALL JIOXXX(W(1,61  ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,62  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,62  ),GWF ,AMP(38  ))            
      CALL FVOXXX(W(1,2   ),W(1,60  ),GWP_ZUN ,ZERO    ,ZERO    ,W(1,63  ))    ! W+
      CALL JIOXXX(W(1,3   ),W(1,63  ),GWF ,WMASS   ,WWIDTH  ,W(1,64  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,64  ),GWF ,AMP(39  ))            
      CALL JIOXXX(W(1,53  ),W(1,59  ),GWF ,WMASS   ,WWIDTH  ,W(1,65  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,65  ),GWF ,AMP(40  ))            
      CALL jwmwpz_anomal3(W(1,8   ),W(1,60  ),W(1,66 ))   
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,66  ),GWF ,AMP(41  ))            
      CALL FVIXXX(W(1,7   ),W(1,60  ),GZN ,ZERO    ,ZERO    ,W(1,67  ))    
      CALL IOVXXX(W(1,67  ),W(1,6   ),W(1,8   ),GWF ,AMP(42  ))            
      CALL IOVXXX(W(1,26  ),W(1,6   ),W(1,60  ),GZL ,AMP(43  ))            
      CALL FVOXXX(W(1,2   ),W(1,28  ),GWF ,ZERO    ,ZERO    ,W(1,68  ))    
      CALL JIOXXX(W(1,3   ),W(1,68  ),GWP_ADL ,ZERO    ,AWIDTH  ,W(1,69  ))    ! W+
      CALL IOVXXX(W(1,29  ),W(1,6   ),W(1,69  ),GAL ,AMP(44  ))            
      CALL JIOXXX(W(1,3   ),W(1,68  ),GWP_ZDL ,ZMASS   ,ZWIDTH  ,W(1,70  ))    ! W+
      CALL IOVXXX(W(1,29  ),W(1,6   ),W(1,70  ),GZL ,AMP(45  ))            
      CALL jwmwpa_anomal3(W(1,1   ),W(1,69  ),W(1,71 ))  
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,71  ),GWF ,AMP(46  ))            
      CALL jwmwpz_anomal3(W(1,1   ),W(1,70  ),W(1,72 ))   
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,72  ),GWF ,AMP(47  ))            
      CALL FVIXXX(W(1,7   ),W(1,70  ),GZN ,ZERO    ,ZERO    ,W(1,73  ))    
      CALL IOVXXX(W(1,73  ),W(1,6   ),W(1,1   ),GWF ,AMP(48  ))            
      CALL FVOXXX(W(1,68  ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,74  ))    
      CALL JIOXXX(W(1,3   ),W(1,74  ),GWF ,WMASS   ,WWIDTH  ,W(1,75  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,75  ),GWF ,AMP(49  ))            
      CALL FVIXXX(W(1,3   ),W(1,28  ),GWF ,ZERO    ,ZERO    ,W(1,76  ))    
      CALL JIOXXX(W(1,76  ),W(1,2   ),GWP_ZUN ,ZMASS   ,ZWIDTH  ,W(1,77  ))    ! W+
      CALL IOVXXX(W(1,29  ),W(1,6   ),W(1,77  ),GZL ,AMP(50  ))            
      CALL jwmwpz_anomal3(W(1,1   ),W(1,77  ),W(1,78 )) 
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,78  ),GWF ,AMP(51  ))            
      CALL FVIXXX(W(1,7   ),W(1,77  ),GZN ,ZERO    ,ZERO    ,W(1,79  ))    
      CALL IOVXXX(W(1,79  ),W(1,6   ),W(1,1   ),GWF ,AMP(52  ))            
      CALL FVIXXX(W(1,76  ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,80  ))    
      CALL JIOXXX(W(1,80  ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,81  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,81  ),GWF ,AMP(53  ))            

      WMWWW(MU) = -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)-AMP(   5)
     &             -AMP(   6)-AMP(   7)-AMP(   8)-AMP(   9)-AMP(  10)
     &             -AMP(  11)-AMP(  12)-AMP(  13)-AMP(  14)
     &             -AMP(  16)-AMP(  17)-AMP(  19)-AMP(  20)
     &             -AMP(  21)-AMP(  22)-AMP(  23)-AMP(  24)-AMP(  25)
     &             -AMP(  26)-AMP(  28)-AMP(  29)-AMP(  30)
     &             -AMP(  32)-AMP(  33)-AMP(  34)-AMP(  35)
     &             -AMP(  36)-AMP(  37)-AMP(  38)-AMP(  39)-AMP(  40)
     &             -AMP(  41)-AMP(  42)-AMP(  43)-AMP(  44)-AMP(  45)
     &             -AMP(  46)-AMP(  47)-AMP(  48)-AMP(  49)-AMP(  50)
     &             -AMP(  51)-AMP(  52)-AMP(  53)
     &             -AMP(  18)-AMP(  27) !H coupled to WW
!     &             -AMP(  15)-AMP(  31) !H coupled to tau

      if (procid .eq. WMhadWPWM) then
        ! new graphs for W- decay
      CALL JIOXXX(W(1,5   ),W(1,9   ),GWM_AUN ,ZERO   ,ZERO  ,W(1,82  ))    ! W-
      CALL FVOXXX(W(1,6   ),W(1,82  ),GAL ,LMASS   ,ZERO    ,W(1,83  ))    
      CALL IOVXXX(W(1,7   ),W(1,83  ),W(1,1   ),GWF ,AMP(54  ))            
      CALL jwmwpa_anomal3(W(1,1   ),W(1,82  ),W(1,84 )) 
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,84  ),GWF ,AMP(55  ))            
      CALL JIOXXX(W(1,5   ),W(1,59  ),GWM_AUN ,ZERO   ,ZERO  ,W(1,85  ))    ! W-
      CALL FVIXXX(W(1,3   ),W(1,85  ),GWP_ADL ,ZERO    ,ZERO    ,W(1,86  ))    ! W+
      CALL JIOXXX(W(1,86  ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,87  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,87  ),GWF ,AMP(56  ))            
      CALL jwmwpa_anomal3(W(1,8   ),W(1,85  ),W(1,88 ))   
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,88  ),GWF ,AMP(57  ))            
      CALL IOVXXX(W(1,26  ),W(1,6   ),W(1,85  ),GAL ,AMP(58  ))            
        WMWWW(MU) = WMWWW(MU) -AMP(  54)-AMP(  55)-AMP(  56)-AMP(  57)-AMP(  58)
      endif

      if (procid .eq. WMWPhadWM) then
        ! new graphs for W+ decay
      CALL JIOXXX(W(1,14  ),W(1,4   ),GWM_ADL ,ZERO   ,ZERO  ,W(1,82  ))    ! W-
      CALL FVOXXX(W(1,2   ),W(1,82  ),GWP_AUN ,ZERO    ,ZERO    ,W(1,83  ))    ! W+
      CALL JIOXXX(W(1,3   ),W(1,83  ),GWF ,WMASS   ,WWIDTH  ,W(1,84  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,84  ),GWF ,AMP(54  ))            
      CALL jaww_anomal3(W(1,28  ),W(1,1   ),W(1,85 )) 
      CALL FVOXXX(W(1,2   ),W(1,85  ),GWP_AUN ,ZERO    ,ZERO    ,W(1,86  ))    ! W+
      CALL JIOXXX(W(1,3   ),W(1,86  ),GWF ,WMASS   ,WWIDTH  ,W(1,87  ))    
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,87  ),GWF ,AMP(55  ))            
      CALL FVIXXX(W(1,3   ),W(1,28  ),GWF ,ZERO    ,ZERO    ,W(1,88  ))    
      CALL JIOXXX(W(1,88  ),W(1,2   ),GWP_AUN ,ZERO   ,ZERO  ,W(1,89  ))    ! W+
      CALL IOVXXX(W(1,29  ),W(1,6   ),W(1,89  ),GAL ,AMP(56  ))            
      CALL jwmwpa_anomal3(W(1,1   ),W(1,89  ),W(1,90 )) 
      CALL IOVXXX(W(1,7   ),W(1,6   ),W(1,90  ),GWF ,AMP(57  ))            
        WMWWW(MU) = WMWWW(MU) -AMP(  54)-AMP(  55)-AMP(  56)-AMP(  57)
      endif

      ENDDO

      WMWWW(4) = DCMPLX(Q(0),Q(3))
      WMWWW(5) = DCMPLX(Q(1),Q(2))

      RETURN
      END


C------------------------------------------------------------------------------


      SUBROUTINE WWW_ATOWW1_had(P,N,BOS,A1,NW)

      IMPLICIT NONE

C ARGUMENTS
      DOUBLE PRECISION P(0:3,2:7)
      INTEGER N, BOS,NW
      DOUBLE COMPLEX A1(0:5)

C LOCAL VARIABLES
      DOUBLE PRECISION PBAR(0:3,1:4)
      INTEGER I,MU
      DOUBLE PRECISION RZERO
      PARAMETER(RZERO = 0.0D0)

C-----------BEGIN CODE--------------------

      DO I=1,4
         DO MU = 0,3
         PBAR(MU,I) = RZERO
         ENDDO
      ENDDO

      DO MU = 0,3
         PBAR(MU,1) = P(MU,2)
         PBAR(MU,2) = P(MU,3)
         PBAR(MU,3) = P(MU,4)
         PBAR(MU,4) = P(MU,5)
      ENDDO

      CALL WWW_ATOWW1A_had(PBAR,N,A1(0),BOS)

      END


      SUBROUTINE WWW_ATOWW1A_had(P,N,A1,BOS)
C  
C Generated by MadGraph II, SLIGHTLY CHANGED
C RETURNS AMPLITUDE
C FOR PROCESS : a -> ve e+ mu- vm~
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=4)
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=12)
      DOUBLE PRECISION     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS
C  
      DOUBLE PRECISION P(0:3,1:4)                                    !LEPTON MOMENTA
      INTEGER N,BOS
      DOUBLE COMPLEX A1(0:5)                                   !AMPLITUDES FOR HEL.DIRECTIONS 0:3
                                                           !4,5-COMPONENTS ARE MOMENTUM COMPONENTS
C  
C LOCAL VARIABLES
C  
      DOUBLE PRECISION Q(0:3)
      INTEGER I,MU
      DOUBLE COMPLEX AMP(NGRAPHS)
      DOUBLE COMPLEX W(18,NWAVEFUNCS)

      INTEGER NHEL(2:5),IHEL
      DATA(NHEL(IHEL),IHEL=2,5)/-1,+1,-1,+1/
      SAVE NHEL

!LEPTON SPINORS + POLARISATION VECTORS GENERATED IN M2S_QQWWW
#include "tensor.inc"

      LOGICAL LSWITCH
      PARAMETER(LSWITCH =.true.)

C
C GLOBAL VARIABLES
C
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/global.inc"
#include "VBFNLO/utilities/coupl_haddecay.inc"
#include "VBFNLO/utilities/process.inc"


C -----------------------------------------------------------------------------
C BEGIN CODE
C -----------------------------------------------------------------------------

      IF (LSWITCH) THEN
      IF(BOS.EQ.343) THEN
         DO I=1,6
            W(I,2) = WVE1(I,N)
            W(I,3) = WEP1(I,N)
            W(I,4) = WMU1(I,N)
            W(I,5) = WVM1(I,N)
            W(I,6) = WP1(I,N)
         ENDDO
      ELSE
         DO I=1,6
            W(I,2) = WVE2(I,N)
            W(I,3) = WEP2(I,N)
            W(I,4) = WMU2(I,N)
            W(I,5) = WVM2(I,N)
            W(I,6) = W1P(I,N)
         ENDDO
      ENDIF
      ENDIF

      DO MU=0,3
         Q(MU) =  P(MU,1) + P(MU,2) + P(MU,3) + P(MU,4)
      ENDDO

      IF (.NOT.LSWITCH) THEN
         CALL OXXXXX(P(0,1   ),ZERO ,NHEL(2   ),+1,W(1,2   ))        
         CALL IXXXXX(P(0,2   ),ZERO ,NHEL(3   ),-1,W(1,3   ))        
         CALL OXXXXX(P(0,3   ),ZERO ,NHEL(4   ),+1,W(1,4   ))        
         CALL IXXXXX(P(0,4   ),ZERO ,NHEL(5   ),-1,W(1,5   ))        
         CALL JIOXXX(W(1,3   ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,6   ))    
      ENDIF

      DO MU=0,3
      CALL TRIPLEWVCARTX(Q(0),ZERO,ZERO,MU,-1,W(1,1))
      CALL jwmwpa_anomal3(W(1,6   ),W(1,1   ),W(1,7  ))      
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,7   ),GWF ,AMP(1   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GWM_ADL ,ZERO    ,ZERO    ,W(1,8   ))    ! W-
      CALL IOVXXX(W(1,5   ),W(1,8   ),W(1,6   ),GWF ,AMP(2   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GWP_ADL ,ZERO    ,ZERO    ,W(1,9   ))    ! W+
      CALL JIOXXX(W(1,9   ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,10  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,10  ),GWF ,AMP(3   ))            

      A1(MU) = +AMP(   1)+AMP(   2)+AMP(   3)

      if (procid .eq. WPhadWMWP .or. procid .eq. WMWPhadWM) then
        ! new graphs for W+ decay
      CALL FVOXXX(W(1,2   ),W(1,1   ),GWP_AUN ,ZERO    ,ZERO    ,W(1,11  ))    ! W+
      CALL JIOXXX(W(1,3   ),W(1,11  ),GWF ,WMASS   ,WWIDTH  ,W(1,12  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,12  ),GWF ,AMP(4   ))            
        A1(MU) = A1(MU) +AMP(   4)
      endif

      if (procid .eq. WPWMhadWP .or. procid .eq. WMhadWPWM) then
        ! new graphs for W- decay
      CALL FVOXXX(W(1,4   ),W(1,6   ),GWF ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL IOVXXX(W(1,5   ),W(1,11  ),W(1,1   ),GWM_AUN ,AMP(4   ))            ! W-
        A1(MU) = A1(MU) +AMP(   4)
      endif

      ENDDO

      A1(4) = DCMPLX(Q(0),Q(3))
      A1(5) = DCMPLX(Q(1),Q(2))

      RETURN
      END


C------------------------------------------------------------------------------


      SUBROUTINE WWW_ATOWW2_had(P,N,BOS,A2,NW)

      IMPLICIT NONE

C ARGUMENTS
      DOUBLE PRECISION P(0:3,2:7)
      INTEGER N,BOS,NW
      DOUBLE COMPLEX A2(0:5)

C LOCAL VARIABLES
      DOUBLE PRECISION PBAR(0:3,1:4)
      INTEGER I,MU
      DOUBLE PRECISION RZERO
      PARAMETER(RZERO = 0.0D0)

C-----------BEGIN CODE--------------------

      DO I=1,4
         DO MU = 0,3
         PBAR(MU,I) = RZERO
         ENDDO
      ENDDO

      DO MU = 0,3
         PBAR(MU,1) = P(MU,4)
         PBAR(MU,2) = P(MU,5)
         PBAR(MU,3) = P(MU,6)
         PBAR(MU,4) = P(MU,7)
      ENDDO

      IF(BOS.EQ.343) THEN
         CALL WWWP_ATOWW2A_had(PBAR,N,A2(0),NW)
      ELSE
         print*, "This should not be called..."
         STOP
      ENDIF

      END


      SUBROUTINE WWWP_ATOWW2A_had(P,N,A2,NW)
C  
C Generated by MadGraph II, SLIGHTLY CHANGED
C RETURNS AMPLITUDE
C FOR PROCESS : a -> mu- vm~ vt ta+  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=4)
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=12)
      DOUBLE PRECISION     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      DOUBLE PRECISION P(0:3,1:4)                                    !LEPTON MOMENTA
      INTEGER N,NW
      DOUBLE COMPLEX A2(0:5)                                   !AMPLITUDES FOR HEL.DIRECTIONS 0:3
                                                           !4,5-COMPONENTS ARE MOMENTUM COMPONENTS

C  
C LOCAL VARIABLES 
C  
      DOUBLE PRECISION Q(0:3)
      INTEGER I,MU
      DOUBLE COMPLEX AMP(NGRAPHS)
      DOUBLE COMPLEX W(18,NWAVEFUNCS)

      INTEGER NHEL(2:5),IHEL
      DATA(NHEL(IHEL),IHEL=2,5)/-1,+1,-1,+1/
      SAVE NHEL

      LOGICAL LSWITCH
      PARAMETER(LSWITCH = .true.)

!LEPTON SPINORS + POLARISATION VECTORS GENERATED IN M2S_QQWWW
#include "tensor.inc"
C
C GLOBAL VARIABLES
C
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/global.inc"
#include "VBFNLO/utilities/coupl_haddecay.inc"
#include "VBFNLO/utilities/process.inc"

C -----------------------------------------------------------------------------
C BEGIN CODE
C -----------------------------------------------------------------------------

      IF (LSWITCH) THEN
         DO I=1,6
            W(I,2) = WMU1(I,N)
            W(I,3) = WVM1(I,N)
            W(I,4) = WVT(I,N)
            W(I,5) = WTP(I,N)
            W(I,6) = W1M(I,N)
         ENDDO
      ENDIF

      DO MU=0,3
         Q(MU) =  P(MU,1) + P(MU,2) + P(MU,3) + P(MU,4)
      ENDDO

      IF (.NOT.LSWITCH) THEN
         CALL OXXXXX(P(0,1   ),ZERO ,NHEL(2   ),+1,W(1,2   ))        
         CALL IXXXXX(P(0,2   ),ZERO ,NHEL(3   ),-1,W(1,3   ))        
         CALL OXXXXX(P(0,3   ),ZERO ,NHEL(4   ),+1,W(1,4   ))        
         CALL IXXXXX(P(0,4   ),LMASS,NHEL(5   ),-1,W(1,5   ))       
         CALL JIOXXX(W(1,3   ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,6   ))    
      ENDIF

      DO MU=0,3
      CALL TRIPLEWVCARTX(Q(0),ZERO,ZERO,MU,-1,W(1,1))
      CALL FVOXXX(W(1,4   ),W(1,6   ),GWF ,LMASS   ,ZERO    ,W(1,7   ))    
      CALL IOVXXX(W(1,5   ),W(1,7   ),W(1,1   ),GAL ,AMP(1   ))            
      CALL jwpawm_anomal3(W(1,1   ),W(1,6   ),W(1,8  ))               
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,8   ),GWF ,AMP(2   ))            
      CALL FVOXXX(W(1,2   ),W(1,1   ),GWM_ADL ,ZERO    ,ZERO    ,W(1,9   ))    ! W-
      CALL JIOXXX(W(1,3   ),W(1,9   ),GWF ,WMASS   ,WWIDTH  ,W(1,10  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,10  ),GWF ,AMP(3   ))            

      A2(MU) = +AMP(   1)+AMP(   2)+AMP(   3)

      if (procid .eq. WPWMhadWP) then
        ! new graphs for W- decay
      CALL FVIXXX(W(1,3   ),W(1,1   ),GWM_AUN ,ZERO    ,ZERO    ,W(1,11  ))    ! W-
      CALL JIOXXX(W(1,11  ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,12  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,12  ),GWF ,AMP(4   ))            
        A2(MU) = A2(MU) +AMP(   4)
      endif

      ENDDO

      A2(4) = DCMPLX(Q(0),Q(3))
      A2(5) = DCMPLX(Q(1),Q(2))

      RETURN
      END


C------------------------------------------------------------------------------


      SUBROUTINE WWW_ATOWW3_had(P,N,BOS,A3,NW)

      IMPLICIT NONE

C ARGUMENTS
      DOUBLE PRECISION P(0:3,2:7)
      INTEGER N,BOS,NW
      DOUBLE COMPLEX A3(0:5)

C LOCAL VARIABLES
      DOUBLE PRECISION PBAR(0:3,1:4)
      INTEGER I,MU
      DOUBLE PRECISION RZERO
      PARAMETER(RZERO = 0.0D0)

C-----------BEGIN CODE--------------------

      DO I=1,4
         DO MU = 0,3
         PBAR(MU,I) = RZERO
         ENDDO
      ENDDO

      DO MU = 0,3
         PBAR(MU,1) = P(MU,2)
         PBAR(MU,2) = P(MU,3)
         PBAR(MU,3) = P(MU,6)
         PBAR(MU,4) = P(MU,7)
      ENDDO

      IF(BOS.EQ.343) THEN
         print*, "This should not be called..."
         STOP
      ELSE
         CALL WWWM_ATOWW3A_had(PBAR,N,A3(0),NW)
      ENDIF

      END


      SUBROUTINE WWWM_ATOWW3A_had(P,N,A3,NW)
C  
C Generated by MadGraph II, SLIGHTLY CHANGED
C RETURNS AMPLITUDE
C FOR PROCESS : a -> ve e+ ta- vt~
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=4)
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=12)
      DOUBLE PRECISION     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      DOUBLE PRECISION P(0:3,1:4)                                    !LEPTON MOMENTA
      INTEGER N,NW
      DOUBLE COMPLEX A3(0:5)                                   !AMPLITUDES FOR HEL.DIRECTIONS 0:3
                                                           !4,5-COMPONENTS ARE MOMENTUM COMPONENTS
C  
C LOCAL VARIABLES
C  
      DOUBLE PRECISION Q(0:3)
      INTEGER I,MU
      DOUBLE COMPLEX AMP(NGRAPHS)
      DOUBLE COMPLEX W(18,NWAVEFUNCS)

      INTEGER NHEL(2:5),IHEL
      DATA(NHEL(IHEL),IHEL=2,5)/-1,+1,-1,+1/
      SAVE NHEL

      LOGICAL LSWITCH
      PARAMETER(LSWITCH = .true.)

!LEPTON SPINORS + POLARISATION VECTORS GENERATED IN M2S_QQWWW
#include "tensor.inc"

C
C GLOBAL VARIABLES
C
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/global.inc"
#include "VBFNLO/utilities/coupl_haddecay.inc"
#include "VBFNLO/utilities/process.inc"

C -----------------------------------------------------------------------------
C BEGIN CODE
C -----------------------------------------------------------------------------

      IF (LSWITCH) THEN
         DO I=1,6
            W(I,2) = WVE2(I,N)
            W(I,3) = WEP2(I,N)
            W(I,4) = WTM(I,N)
            W(I,5) = WVTBAR(I,N)
            W(I,6) = W1P(I,N)
         ENDDO
      ENDIF

      DO MU=0,3
         Q(MU) =  P(MU,1) + P(MU,2) + P(MU,3) + P(MU,4)
      ENDDO

      IF (.NOT.LSWITCH) THEN
         CALL OXXXXX(P(0,1   ),ZERO ,NHEL(2   ),+1,W(1,2   ))        
         CALL IXXXXX(P(0,2   ),ZERO ,NHEL(3   ),-1,W(1,3   ))        
         CALL OXXXXX(P(0,3   ),LMASS,NHEL(4   ),+1,W(1,4   ))       
         CALL IXXXXX(P(0,4   ),ZERO ,NHEL(5   ),-1,W(1,5   ))        
         CALL JIOXXX(W(1,3   ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,6   ))    
      ENDIF

      DO MU=0,3
      CALL TRIPLEWVCARTX(Q(0),ZERO,ZERO,MU,-1,W(1,1))
      CALL jwmwpa_anomal3(W(1,6   ),W(1,1   ),W(1,7  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,7   ),GWF ,AMP(1   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GAL ,LMASS   ,ZERO    ,W(1,8   ))    
      CALL IOVXXX(W(1,5   ),W(1,8   ),W(1,6   ),GWF ,AMP(2   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GWP_ADL ,ZERO    ,ZERO    ,W(1,9   ))    ! W+
      CALL JIOXXX(W(1,9   ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,10  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,10  ),GWF ,AMP(3   ))            

      A3(MU) = +AMP(   1)+AMP(   2)+AMP(   3)

      if (procid .eq. WMWPhadWM) then
        ! new graphs for W+ decay
      CALL FVOXXX(W(1,2   ),W(1,1   ),GWP_AUN ,ZERO    ,ZERO    ,W(1,11  ))    ! W+
      CALL JIOXXX(W(1,3   ),W(1,11  ),GWF ,WMASS   ,WWIDTH  ,W(1,12  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,12  ),GWF ,AMP(4   ))            
        A3(MU) = A3(MU) +AMP(   4)
      endif

      ENDDO

      A3(4) = DCMPLX(Q(0),Q(3))
      A3(5) = DCMPLX(Q(1),Q(2))

      RETURN
      END


C------------------------------------------------------------------------------


      SUBROUTINE WWW_ZTOWW1_had(P,N,BOS,Z1,NW)

      IMPLICIT NONE

C ARGUMENTS
      DOUBLE PRECISION P(0:3,2:7)
      INTEGER N,BOS,NW
      DOUBLE COMPLEX Z1(0:5)

C LOCAL VARIABLES
      DOUBLE PRECISION PBAR(0:3,1:4)
      INTEGER I,MU
      DOUBLE PRECISION RZERO
      PARAMETER(RZERO = 0.0D0)

C-----------BEGIN CODE--------------------

      DO I=1,4
         DO MU = 0,3
         PBAR(MU,I) = RZERO
         ENDDO
      ENDDO

      DO MU = 0,3
         PBAR(MU,1) = P(MU,2)
         PBAR(MU,2) = P(MU,3)
         PBAR(MU,3) = P(MU,4)
         PBAR(MU,4) = P(MU,5)
      ENDDO

      CALL WWW_ZTOWW1A_had(PBAR,N,Z1(0),BOS)

      END


      SUBROUTINE WWW_ZTOWW1A_had(P,N,Z1,BOS)
C  
C Generated by MadGraph II, CHANGED SLIGHTLY
C RETURNS AMPLITUDE
C FOR PROCESS : z -> ve e+ mu- vm~
C
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=5)
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=13)
      DOUBLE PRECISION     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS
C  
      DOUBLE PRECISION P(0:3,1:4)                                    !LEPTON MOMENTA
      INTEGER N,BOS
      DOUBLE COMPLEX Z1(0:5)                                   !AMPLITUDES FOR HEL.DIRECTIONS 0:3
                                                           !4,5-COMPONENTS ARE MOMENTUM COMPONENTS
C  
C LOCAL VARIABLES 
C  
      DOUBLE PRECISION Q(0:3)
      INTEGER I,MU
      DOUBLE COMPLEX AMP(NGRAPHS)
      DOUBLE COMPLEX W(18,NWAVEFUNCS)

      INTEGER NHEL(2:5),IHEL
      DATA(NHEL(IHEL),IHEL=2,5)/-1,+1,-1,+1/
      SAVE NHEL

      LOGICAL LSWITCH
      PARAMETER(LSWITCH = .true.)

!LEPTON SPINORS + POLARISATION VECTORS GENERATED IN M2S_QQWWW
#include "tensor.inc"

C
C GLOBAL VARIABLES
C
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/global.inc"
#include "VBFNLO/utilities/coupl_haddecay.inc"
#include "VBFNLO/utilities/process.inc"

C -----------------------------------------------------------------------------
C BEGIN CODE
C -----------------------------------------------------------------------------

      IF (LSWITCH) THEN
      IF(BOS.EQ.343) THEN
         DO I=1,6
            W(I,2) = WVE1(I,N)
            W(I,3) = WEP1(I,N)
            W(I,4) = WMU1(I,N)
            W(I,5) = WVM1(I,N)
            W(I,6) = WP1(I,N)
         ENDDO
      ELSE
         DO I=1,6
            W(I,2) = WVE2(I,N)
            W(I,3) = WEP2(I,N)
            W(I,4) = WMU2(I,N)
            W(I,5) = WVM2(I,N)
            W(I,6) = W1P(I,N)
         ENDDO
      ENDIF
      ENDIF

      DO MU=0,3
         Q(MU) =  P(MU,1) + P(MU,2) + P(MU,3) + P(MU,4)
      ENDDO

      IF (.NOT.LSWITCH) THEN
         CALL OXXXXX(P(0,1   ),ZERO ,NHEL(2   ),+1,W(1,2   ))        
         CALL IXXXXX(P(0,2   ),ZERO ,NHEL(3   ),-1,W(1,3   ))        
         CALL OXXXXX(P(0,3   ),ZERO ,NHEL(4   ),+1,W(1,4   ))        
         CALL IXXXXX(P(0,4   ),ZERO ,NHEL(5   ),-1,W(1,5   ))        
         CALL JIOXXX(W(1,3   ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,6   ))    
      ENDIF

      DO MU=0,3
      CALL TRIPLEWVCARTX(Q(0),ZMASS,ZWIDTH,MU,-1,W(1,1))
      CALL FVOXXX(W(1,4   ),W(1,6   ),GWF ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL IOVXXX(W(1,5   ),W(1,7   ),W(1,1   ),GWM_ZUN ,AMP(1   ))            ! W-
      CALL jwmwpz_anomal3(W(1,6   ),W(1,1   ),W(1,8  )) 
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,8   ),GWF ,AMP(2   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GWM_ZDL ,ZERO    ,ZERO    ,W(1,9   ))    ! W-
      CALL IOVXXX(W(1,5   ),W(1,9   ),W(1,6   ),GWF ,AMP(3   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GWP_ZDL ,ZERO    ,ZERO    ,W(1,10  ))    ! W+
      CALL JIOXXX(W(1,10  ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,11  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,11  ),GWF ,AMP(4   ))            
      CALL FVOXXX(W(1,2   ),W(1,1   ),GWP_ZUN ,ZERO    ,ZERO    ,W(1,12  ))    ! W+
      CALL JIOXXX(W(1,3   ),W(1,12  ),GWF ,WMASS   ,WWIDTH  ,W(1,13  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,13  ),GWF ,AMP(5   ))            

      Z1(MU) = +AMP(   1)+AMP(   2)+AMP(   3)+AMP(   4)+AMP(   5)
      ENDDO

      Z1(4) = DCMPLX(Q(0),Q(3))
      Z1(5) = DCMPLX(Q(1),Q(2))


      RETURN
      END


C------------------------------------------------------------------------------


      SUBROUTINE WWW_ZTOWW2_had(P,N,BOS,Z2,NW)

      IMPLICIT NONE

C ARGUMENTS
      DOUBLE PRECISION P(0:3,2:7)
      INTEGER N,BOS,NW
      DOUBLE COMPLEX Z2(0:5)

C LOCAL VARIABLES
      DOUBLE PRECISION PBAR(0:3,1:4)
      INTEGER I,MU
      DOUBLE PRECISION RZERO
      PARAMETER(RZERO = 0.0D0)

C-----------BEGIN CODE--------------------

      DO I=1,4
         DO MU = 0,3
         PBAR(MU,I) = RZERO
         ENDDO
      ENDDO

      DO MU = 0,3
         PBAR(MU,1) = P(MU,4)
         PBAR(MU,2) = P(MU,5)
         PBAR(MU,3) = P(MU,6)
         PBAR(MU,4) = P(MU,7)
      ENDDO

      IF(BOS.EQ.343) THEN
         CALL WWWP_ZTOWW2A_had(PBAR,N,Z2(0),NW)
      ELSE
         print*, "This should not be called..."
         STOP
      ENDIF

      END


      SUBROUTINE WWWP_ZTOWW2A_had(P,N,Z2,NW)
C  
C Generated by MadGraph II, CHANGED SLIGHTLY
C RETURNS AMPLITUDE
C FOR PROCESS : z -> mu- vm~ vt ta+
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=5)
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=13)
      DOUBLE PRECISION     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      DOUBLE PRECISION P(0:3,1:4)                                    !LEPTON MOMENTA
      INTEGER N,NW
      DOUBLE COMPLEX Z2(0:5)                                    !AMPLITUDES FOR HEL.DIRECTIONS 0:3
                                                           !4,5-COMPONENTS ARE MOMENTUM COMPONENTS
C  
C LOCAL VARIABLES 
C  
      DOUBLE PRECISION Q(0:3)
      INTEGER I,MU
      DOUBLE COMPLEX AMP(NGRAPHS)
      DOUBLE COMPLEX W(18,NWAVEFUNCS)

      INTEGER NHEL(2:5),IHEL
      DATA(NHEL(IHEL),IHEL=2,5)/-1,+1,-1,+1/
      SAVE NHEL

      LOGICAL LSWITCH
      PARAMETER(LSWITCH = .true.)

!LEPTON SPINORS + POLARISATION VECTORS GENERATED IN M2S_QQWWW
#include "tensor.inc"

C
C GLOBAL VARIABLES
C
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/global.inc"
#include "VBFNLO/utilities/coupl_haddecay.inc"
#include "VBFNLO/utilities/process.inc"

C -----------------------------------------------------------------------------
C BEGIN CODE
C -----------------------------------------------------------------------------

      IF (LSWITCH) THEN
         DO I=1,6
            W(I,2) = WMU1(I,N)
            W(I,3) = WVM1(I,N)
            W(I,4) = WVT(I,N)
            W(I,5) = WTP(I,N)
            W(I,6) = W1M(I,N)
         ENDDO
      ENDIF

      DO MU=0,3
         Q(MU) = P(MU,1) + P(MU,2) + P(MU,3) + P(MU,4)
      ENDDO

      IF (.NOT.LSWITCH) THEN
         CALL OXXXXX(P(0,1   ),ZERO ,NHEL(2   ),+1,W(1,2   ))
         CALL IXXXXX(P(0,2   ),ZERO ,NHEL(3   ),-1,W(1,3   ))
         CALL OXXXXX(P(0,3   ),ZERO ,NHEL(4   ),+1,W(1,4   ))
         CALL IXXXXX(P(0,4   ),LMASS,NHEL(5   ),-1,W(1,5   ))
         CALL JIOXXX(W(1,3   ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,6   ))    
      ENDIF

      DO MU=0,3
      CALL TRIPLEWVCARTX(Q(0),ZMASS,ZWIDTH,MU,-1,W(1,1))
      CALL FVOXXX(W(1,4   ),W(1,6   ),GWF ,LMASS   ,ZERO    ,W(1,7   ))    
      CALL IOVXXX(W(1,5   ),W(1,7   ),W(1,1   ),GZL ,AMP(1   ))            
      CALL jwpzwm_anomal3(W(1,1   ),W(1,6   ),W(1,8  ))       
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,8   ),GWF ,AMP(2   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GZN ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,5   ),W(1,9   ),W(1,6   ),GWF ,AMP(3   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GWM_ZUN ,ZERO    ,ZERO    ,W(1,10  ))    ! W-
      CALL JIOXXX(W(1,10  ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,11  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,11  ),GWF ,AMP(4   ))            
      CALL FVOXXX(W(1,2   ),W(1,1   ),GWM_ZDL ,ZERO    ,ZERO    ,W(1,12  ))    ! W-
      CALL JIOXXX(W(1,3   ),W(1,12  ),GWF ,WMASS   ,WWIDTH  ,W(1,13  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,13  ),GWF ,AMP(5   ))            

      Z2(MU) = AMP(   1)+AMP(   2)+AMP(   3)+AMP(   4)+AMP(   5)
      ENDDO

      Z2(4) = DCMPLX(Q(0),Q(3))
      Z2(5) = DCMPLX(Q(1),Q(2))

      RETURN
      END


C------------------------------------------------------------------------------


      SUBROUTINE WWW_ZTOWW3_had(P,N,BOS,Z3,NW)

      IMPLICIT NONE

C ARGUMENTS
      DOUBLE PRECISION P(0:3,2:7)
      INTEGER N,BOS,NW
      DOUBLE COMPLEX Z3(0:5)

C LOCAL VARIABLES
      DOUBLE PRECISION PBAR(0:3,1:4)
      INTEGER I,MU
      DOUBLE PRECISION RZERO
      PARAMETER(RZERO = 0.0D0)

C-----------BEGIN CODE--------------------

      DO I=1,4
         DO MU = 0,3
         PBAR(MU,I) = RZERO
         ENDDO
      ENDDO

      DO MU = 0,3
         PBAR(MU,1) = P(MU,2)
         PBAR(MU,2) = P(MU,3)
         PBAR(MU,3) = P(MU,6)
         PBAR(MU,4) = P(MU,7)
      ENDDO

      IF(BOS.EQ.343) THEN
         print*, "This should not be called..."
         STOP
      ELSE
         CALL WWWM_ZTOWW3A_had(PBAR,N,Z3(0),NW)
      ENDIF

      END


      SUBROUTINE WWWM_ZTOWW3A_had(P,N,Z3,NW)
C  
C Generated by MadGraph II, SLIGHTLY CHANGED
C RETURNS AMPLITUDE
C FOR PROCESS : z -> ve e+ ta- vt~
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=5)
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=13)
      DOUBLE PRECISION     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS
C  
      DOUBLE PRECISION P(0:3,1:4)                                    !LEPTON MOMENTA
      INTEGER N,NW
      DOUBLE COMPLEX Z3(0:5)                                   !AMPLITUDES FOR HEL.DIRECTIONS 0:3
                                                           !4,5-COMPONENTS ARE MOMENTUM COMPONENTS
C  
C LOCAL VARIABLES
C  
      DOUBLE PRECISION Q(0:3)
      INTEGER I,MU
      DOUBLE COMPLEX AMP(NGRAPHS)
      DOUBLE COMPLEX W(18,NWAVEFUNCS)

      INTEGER NHEL(2:5),IHEL
      DATA(NHEL(IHEL),IHEL=2,5)/-1,+1,-1,+1/
      SAVE NHEL

      LOGICAL LSWITCH
      PARAMETER(LSWITCH = .true.)

!LEPTON SPINORS + POLARISATION VECTORS GENERATED IN M2S_QQWWW
#include "tensor.inc"

C
C GLOBAL VARIABLES
C
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/global.inc"
#include "VBFNLO/utilities/coupl_haddecay.inc"
#include "VBFNLO/utilities/process.inc"

C -----------------------------------------------------------------------------
C BEGIN CODE
C -----------------------------------------------------------------------------

      IF (LSWITCH) THEN
         DO I=1,6
            W(I,2) = WVE2(I,N)
            W(I,3) = WEP2(I,N)
            W(I,4) = WTM(I,N)
            W(I,5) = WVTBAR(I,N)
            W(I,6) = W1P(I,N)
         ENDDO
      ENDIF

      DO MU=0,3
         Q(MU) = P(MU,1) + P(MU,2) + P(MU,3) + P(MU,4)
      ENDDO

      IF (.NOT.LSWITCH) THEN
         CALL OXXXXX(P(0,1   ),ZERO ,NHEL(2   ),+1,W(1,2   ))        
         CALL IXXXXX(P(0,2   ),ZERO ,NHEL(3   ),-1,W(1,3   ))        
         CALL OXXXXX(P(0,3  ),LMASS,NHEL(4   ),+1,W(1,4   ))       
         CALL IXXXXX(P(0,4   ),ZERO ,NHEL(5   ),-1,W(1,5   ))        
         CALL JIOXXX(W(1,3   ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,6   ))    
      ENDIF

      DO MU=0,3
      CALL TRIPLEWVCARTX(Q(0),ZMASS,ZWIDTH,MU,-1,W(1,1))
      CALL FVOXXX(W(1,4   ),W(1,6   ),GWF ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL IOVXXX(W(1,5   ),W(1,7   ),W(1,1   ),GZN ,AMP(1   ))            
      CALL jwmwpz_anomal3(W(1,6   ),W(1,1   ),W(1,8  ))      
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,8   ),GWF ,AMP(2   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GZL ,LMASS   ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,5   ),W(1,9   ),W(1,6   ),GWF ,AMP(3   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GWP_ZDL ,ZERO    ,ZERO    ,W(1,10  ))    ! W+
      CALL JIOXXX(W(1,10  ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,11  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,11  ),GWF ,AMP(4   ))            
      CALL FVOXXX(W(1,2   ),W(1,1   ),GWP_ZUN ,ZERO    ,ZERO    ,W(1,12  ))    ! W+
      CALL JIOXXX(W(1,3   ),W(1,12  ),GWF ,WMASS   ,WWIDTH  ,W(1,13  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,13  ),GWF ,AMP(5   ))            

      Z3(MU) = +AMP(   1)+AMP(   2)+AMP(   3)+AMP(   4)+AMP(   5)
      ENDDO

      Z3(4) = DCMPLX(Q(0),Q(3))
      Z3(5) = DCMPLX(Q(1),Q(2))

      RETURN
      END


