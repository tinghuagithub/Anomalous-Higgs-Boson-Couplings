      subroutine tribosATOZA_anomal(v,N,h,za,NW)

      IMPLICIT NONE

      DOUBLE PRECISION v(0:3,6)
      DOUBLE PRECISION P(0:3,2:4)
      complex*16 za(0:5)
      integer lsign(2:4,4),ll,mu,h,N
      integer NW ! = 0: all diagrams, = 1: no non resonant diagrams

      ! possible lepton helicities:
      data (lsign(ll,1),ll=2,4) / -1, -1, +1/  !h=1
      data (lsign(ll,2),ll=2,4) / +1, +1, +1/  !h=2
      data (lsign(ll,3),ll=2,4) / -1, -1, -1/  !h=3
      data (lsign(ll,4),ll=2,4) / +1, +1, -1/  !h=4

      do mu = 0,3
         P(mu,2) = v(mu,3)
         P(mu,3) = v(mu,4)
         P(mu,4) = v(mu,5)
      enddo

      call tribosATOZA1_anomal(P,N,lsign(2,h),za(0),NW)

      ! helicity combi nr.h is selected

      end

c ------------------------------------------------------------

      SUBROUTINE tribosATOZA1_anomal(P,N,lsign,za,NW)
C  
C Generated by MadGraph II                                              
C MadGraph StandAlone Version
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : a -> mu- mu+ a  
C  
C Crossing   1 is a mu+ -> mu+ a  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  2) 
      INTEGER    NWAVEFUNCS 
      PARAMETER (NWAVEFUNCS=  6) 
      DOUBLE PRECISION     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      DOUBLE PRECISION P(0:3,2:4), Q(0:3)
      INTEGER N
      COMPLEX*16 za(0:5)
      INTEGER lsign(2:4)
      integer NW ! = 0: all diagrams, = 1: no non resonant diagrams
C
C LOCAL VARIABLES
C
      INTEGER I, mu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
c  lepton spinors and W+-, Z/A polarization vectors
#include "tensor.inc"

      logical lswitch
      parameter (lswitch=.true.)

C
C GLOBAL VARIABLES
C
#include "VBFNLO/utilities/coupl.inc"
C
C ----------
C BEGIN CODE
C ----------
      if (lswitch) then      ! read in lepton an W states from common block
         do i=1,6
            w(i,2)  = wmu(i,N)
            w(i,3)  = wmp(i,N)
            w(i,4)  = wa(i,N)
         enddo
      endif

      do mu = 0,3
         q(mu) = p(mu,2)+p(mu,3)+p(mu,4)
      enddo
c
      if (.not.lswitch) then
         CALL OXXXXX(P(0,2   ),ZERO , lsign(2),+1,W(1,2   )) !mu-
         CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3),-1,W(1,3   )) !mu+
         CALL VXXXXX(P(0,4   ),ZERO , lsign(4),+1,W(1,4   )) !A
         print*," ve ",(wmu(i,N)/w(i,2),i=1,6)
         print*," ep ",(wmp(i,N)/w(i,3),i=1,6)
         print*," A  ",( wa(i,N)/w(i,4),i=1,6)
      endif
      do mu = 0,3
      CALL TRIBOSVCARTX(Q(0),ZERO ,ZERO, MU,-1,W(1,1   ))
      CALL FVIXXX(W(1,3   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,5   ))    
      CALL IOVXXX(W(1,5   ),W(1,2   ),W(1,4   ),GAL ,AMP(1   ))            
      CALL FVOXXX(W(1,2   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL IOVXXX(W(1,3   ),W(1,6   ),W(1,4   ),GAL ,AMP(2   ))            
      za(mu) = AMP(   1)+AMP(   2)

      enddo

      za(4) = dcmplx(q(0),q(3))
      za(5) = dcmplx(q(1),q(2))
c
      END

c ------------------------------------------------------------

      subroutine tribosZTOZA_anomal(v,N,h,za,NW)

      IMPLICIT NONE

      DOUBLE PRECISION v(0:3,6)
      DOUBLE PRECISION P(0:3,2:4)
      complex*16 za(0:5)
      integer lsign(2:4,4),ll,mu,h,N
      integer NW ! = 0: all diagrams, = 1: no non resonant diagrams

      ! possible lepton helicities:
      data (lsign(ll,1),ll=2,4) / -1, -1, +1/  !h=1
      data (lsign(ll,2),ll=2,4) / +1, +1, +1/  !h=2
      data (lsign(ll,3),ll=2,4) / -1, -1, -1/  !h=3
      data (lsign(ll,4),ll=2,4) / +1, +1, -1/  !h=4

      do mu = 0,3
         P(mu,2) = v(mu,3)
         P(mu,3) = v(mu,4)
         P(mu,4) = v(mu,5)
      enddo

      call tribosZTOZA1_anomal(P,N,lsign(2,h),za(0),NW)

      ! helicity combi nr.h is selected

      end

c ------------------------------------------------------------

      SUBROUTINE tribosZTOZA1_anomal(P,N,lsign,za,NW)
C  
C Generated by MadGraph II                                              
C MadGraph StandAlone Version
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : z -> mu- mu+ a  
C  
C Crossing   1 is z mu+ -> mu+ a  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  2) 
      INTEGER    NWAVEFUNCS 
      PARAMETER (NWAVEFUNCS=  6) 
      DOUBLE PRECISION     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      DOUBLE PRECISION P(0:3,2:4), Q(0:3)
      INTEGER N
      COMPLEX*16 za(0:5)
      INTEGER lsign(2:4)
      integer NW ! = 0: all diagrams, = 1: no non resonant diagrams
C
C LOCAL VARIABLES
C
      INTEGER I, mu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
c  lepton spinors and W+-, Z/A polarization vectors
#include "tensor.inc"

      logical lswitch
      parameter (lswitch=.true.)

C
C GLOBAL VARIABLES
C
#include "VBFNLO/utilities/coupl.inc"
C
C ----------
C BEGIN CODE
C ----------
      if (lswitch) then      ! read in lepton an W states from common block
         do i=1,6
            w(i,2)  = wmu(i,N)
            w(i,3)  = wmp(i,N)
            w(i,4)  = wa(i,N)
         enddo
      endif

      do mu = 0,3
         q(mu) = p(mu,2)+p(mu,3)+p(mu,4)
      enddo
c
      if (.not.lswitch) then
         CALL OXXXXX(P(0,2   ),ZERO , lsign(2),+1,W(1,2   )) !mu-
         CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3),-1,W(1,3   )) !mu+
         CALL VXXXXX(P(0,4   ),ZERO , lsign(4),+1,W(1,4   )) !A
         print*," ve ",(wmu(i,N)/w(i,2),i=1,6)
         print*," ep ",(wmp(i,N)/w(i,3),i=1,6)
         print*," A  ",( wa(i,N)/w(i,4),i=1,6)
      endif
      do mu = 0,3
      CALL TRIBOSVCARTX(Q(0),ZMASS ,ZWIDTH, MU,-1,W(1,1   ))
      CALL FVIXXX(W(1,3   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,5   ))    
      CALL IOVXXX(W(1,5   ),W(1,2   ),W(1,4   ),GAL ,AMP(1   ))            
      CALL FVOXXX(W(1,2   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL IOVXXX(W(1,3   ),W(1,6   ),W(1,4   ),GAL ,AMP(2   ))            
      za(mu) = AMP(   1)+AMP(   2)

      enddo

      za(4) = dcmplx(q(0),q(3))
      za(5) = dcmplx(q(1),q(2))
c
      END

