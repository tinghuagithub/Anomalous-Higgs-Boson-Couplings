c
c in this file leptonic tensors needed for qq -> ZZW, ZZW -> 6l
c are computed for specific helicities (h)
c
c ------------------------------------------------------------
c ------------------------------------------------------------

      SUBROUTINE ZZW_WPtoWZ(P2, P3, P4, P5, N, lsign, ZW, NW)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : w+ -> e- e+ vt ta+  
C  
      IMPLICIT NONE
C
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   6) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=  13) 
      DOUBLE PRECISION     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      DOUBLE PRECISION P2(0:3), P3(0:3), P4(0:3), P5(0:3)
      DOUBLE PRECISION Q(0:3)
      INTEGER N
      COMPLEX*16 ZW(0:5)
      INTEGER lsign
      integer NW ! = 0: all diagrams, = 1: no non resonant diagrams

C  
C LOCAL VARIABLES 
C  
      INTEGER I, mu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"         
#include "tensor.inc"         
C                                                                          
C ----------
C BEGIN CODE
C ----------
      do mu = 0,3
         q(mu) = p2(mu)+p3(mu)+p4(mu)+p5(mu)
      enddo

      do i =1,6
         w(i,4) = ztm(i,N)
         w(i,5) = ztp(i,N)
      enddo

      CALL OXXXXX(P2(0), ZERO, lsign,+1, W(1,2   ))        
      CALL IXXXXX(P3(0), ZERO,-lsign,-1, W(1,3   ))  

      do mu = 0,3
      CALL TRIBOSVCARTX(Q(0),WMASS ,WWIDTH, MU,-1,W(1,1   ))
      CALL JIOXXX(W(1,3   ),W(1,2   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,6   ))    
      CALL FVOXXX(W(1,4   ),W(1,6   ),GZN ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL IOVXXX(W(1,5   ),W(1,7   ),W(1,1   ),GWF ,AMP(1   ))            
      CALL JIOXXX(W(1,3   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,8   ))    
      CALL JVVXXX(W(1,8   ),W(1,1   ),GWWA ,WMASS   ,WWIDTH  ,W(1,         
     &     9   ))                                                          
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,9   ),GWF ,AMP(2   ))            
      CALL JVVXXX(W(1,6   ),W(1,1   ),GWWZ ,WMASS   ,WWIDTH  ,W(1,         
     &     10  ))                                                          
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,10  ),GWF ,AMP(3   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GWF ,LMASS   ,ZERO    ,W(1,11  ))    
      CALL IOVXXX(W(1,5   ),W(1,11  ),W(1,8   ),GAL ,AMP(4   ))            
      CALL IOVXXX(W(1,5   ),W(1,11  ),W(1,6   ),GZL ,AMP(5   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,12  ))    
      CALL JIOXXX(W(1,12  ),W(1,2   ),GWF ,WMASS   ,WWIDTH  ,W(1,13  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,13  ),GWF ,AMP(6   ))    
      if (NW.eq.0) then     
      ZW(mu) = +AMP(   1)+AMP(   2)+AMP(   3)+AMP(   4)+AMP(   5)
     &         +AMP(   6)
      else if (NW.eq.1) then
         ZW(mu) = +AMP(   3)      
      endif
      enddo
      ZW(4) = dcmplx(q(0),q(3))
      ZW(5) = dcmplx(q(1),q(2))
c
      return
      END

c----------------------------------------------------------------------

      SUBROUTINE ZZW_WMtoWZ(P2, P3, P4, P5, N, lsign, ZW, NW)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : w- -> e- e+ ta- vt~  
C  
      IMPLICIT NONE
C
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   6) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=  14) 
      DOUBLE PRECISION     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      DOUBLE PRECISION P2(0:3), P3(0:3), P4(0:3), P5(0:3)
      DOUBLE PRECISION Q(0:3)
      INTEGER N
      COMPLEX*16 ZW(0:5)
      INTEGER lsign
      integer NW ! = 0: all diagrams, = 1: no non resonant diagrams
C  
C LOCAL VARIABLES 
C  
      INTEGER I, mu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"   
#include "tensor.inc"       
C                                                                          
C ----------
C BEGIN CODE
C ----------
      do mu = 0,3
         q(mu) = p2(mu)+p3(mu)+p4(mu)+p5(mu)
      enddo

      do i =1,6
         w(i,4) = ztm(i,N)
         w(i,5) = ztp(i,N)
      enddo

      CALL OXXXXX(P2(0), ZERO, lsign,+1, W(1,2   ))        
      CALL IXXXXX(P3(0), ZERO,-lsign,-1, W(1,3   ))  

      do mu = 0,3
      CALL TRIBOSVCARTX(Q(0),WMASS ,WWIDTH, MU,-1,W(1,1   ))
      CALL JIOXXX(W(1,3   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL FVOXXX(W(1,4   ),W(1,6   ),GAL ,LMASS   ,ZERO    ,W(1,7   ))    
      CALL IOVXXX(W(1,5   ),W(1,7   ),W(1,1   ),GWF ,AMP(1   ))            
      CALL JIOXXX(W(1,3   ),W(1,2   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,8   ))    
      CALL FVOXXX(W(1,4   ),W(1,8   ),GZL ,LMASS   ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,5   ),W(1,9   ),W(1,1   ),GWF ,AMP(2   ))            
      CALL JVVXXX(W(1,1   ),W(1,6   ),GWWA ,WMASS   ,WWIDTH  ,W(1,         
     &     10  ))                                                          
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,10  ),GWF ,AMP(3   ))            
      CALL JVVXXX(W(1,1   ),W(1,8   ),GWWZ ,WMASS   ,WWIDTH  ,W(1,         
     &     11  ))                                                          
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,11  ),GWF ,AMP(4   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,12  ))    
      CALL IOVXXX(W(1,5   ),W(1,12  ),W(1,8   ),GZN ,AMP(5   ))            
      CALL FVOXXX(W(1,2   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,13  ))    
      CALL JIOXXX(W(1,3   ),W(1,13  ),GWF ,WMASS   ,WWIDTH  ,W(1,14  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,14  ),GWF ,AMP(6   ))            
      if (NW.eq.0) then
      ZW(mu) = +AMP(   1)+AMP(   2)+AMP(   3)+AMP(   4)+AMP(   5)
     &         +AMP(   6)
      else if (NW.eq.1) then
         ZW(mu) = +AMP(   4)      
      endif
      enddo
      ZW(4) = dcmplx(q(0),q(3))
      ZW(5) = dcmplx(q(1),q(2))
c
      return
      END

c----------------------------------------------------------------------
