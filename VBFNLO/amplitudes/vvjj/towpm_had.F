       
      subroutine WPPTOWPP_had(q1,q2,p,wwtens)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : w+ w+ -> e+ ve mu+ vm  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  37) 
      INTEGER    NWAVEFUNCS 
      PARAMETER (NWAVEFUNCS=  42) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 wwtens(0:3,0:3)
C  
C LOCAL VARIABLES 
C  
      INTEGER I, MU, NU
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
      INTEGER NHEL(3:6), ihel
      DATA (NHEL(IHEL),IHEL=3,6) / +1,-1,-1,+1/
      Save NHEL
c  lepton spinors and W+- polarization vectors
#include "tensor.inc"

      logical lswitch
      parameter (lswitch=.true.)
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/global.inc"
#include "VBFNLO/utilities/coupl_haddecay.inc"
#include "VBFNLO/utilities/process.inc"
c
C ----------
C BEGIN CODE
C ----------
c read in lepton an W states from common block:
         do i=1,6
            w(i,3) = wel(i)
            w(i,4) = wve(i)
            w(i,5) = wmu(i)
            w(i,6) = wvu(i)
         enddo

c	print*,'q1,q2 in ww = ',q1(0),q2(0)

      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),wMASS ,wwidth, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),wMASS ,wwidth, NU,-1,W(1,2   )) 
               
      CALL FVIXXX(W(1,3   ),W(1,2   ),GWF ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL JIOXXX(W(1,7   ),W(1,4   ),GWP_ZUN ,ZMASS   ,ZWIDTH  ,W(1,8   ))    
      CALL FVIXXX(W(1,5   ),W(1,8   ),GZL ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,9   ),W(1,6   ),W(1,1   ),GWF ,AMP(1   )) 
      CALL jwpzwm_anomal3(W(1,8   ),W(1,1   ),W(1,10  )) 
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,10  ),GWF ,AMP(2   ))            
      CALL FVIXXX(W(1,5   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL IOVXXX(W(1,11  ),W(1,6   ),W(1,8   ),GZN ,AMP(3   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,12  ))    
      CALL FVOXXX(W(1,6   ),W(1,2   ),GWF ,ZERO    ,ZERO    ,W(1,13  ))    
      CALL JIOXXX(W(1,3   ),W(1,12  ),GWP_ADL ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL IOVXXX(W(1,5   ),W(1,13  ),W(1,14  ),GAL ,AMP(4   ))            
      CALL JIOXXX(W(1,3   ),W(1,12  ),GWP_ZDL ,ZMASS   ,ZWIDTH  ,W(1,15  ))    
      CALL IOVXXX(W(1,5   ),W(1,13  ),W(1,15  ),GZL ,AMP(5   ))            
      CALL JIOXXX(W(1,5   ),W(1,6   ),GWF ,WMASS   ,WWIDTH  ,W(1,16  )) 
      CALL wwa_anomal3(W(1,2   ),W(1,16  ),W(1,14  ),AMP(6   )) 
      CALL wwz_anomal3(W(1,2   ),W(1,16  ),W(1,15  ),AMP(7   ))  
      CALL FVIXXX(W(1,5   ),W(1,2   ),GWF ,ZERO    ,ZERO    ,W(1,17  ))    
      CALL JIOXXX(W(1,17  ),W(1,6   ),GZN ,ZMASS   ,ZWIDTH  ,W(1,18  ))    
      CALL IOVXXX(W(1,3   ),W(1,12  ),W(1,18  ),GWP_ZDL ,AMP(8   ))            
      CALL JIOXXX(W(1,7   ),W(1,12  ),GWF ,WMASS   ,WWIDTH  ,W(1,19  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,19  ),GWF ,AMP(9   ))            
      CALL FVOXXX(W(1,4   ),W(1,2   ),GWF ,ZERO    ,ZERO    ,W(1,20  ))    
      CALL FVOXXX(W(1,6   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,21  ))    
      CALL JIOXXX(W(1,3   ),W(1,20  ),GWP_ADL ,ZERO    ,ZERO    ,W(1,22  ))    
      CALL IOVXXX(W(1,5   ),W(1,21  ),W(1,22  ),GAL ,AMP(10  ))            
      CALL JIOXXX(W(1,3   ),W(1,20  ),GWP_ZDL ,ZMASS   ,ZWIDTH  ,W(1,23  ))    
      CALL IOVXXX(W(1,5   ),W(1,21  ),W(1,23  ),GZL ,AMP(11  )) 
      CALL wwa_anomal3(W(1,1   ),W(1,16  ),W(1,22  ),AMP(12  )) 
      CALL wwz_anomal3(W(1,1   ),W(1,16  ),W(1,23  ),AMP(13  ))  
      CALL JIOXXX(W(1,11  ),W(1,6   ),GZN ,ZMASS   ,ZWIDTH  ,W(1,24  ))    
      CALL IOVXXX(W(1,3   ),W(1,20  ),W(1,24  ),GWP_ZDL ,AMP(14  ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,25  ))    
      CALL JIOXXX(W(1,25  ),W(1,4   ),GWP_ZUN ,ZMASS   ,ZWIDTH  ,W(1,26  ))    
      CALL FVIXXX(W(1,5   ),W(1,26  ),GZL ,ZERO    ,ZERO    ,W(1,27  ))    
      CALL IOVXXX(W(1,27  ),W(1,6   ),W(1,2   ),GWF ,AMP(15  ))  
      CALL jwpzwm_anomal3(W(1,26  ),W(1,2   ),W(1,28  )) 
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,28  ),GWF ,AMP(16  ))            
      CALL IOVXXX(W(1,17  ),W(1,6   ),W(1,26  ),GZN ,AMP(17  ))            
      CALL JIOXXX(W(1,25  ),W(1,20  ),GWF ,WMASS   ,WWIDTH  ,W(1,29  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,29  ),GWF ,AMP(18  ))            
      CALL JIOXXX(W(1,3   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,30  )) 
      CALL jaww_anomal3(W(1,2   ),W(1,30  ),W(1,31  ))  
      CALL IOVXXX(W(1,5   ),W(1,21  ),W(1,31  ),GAL ,AMP(19  )) 
      CALL jzww_anomal3(W(1,2   ),W(1,30  ),W(1,32  ))   
      CALL IOVXXX(W(1,5   ),W(1,21  ),W(1,32  ),GZL ,AMP(20  ))            
      CALL IOVXXX(W(1,11  ),W(1,13  ),W(1,30  ),GWF ,AMP(21  ))   
      CALL wwa_anomal3(W(1,1   ),W(1,16  ),W(1,31  ),AMP(22  ))  
      CALL wwz_anomal3(W(1,1   ),W(1,16  ),W(1,32  ),AMP(23  )) 
      CALL jhww_anomal3(W(1,2   ),W(1,30  ),W(1,33  ))                                                          
      CALL wwh_anomal3(W(1,1   ),W(1,16  ),W(1,33  ),AMP(24  )) 
      CALL wwz_anomal3(W(1,2   ),W(1,30  ),W(1,24  ),AMP(25  )) 
      CALL IOVXXX(W(1,17  ),W(1,21  ),W(1,30  ),GWF ,AMP(26  )) 
      CALL jaww_anomal3(W(1,1   ),W(1,30  ),W(1,34  ))  
      CALL IOVXXX(W(1,5   ),W(1,13  ),W(1,34  ),GAL ,AMP(27  )) 
      CALL jzww_anomal3(W(1,1   ),W(1,30  ),W(1,35  ))   
      CALL IOVXXX(W(1,5   ),W(1,13  ),W(1,35  ),GZL ,AMP(28  )) 
      CALL wwa_anomal3(W(1,2   ),W(1,16  ),W(1,34  ),AMP(29  )) 
      CALL wwz_anomal3(W(1,2   ),W(1,16  ),W(1,35  ),AMP(30  )) 
      CALL jhww_anomal3(W(1,1   ),W(1,30  ),W(1,36  ))                                                          
      CALL wwh_anomal3(W(1,2   ),W(1,16  ),W(1,36  ),AMP(31  )) 
      CALL wwz_anomal3(W(1,1   ),W(1,30  ),W(1,18  ),AMP(32  )) 
      CALL wwww_anomal4(W(1,1   ),W(1,30  ),W(1,2   ),W(1,16  ),AMP(33  ))   

      use_secondhiggs=.true.
      CALL jhww_anomal3(W(1,2   ),W(1,30  ),W(1,37  ))           
      CALL wwh_anomal3(W(1,1   ),W(1,16  ),W(1,37  ),AMP(34  )) 
      CALL jhww_anomal3(W(1,1   ),W(1,30  ),W(1,38  ))          
      CALL wwh_anomal3(W(1,2   ),W(1,16  ),W(1,38  ),AMP(35  )) 
      use_secondhiggs=.false.

      wwtens(mu,nu)  = +AMP(   1)+AMP(   2)+AMP(   3)+AMP(   4)+AMP(   5)
     &             +AMP(   6)+AMP(   7)+AMP(   8)+AMP(   9)+AMP(  10)
     &             +AMP(  11)+AMP(  12)+AMP(  13)+AMP(  14)+AMP(  15)
     &             +AMP(  16)+AMP(  17)+AMP(  18)+AMP(  19)+AMP(  20)
     &             +AMP(  21)+AMP(  22)+AMP(  23)+AMP(  24)+AMP(  25)
     &             +AMP(  26)+AMP(  27)+AMP(  28)+AMP(  29)+AMP(  30)
     &             +AMP(  31)+AMP(  32)+AMP(  33)
      if (with_secondhiggs) then
        wwtens(MU,NU) = wwtens(MU,NU)+AMP(34)+AMP(35)
      endif

      if (procid .eq. WPhadWPjj .or. procid .eq. WMhadWMjj) then
        ! new graphs for W+ decay

      CALL JIOXXX(W(1,7   ),W(1,4   ),GWP_AUN ,ZERO   ,ZERO  ,W(1,37  ))    
      CALL FVIXXX(W(1,5   ),W(1,37  ),GAL ,ZERO    ,ZERO    ,W(1,38  ))    
      CALL IOVXXX(W(1,38  ),W(1,6   ),W(1,1   ),GWF ,AMP(34  )) 
      CALL jwpawm_anomal3(W(1,37  ),W(1,1   ),W(1,39  )) 
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,39  ),GWF ,AMP(35  ))            

      CALL JIOXXX(W(1,25  ),W(1,4   ),GWP_AUN ,ZERO   ,ZERO  ,W(1,40  ))    
      CALL FVIXXX(W(1,5   ),W(1,40  ),GAL ,ZERO    ,ZERO    ,W(1,41  ))    
      CALL IOVXXX(W(1,41  ),W(1,6   ),W(1,2   ),GWF ,AMP(36  ))  
      CALL jwpawm_anomal3(W(1,40  ),W(1,2   ),W(1,42  )) 
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,42  ),GWF ,AMP(37  ))            

      wwtens(mu,nu)  = wwtens(mu,nu) +AMP(  34)+AMP(  35)+AMP(  36)+AMP(  37)

      endif     
     
      ENDDO
      enddo
      
      END

      
c----------------------------------------------------------------


      subroutine WPVtoWP_had(idl,id,Q,v,wpatens,wpztens)
C  Input:   Q(*)        one of the two incoming boson momenta (t-channel)
c           id = 1      Q = q1 = W+ momentum 
c           id = 2      Q = q2 = gamma/Z momentum
c	    idl = 1	l,vu = e+,ve
c	    idl = 2	l,vu = mu+,vmu	
c	
c  OUPTPUT: wpatens(mu,nu)  lepton tensor for w gamma--> l+nu
c           wpztens(mu,nu)  lepton tensor for w Z    --> l+nu
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : w+(q1) z(q2) -> l+ vl  
C FOR PROCESS : w+(q1) a(q2) -> l+ vl  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   6) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=   9) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS
C
      integer id,idl
      real*8 q(0:3), v(0:3,4)
      complex*16 wpatens(0:3,0:3), wpztens(0:3,0:3)
C  
C LOCAL VARIABLES 
C  
      INTEGER I, MU, NU
      real*8 q2sq, Q1(0:3), Q2(0:3)
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS), denz
      complex*16 wwp(6),wl(6),wn(6)
c  lepton spinors and W+- polarization vectors
#include "tensor.inc"
#include "tensorz.inc"

      logical ldebug
      parameter (ldebug=.false.)
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/global.inc"
#include "VBFNLO/utilities/coupl_haddecay.inc"
#include "VBFNLO/utilities/process.inc"
C                                                                          
C ----------
C BEGIN CODE
C ----------

      if (idl.eq.1) then
         do i = 1,6
	    wwp(i) = we(i)
	    wl(i) = wel(i)
	    wn(i) = wve(i)
	 enddo      
      else
         do i = 1,6
	    wwp(i) = wu(i)
	    wl(i) = wmu(i)
	    wn(i) = wvu(i)
	 enddo            
      endif 
      
      if (id.eq.1) then
         q2(0) = dreal(wwp(5))
         q2(1) = dreal(wwp(6))
         q2(2) = dimag(wwp(6))
         q2(3) = dimag(wwp(5))
         do mu = 0,3
            q1(mu) = q(mu)
            q2(mu) = q2(mu)-q(mu)
         enddo
      elseif (id.eq.2) then
         q1(0) = dreal(wwp(5))
         q1(1) = dreal(wwp(6))
         q1(2) = dimag(wwp(6))
         q1(3) = dimag(wwp(5))
         do mu = 0,3
            q2(mu) = q(mu)
            q1(mu) = q1(mu)-q(mu)
         enddo
      endif
c
      do i=1,6                  ! read in lepton states from common block
         w(i,3) = wl(i)
         w(i,4) = wn(i)
	 w(i,7) = wwp(i)
      enddo

      q2sq = q2(0)**2-q2(1)**2-q2(2)**2-q2(3)**2
      denz = q2sq/dcmplx(q2sq-zmass**2,zmass*zwidth)
      DO MU = 0,3
         DO NU = 0,3

            if (idl.eq.2) then      ! leptonic decay

            CALL VCARTX(Q1(0),WMASS ,Wwidth, MU,-1,W(1,1))        
            CALL VCARTX(Q2(0),ZERO  ,ZERO  , NU,-1,W(1,2))
            CALL FVIXXX(W(1,3),W(1,2),GZL ,ZERO,ZERO,W(1,5))    
            CALL IOVXXX(W(1,5),W(1,4),W(1,1),GWF ,AMP(1))            
            CALL FVIXXX(W(1,3),W(1,1),GWF ,ZERO,ZERO,W(1,6))    
            CALL IOVXXX(W(1,6),W(1,4),W(1,2),GZN ,AMP(2))
            CALL wwz_anomal3(W(1,1),W(1,7),W(1,2),AMP(3)) 
            CALL wwa_anomal3(W(1,1),W(1,7),W(1,2),AMP(4)) 
           
            wpztens(mu,nu) = (-AMP(   1)-AMP(   2)-AMP(   3))*denz
            wpatens(mu,nu) = -(amp(1)*gal(1)/gzl(1)+amp(4))

            else                    ! hadronic decay

            CALL VCARTX(Q1(0),WMASS ,Wwidth, MU,-1,W(1,1))        
            CALL VCARTX(Q2(0),ZERO  ,ZERO  , NU,-1,W(1,2))
            CALL FVIXXX(W(1,3),W(1,2),GWP_ZDL ,ZERO,ZERO,W(1,5))    
            CALL IOVXXX(W(1,5),W(1,4),W(1,1),GWF ,AMP(1))            
            CALL FVIXXX(W(1,3),W(1,1),GWF ,ZERO,ZERO,W(1,6))    
            CALL IOVXXX(W(1,6),W(1,4),W(1,2),GWP_ZUN ,AMP(2))
            CALL wwz_anomal3(W(1,1),W(1,7),W(1,2),AMP(3)) 
            CALL wwa_anomal3(W(1,1),W(1,7),W(1,2),AMP(4)) 

            CALL FVIXXX(W(1,3),W(1,2),GWP_ADL ,ZERO,ZERO,W(1,8))    
            CALL IOVXXX(W(1,8),W(1,4),W(1,1),GWF ,AMP(5))            
            CALL FVIXXX(W(1,3),W(1,1),GWF ,ZERO,ZERO,W(1,9))    
            CALL IOVXXX(W(1,9),W(1,4),W(1,2),GWP_AUN ,AMP(6))
           
            wpztens(mu,nu) = (-AMP(   1)-AMP(   2)-AMP(   3))*denz
            wpatens(mu,nu) = -(amp(5)+amp(4)+amp(6))
            
            endif
	    
         enddo
      enddo
 
      end


c----------------------------------------------------------------
       

