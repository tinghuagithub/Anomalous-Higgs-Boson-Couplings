      subroutine AAtoWW_had(Q1,Q2,P,aatens)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : a a -> e+ ve mu- vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  22) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=  38) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 aatens(0:3,0:3)
C  
C LOCAL VARIABLES 
C  
      INTEGER I, MU, NU
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
      INTEGER NHEL(3:6), ihel
      DATA (NHEL(IHEL),IHEL=3,6) / +1,-1,-1,+1/
      Save NHEL
c  lepton spinors and W+- polarization vectors
#include "tensor.inc"

      logical lswitch
      parameter (lswitch=.true.)
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/global.inc"
#include "VBFNLO/utilities/coupl_haddecay.inc"
#include "VBFNLO/utilities/process.inc"
C                                                                          
C ----------
C BEGIN CODE
C ----------
      if (lswitch) then      ! read in lepton an W states from common block
         do i=1,6
            w(i,3) = wep(i)
            w(i,4) = wve(i)
            w(i,5) = wmu(i)
            w(i,6) = wvm(i)
            w(i,19) = wp(i)
            w(i,20) = wm(i)
         enddo
      endif


      DO MU = 0,3
         DO NU = 0,3
      CALL VCARTX(Q1(0),ZERO ,ZERO, MU,-1,W(1,1   ))     !A   
      CALL VCARTX(Q2(0),ZERO ,ZERO, NU,-1,W(1,2   ))     !A
!      if (.not.lswitch) then
!         CALL IXXXXX(P(0,4   ),ZERO ,NHEL(3   ),-1,W(1,3   ))    !e+    
!         CALL OXXXXX(P(0,3   ),ZERO ,NHEL(4   ),+1,W(1,4   ))    !ve    
!         CALL OXXXXX(P(0,6   ),ZERO ,NHEL(5   ),+1,W(1,5   ))    !mu-    
!         CALL IXXXXX(P(0,5   ),ZERO ,NHEL(6   ),-1,W(1,6   ))    !vm~
!         CALL JIOXXX(W(1,3),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,19))    
!         CALL JIOXXX(W(1,6),W(1,5   ),GWF ,WMASS   ,WWIDTH  ,W(1,20)) 
!      endif
      CALL FVIXXX(W(1,3   ),W(1,2   ),GWP_ADL ,ZERO    ,ZERO    ,W(1,7   ))    ! W+
      CALL JIOXXX(W(1,7   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,8   )) 
      CALL jwmwpa_anomal3(W(1,8   ),W(1,1   ),W(1,9)) 
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,9   ),GWF ,AMP(1   ))            
      CALL FVOXXX(W(1,5   ),W(1,1   ),GWM_ADL ,ZERO    ,ZERO    ,W(1,10  ))    ! W-
      CALL IOVXXX(W(1,6   ),W(1,10  ),W(1,8   ),GWF ,AMP(2   ))            
      CALL FVIXXX(W(1,7   ),W(1,1   ),GWP_ADL ,ZERO    ,ZERO    ,W(1,11  ))    ! W+
      CALL JIOXXX(W(1,11  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,12  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,12  ),GWF ,AMP(3   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GWP_ADL ,ZERO    ,ZERO    ,W(1,13  ))    ! W+
      CALL JIOXXX(W(1,13  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,14  ))
      CALL jwmwpa_anomal3(W(1,14   ),W(1,2   ),W(1,15))
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,15  ),GWF ,AMP(4   ))            
      CALL FVOXXX(W(1,5   ),W(1,2   ),GWM_ADL ,ZERO    ,ZERO    ,W(1,16  ))    ! W-
      CALL IOVXXX(W(1,6   ),W(1,16  ),W(1,14  ),GWF ,AMP(5   ))            
      CALL FVIXXX(W(1,13  ),W(1,2   ),GWP_ADL ,ZERO    ,ZERO    ,W(1,17  ))    ! W+
      CALL JIOXXX(W(1,17  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,18  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,18  ),GWF ,AMP(6   )) 
      CALL jwmwpa_anomal3(W(1,19  ),W(1,2   ),W(1,21))
      CALL wwa_anomal3(W(1,20  ),W(1,21  ),W(1,1   ),AMP(7   )) 
      CALL FVIXXX(W(1,6   ),W(1,19  ),GWF ,ZERO    ,ZERO    ,W(1,22  ))    
      CALL IOVXXX(W(1,22  ),W(1,10  ),W(1,2   ),GWM_ADL ,AMP(8   ))            ! W-
      CALL JIOXXX(W(1,6   ),W(1,10  ),GWF ,WMASS   ,WWIDTH  ,W(1,23  ))   
      CALL wwa_anomal3(W(1,23  ),W(1,19  ),W(1,2   ),AMP(9   )) 
      CALL jwmwpa_anomal3(W(1,19  ),W(1,1   ),W(1,24))
      CALL wwa_anomal3(W(1,20  ),W(1,24  ),W(1,2   ),AMP(10   )) 
      CALL IOVXXX(W(1,22  ),W(1,16  ),W(1,1   ),GWM_ADL ,AMP(11  ))            ! W-
      CALL JIOXXX(W(1,6   ),W(1,16  ),GWF ,WMASS   ,WWIDTH  ,W(1,25  ))  
      CALL wwa_anomal3(W(1,25  ),W(1,19  ),W(1,1   ),AMP(12   ))
      CALL wwaa_anomal4(W(1,20  ),W(1,1   ),W(1,19  ),W(1,2   ), AMP(13  ))  
       
c considering anomalous couplings, we get an extra graph: A+A -> H -> W+ W-
      CALL jhww_anomal3(W(1,20  ),W(1,19  ),W(1,26  ))
      CALL aah_anomal3(W(1,1  ),W(1,2  ),W(1,26  ),AMP(14  ))
      use_secondhiggs=.true.
      CALL jhww_anomal3(W(1,20  ),W(1,19  ),W(1,27  ))
      CALL aah_anomal3(W(1,1  ),W(1,2  ),W(1,27  ),AMP(15  ))
      use_secondhiggs=.false.
                                              
      aatens(MU,NU)  = -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)-AMP(   5)
     &             -AMP(   6)-AMP(   7)-AMP(   8)-AMP(   9)-AMP(  10)
     &             -AMP(  11)-AMP(  12)-AMP(  13)
     &             -AMP(  14) !new diagram with Higgs
      if (with_secondhiggs) then
        aatens(MU,NU) = aatens(MU,NU)-AMP(15)
      endif


      if (procid .eq. WPhadWMjj) then
        ! new graphs for W+ decay

      CALL FVOXXX(W(1,4   ),W(1,1   ),GAU ,ZERO    ,ZERO    ,W(1,27  ))    
      CALL JIOXXX(W(1,3   ),W(1,27  ),GWF ,WMASS   ,WWIDTH  ,W(1,28  ))    
      ! CALL JVVXXX(W(1,28  ),W(1,2   ),GWWA ,WMASS   ,WWIDTH  ,W(1,29  ))    ! anom
      CALL jwmwpa_anomal3(W(1,28   ),W(1,2   ),W(1,29))
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,29  ),GWF ,AMP(15  ))            
      CALL IOVXXX(W(1,6   ),W(1,16  ),W(1,28  ),GWF ,AMP(16  ))            
      CALL FVOXXX(W(1,27  ),W(1,2   ),GAU ,ZERO    ,ZERO    ,W(1,30  ))    
      CALL JIOXXX(W(1,3   ),W(1,30  ),GWF ,WMASS   ,WWIDTH  ,W(1,31  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,31  ),GWF ,AMP(17  ))            
      CALL JIOXXX(W(1,7   ),W(1,27  ),GWF ,WMASS   ,WWIDTH  ,W(1,32  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,32  ),GWF ,AMP(18  ))            
      CALL FVOXXX(W(1,4   ),W(1,2   ),GAU ,ZERO    ,ZERO    ,W(1,33  ))    
      CALL JIOXXX(W(1,3   ),W(1,33  ),GWF ,WMASS   ,WWIDTH  ,W(1,34  ))    
      ! CALL JVVXXX(W(1,34  ),W(1,1   ),GWWA ,WMASS   ,WWIDTH  ,W(1,35  ))    ! anom
      CALL jwmwpa_anomal3(W(1,34   ),W(1,1   ),W(1,35))
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,35  ),GWF ,AMP(19  ))            
      CALL IOVXXX(W(1,6   ),W(1,10  ),W(1,34  ),GWF ,AMP(20  ))            
      CALL FVOXXX(W(1,33  ),W(1,1   ),GAU ,ZERO    ,ZERO    ,W(1,36  ))    
      CALL JIOXXX(W(1,3   ),W(1,36  ),GWF ,WMASS   ,WWIDTH  ,W(1,37  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,37  ),GWF ,AMP(21  ))            
      CALL JIOXXX(W(1,13  ),W(1,33  ),GWF ,WMASS   ,WWIDTH  ,W(1,38  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,38  ),GWF ,AMP(22  ))            

        aatens(MU,NU)  = aatens(MU,NU) -AMP(  15)-AMP(  16)-AMP(  17)-AMP(  18)
     &                         -AMP(  19)-AMP(  20)-AMP(  21)-AMP(  22)
      endif

      if (procid .eq. WPWMhadjj) then
        ! new graphs for W- decay

      CALL FVOXXX(W(1,5   ),W(1,8   ),GWF ,ZERO    ,ZERO    ,W(1,27  ))    
      CALL IOVXXX(W(1,6   ),W(1,27  ),W(1,1   ),GAU ,AMP(15  ))            
      CALL FVOXXX(W(1,5   ),W(1,14  ),GWF ,ZERO    ,ZERO    ,W(1,28  ))    
      CALL IOVXXX(W(1,6   ),W(1,28  ),W(1,2   ),GAU ,AMP(16  ))            
      CALL FVOXXX(W(1,5   ),W(1,21  ),GWF ,ZERO    ,ZERO    ,W(1,29  ))    
      CALL IOVXXX(W(1,6   ),W(1,29  ),W(1,1   ),GAU ,AMP(17  ))            
      CALL FVOXXX(W(1,10  ),W(1,19  ),GWF ,ZERO    ,ZERO    ,W(1,30  ))    
      CALL IOVXXX(W(1,6   ),W(1,30  ),W(1,2   ),GAU ,AMP(18  ))            
      CALL FVOXXX(W(1,16  ),W(1,19  ),GWF ,ZERO    ,ZERO    ,W(1,31  ))    
      CALL IOVXXX(W(1,6   ),W(1,31  ),W(1,1   ),GAU ,AMP(19  ))            
      CALL FVOXXX(W(1,5   ),W(1,24  ),GWF ,ZERO    ,ZERO    ,W(1,33  ))    
      CALL IOVXXX(W(1,6   ),W(1,33  ),W(1,2   ),GAU ,AMP(20  ))            
      CALL FVOXXX(W(1,5   ),W(1,19  ),GWF ,ZERO    ,ZERO    ,W(1,34  ))    
      CALL FVOXXX(W(1,34  ),W(1,2   ),GAU ,ZERO    ,ZERO    ,W(1,35  ))    
      CALL IOVXXX(W(1,6   ),W(1,35  ),W(1,1   ),GAU ,AMP(21  ))            
      CALL FVOXXX(W(1,34  ),W(1,1   ),GAU ,ZERO    ,ZERO    ,W(1,36  ))    
      CALL IOVXXX(W(1,6   ),W(1,36  ),W(1,2   ),GAU ,AMP(22  ))            

        aatens(MU,NU)  = aatens(MU,NU) -AMP(  15)-AMP(  16)-AMP(  17)-AMP(  18)
     &                         -AMP(  19)-AMP(  20)-AMP(  21)-AMP(  22)
      endif


         enddo
      enddo
      END


      subroutine AZtoWW_had(Q1,Q2,P,az)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : a z -> e+ ve mu- vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  26) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=  41) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 az(0:3,0:3)
C  
C LOCAL VARIABLES 
C  
      INTEGER I, MU, NU
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
      INTEGER NHEL(3:6), ihel
      DATA (NHEL(IHEL),IHEL=3,6) / +1,-1,-1,+1/
      Save NHEL
c  lepton spinors and W+- polarization vectors
#include "tensor.inc"

      logical lswitch
      parameter (lswitch=.true.)
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/global.inc"
#include "VBFNLO/utilities/coupl_haddecay.inc"
#include "VBFNLO/utilities/process.inc"
C                                                                          
C ----------
C BEGIN CODE
C ----------
      if (lswitch) then      ! read in lepton an W states from common block
         do i=1,6
            w(i,3) = wep(i)
            w(i,4) = wve(i)
            w(i,5) = wmu(i)
            w(i,6) = wvm(i)
            w(i,25) = wp(i)
            w(i,14) = wm(i)
         enddo
      endif


      DO MU = 0,3
         DO NU = 0,3
      CALL VCARTX(Q1(0),ZERO ,ZERO, MU,-1,W(1,1   ))    !A    
      CALL VCARTX(Q2(0),ZMASS ,Zwidth, NU,-1,W(1,2   )) !Z
!      if (.not.lswitch) then
!         CALL IXXXXX(P(0,4   ),ZERO ,NHEL(3   ),-1,W(1,3   )) !e+       
!         CALL OXXXXX(P(0,3   ),ZERO ,NHEL(4   ),+1,W(1,4   )) !ve       
!         CALL OXXXXX(P(0,6   ),ZERO ,NHEL(5   ),+1,W(1,5   )) !mu-       
!         CALL IXXXXX(P(0,5   ),ZERO ,NHEL(6   ),-1,W(1,6   )) !vm~       
!         CALL JIOXXX(W(1,6),W(1,5   ),GWF ,WMASS   ,WWIDTH  ,W(1,14  ))    
!         CALL JIOXXX(W(1,3),W(1,4   ),GWF ,WMASS ,WWIDTH  ,W(1,25))    
!      endif
      CALL FVIXXX(W(1,3   ),W(1,2   ),GWP_ZDL ,ZERO    ,ZERO    ,W(1,7   ))    ! W+
      CALL JIOXXX(W(1,7   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,8   )) 
      CALL jwmwpa_anomal3(W(1,8   ),W(1,1   ),W(1,9   )) 
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,9   ),GWF ,AMP(1   ))            
      CALL FVOXXX(W(1,5   ),W(1,1   ),GWM_ADL ,ZERO    ,ZERO    ,W(1,10  ))    ! W-
      CALL IOVXXX(W(1,6   ),W(1,10  ),W(1,8   ),GWF ,AMP(2   ))            
      CALL FVIXXX(W(1,7   ),W(1,1   ),GWP_ADL ,ZERO    ,ZERO    ,W(1,11  ))    ! W+
      CALL JIOXXX(W(1,11  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,12  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,12  ),GWF ,AMP(3   ))            
      CALL FVOXXX(W(1,4   ),W(1,2   ),GWP_ZUN ,ZERO    ,ZERO    ,W(1,13  ))    ! W+
      CALL JIOXXX(W(1,3   ),W(1,13  ),GWF ,WMASS   ,WWIDTH  ,W(1,15  )) 
      CALL wwa_anomal3(W(1,14  ),W(1,15  ),W(1,1   ),AMP(4   ))   
      CALL JIOXXX(W(1,6   ),W(1,10  ),GWF ,WMASS   ,WWIDTH  ,W(1,16  ))    
      CALL IOVXXX(W(1,3   ),W(1,13  ),W(1,16  ),GWF ,AMP(5   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GWP_ADL ,ZERO    ,ZERO    ,W(1,17  ))    ! W+
      CALL JIOXXX(W(1,17  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,18  ))    
      CALL FVOXXX(W(1,5   ),W(1,18  ),GWF ,ZERO    ,ZERO    ,W(1,19  ))    
      CALL IOVXXX(W(1,6   ),W(1,19  ),W(1,2   ),GWM_ZUN ,AMP(6   ))            ! W-
      CALL jwmwpz_anomal3(W(1,18  ),W(1,2   ),W(1,20  )) 
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,20  ),GWF ,AMP(7   ))            
      CALL FVOXXX(W(1,5   ),W(1,2   ),GWM_ZDL ,ZERO    ,ZERO    ,W(1,21  ))    ! W-
      CALL IOVXXX(W(1,6   ),W(1,21  ),W(1,18  ),GWF ,AMP(8   ))            
      CALL FVIXXX(W(1,17  ),W(1,2   ),GWP_ZDL ,ZERO    ,ZERO    ,W(1,22  ))    ! W+
      CALL JIOXXX(W(1,22  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,23  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,23  ),GWF ,AMP(9   ))            
      CALL JIOXXX(W(1,17  ),W(1,13  ),GWF ,WMASS   ,WWIDTH  ,W(1,24  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,24  ),GWF ,AMP(10  ))            
      CALL FVIXXX(W(1,6   ),W(1,2   ),GWM_ZUN ,ZERO    ,ZERO    ,W(1,26  ))    ! W-
      CALL IOVXXX(W(1,26  ),W(1,10  ),W(1,25  ),GWF ,AMP(11  ))  
      CALL jwmwpz_anomal3(W(1,25  ),W(1,2   ),W(1,27  ))  
      CALL wwa_anomal3(W(1,14  ),W(1,27  ),W(1,1   ),AMP(12  ))
      CALL FVIXXX(W(1,6   ),W(1,25  ),GWF ,ZERO    ,ZERO    ,W(1,28  ))    
      CALL IOVXXX(W(1,28  ),W(1,10  ),W(1,2   ),GWM_ZDL ,AMP(13  ))            ! W-
      CALL wwz_anomal3(W(1,16  ),W(1,25  ),W(1,2   ),AMP(14  ))
      CALL jwmwpa_anomal3(W(1,25  ),W(1,1),W(1,29) )
      CALL IOVXXX(W(1,26  ),W(1,5   ),W(1,29  ),GWF ,AMP(15  )) 
      CALL wwz_anomal3(W(1,14  ),W(1,29  ),W(1,2   ),AMP(16  ))
      CALL IOVXXX(W(1,28  ),W(1,21  ),W(1,1   ),GWM_ADL ,AMP(17  ))            ! W-
      CALL JIOXXX(W(1,6   ),W(1,21  ),GWF ,WMASS   ,WWIDTH  ,W(1,30  )) 
      CALL wwa_anomal3(W(1,30  ),W(1,25  ),W(1,1   ),AMP(18  )) 
      CALL wwza_anomal4(W(1,14  ),W(1,2   ),W(1,25  ),W(1,1   ),AMP(19  ))  

c considering anomalous couplings, we get an extra graph: A+Z -> H -> W+ W-
      CALL jhww_anomal3(W(1,14  ),W(1,25  ),W(1,31  ))
      CALL azh_anomal3(W(1,1  ),W(1,2  ),W(1,31  ),AMP(20  ))
      use_secondhiggs=.true.
      CALL jhww_anomal3(W(1,14  ),W(1,25  ),W(1,32  ))
      CALL azh_anomal3(W(1,1  ),W(1,2  ),W(1,32  ),AMP(21  ))
      use_secondhiggs=.false.
                                          
      AZ(MU,NU)  = -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)-AMP(   5)
     &             -AMP(   6)-AMP(   7)-AMP(   8)-AMP(   9)-AMP(  10)
     &             -AMP(  11)-AMP(  12)-AMP(  13)-AMP(  14)-AMP(  15)
     &             -AMP(  16)-AMP(  17)-AMP(  18)-AMP(  19)
     &             -AMP(  20) !new diagram with Higgs
      if (with_secondhiggs) then
        AZ(MU,NU) = AZ(MU,NU)-AMP(21)
      endif


      if (procid .eq. WPhadWMjj) then
        ! new graphs for W+ decay

      CALL FVOXXX(W(1,4   ),W(1,1   ),GAU ,ZERO    ,ZERO    ,W(1,41  ))    
      CALL JIOXXX(W(1,3   ),W(1,41  ),GWF ,WMASS   ,WWIDTH  ,W(1,32  ))    
      CALL FVOXXX(W(1,5   ),W(1,32  ),GWF ,ZERO    ,ZERO    ,W(1,33  ))    
      CALL IOVXXX(W(1,6   ),W(1,33  ),W(1,2   ),GZN ,AMP(21   ))            
      ! CALL JVVXXX(W(1,32  ),W(1,2   ),GWWZ ,WMASS   ,WWIDTH  ,W(1,34  ))      ! anom                                                    
      CALL jwmwpz_anomal3(W(1,32  ),W(1,2   ),W(1,34  ))  
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,34  ),GWF ,AMP(22   ))            
      CALL FVOXXX(W(1,5   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,35  ))    
      CALL IOVXXX(W(1,6   ),W(1,35  ),W(1,32  ),GWF ,AMP(23   ))            
      CALL FVOXXX(W(1,41  ),W(1,2   ),GZU ,ZERO    ,ZERO    ,W(1,36  ))    
      CALL JIOXXX(W(1,3   ),W(1,36  ),GWF ,WMASS   ,WWIDTH  ,W(1,37  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,37  ),GWF ,AMP(24   ))            
      CALL JIOXXX(W(1,7   ),W(1,41  ),GWF ,WMASS   ,WWIDTH  ,W(1,38  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,38  ),GWF ,AMP(25   ))            
      CALL FVOXXX(W(1,13  ),W(1,1   ),GAU ,ZERO    ,ZERO    ,W(1,39  ))    
      CALL JIOXXX(W(1,3   ),W(1,39  ),GWF ,WMASS   ,WWIDTH  ,W(1,40  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,40  ),GWF ,AMP(26  ))            

        AZ(MU,NU)  = AZ(MU,NU) -AMP(  21)-AMP(  22)-AMP(  23)-AMP(  24)-AMP(  25)-AMP(  26)

      endif

      if (procid .eq. WPWMhadjj) then
        ! new graphs for W- decay

      CALL FVOXXX(W(1,5   ),W(1,8   ),GWF ,ZERO    ,ZERO    ,W(1,38  ))    
      CALL IOVXXX(W(1,6   ),W(1,38  ),W(1,1   ),GAU ,AMP(21   ))            
      CALL FVOXXX(W(1,5   ),W(1,15  ),GWF ,ZERO    ,ZERO    ,W(1,32  ))    
      CALL IOVXXX(W(1,6   ),W(1,32  ),W(1,1   ),GAU ,AMP(22  ))            
      CALL FVOXXX(W(1,5   ),W(1,27  ),GWF ,ZERO    ,ZERO    ,W(1,33  ))    
      CALL IOVXXX(W(1,6   ),W(1,33  ),W(1,1   ),GAU ,AMP(23  ))            
      CALL FVOXXX(W(1,21  ),W(1,25  ),GWF ,ZERO    ,ZERO    ,W(1,34  ))    
      CALL IOVXXX(W(1,6   ),W(1,34  ),W(1,1   ),GAU ,AMP(24  ))            
      CALL FVOXXX(W(1,5   ),W(1,25  ),GWF ,ZERO    ,ZERO    ,W(1,35  ))    
      CALL FVOXXX(W(1,35  ),W(1,2   ),GZU ,ZERO    ,ZERO    ,W(1,36  ))    
      CALL IOVXXX(W(1,6   ),W(1,36  ),W(1,1   ),GAU ,AMP(25  ))            
      CALL FVOXXX(W(1,35  ),W(1,1   ),GAU ,ZERO    ,ZERO    ,W(1,37  ))    
      CALL IOVXXX(W(1,6   ),W(1,37  ),W(1,2   ),GZU ,AMP(26  ))            

        AZ(MU,NU)  = AZ(MU,NU) -AMP(  21)-AMP(  22)-AMP(  23)-AMP(  24)-AMP(  25)-AMP(  26)

      endif

         ENDDO
      ENDDO

      END


      subroutine ZZtoWW_had(Q1,Q2,P,zz_tens)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : z z -> e+ ve mu- vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  33) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=  40) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 zz_tens(0:3,0:3)
C  
C LOCAL VARIABLES 
C  
      INTEGER I, MU, NU
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
      INTEGER NHEL(3:6), ihel
      DATA (NHEL(IHEL),IHEL=3,6) / +1,-1,-1,+1/
      Save NHEL
c  lepton spinors and W+- polarization vectors
#include "tensor.inc"

      logical lswitch
      parameter (lswitch=.true.)
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/global.inc"
#include "VBFNLO/utilities/coupl_haddecay.inc"
#include "VBFNLO/utilities/process.inc"
C                                                                          
C ----------
C BEGIN CODE
C ----------
      if (lswitch) then      ! read in lepton an W states from common block
         do i=1,6
            w(i,3) = wep(i)
            w(i,4) = wve(i)
            w(i,5) = wmu(i)
            w(i,6) = wvm(i)
            w(i,34) = wp(i)
            w(i,15) = wm(i)
         enddo
      endif


      DO MU = 0,3
c         print*," mu = ",mu,":",(q1(mu)+q2(mu))/(p(mu,3)+p(mu,4)+p(mu,5)+p(mu,6))
         DO NU = 0,3
      CALL VCARTX(Q1(0),ZMASS ,Zwidth, MU,-1,W(1,1   ))  !Z      
      CALL VCARTX(Q2(0),ZMASS ,Zwidth, NU,-1,W(1,2   ))  !Z
!      if (.not.lswitch) then 
!         CALL IXXXXX(P(0,4   ),ZERO ,NHEL(3   ),-1,W(1,3   ))  !e+      
!         CALL OXXXXX(P(0,3   ),ZERO ,NHEL(4   ),+1,W(1,4   ))  !ve      
!         CALL OXXXXX(P(0,6   ),ZERO ,NHEL(5   ),+1,W(1,5   ))  !mu-      
!         CALL IXXXXX(P(0,5   ),ZERO ,NHEL(6   ),-1,W(1,6   ))  !vm~
!      endif        
      CALL FVIXXX(W(1,3   ),W(1,2   ),GWP_ZDL ,ZERO    ,ZERO    ,W(1,7   ))    ! W+
      CALL JIOXXX(W(1,7   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,8   ))    
      CALL FVOXXX(W(1,5   ),W(1,8   ),GWF ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,6   ),W(1,9   ),W(1,1   ),GWM_ZUN ,AMP(1   ))            ! W-
      CALL jwmwpz_anomal3(W(1,8   ),W(1,1   ),W(1,10))
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,10  ),GWF ,AMP(2   ))            
      CALL FVOXXX(W(1,5   ),W(1,1   ),GWM_ZDL ,ZERO    ,ZERO    ,W(1,11  ))    ! W-
      CALL IOVXXX(W(1,6   ),W(1,11  ),W(1,8   ),GWF ,AMP(3   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GWP_ZUN ,ZERO    ,ZERO    ,W(1,12  ))    ! W+
      CALL FVIXXX(W(1,6   ),W(1,2   ),GWM_ZUN ,ZERO    ,ZERO    ,W(1,13  ))    ! W-
      CALL JIOXXX(W(1,3   ),W(1,12  ),GWF ,WMASS   ,WWIDTH  ,W(1,14  ))    
      CALL IOVXXX(W(1,13  ),W(1,5   ),W(1,14  ),GWF ,AMP(4   ))            
!      if (.not.lswitch) then
!         CALL JIOXXX(W(1,6),W(1,5),GWF ,WMASS   ,WWIDTH  ,W(1,15)) 
!      endif   
      CALL wwz_anomal3(W(1,15  ),W(1,14  ),W(1,2   ),AMP(5   )) 
      CALL FVOXXX(W(1,5   ),W(1,2   ),GWM_ZDL ,ZERO    ,ZERO    ,W(1,16  ))    ! W-
      CALL JIOXXX(W(1,6   ),W(1,16  ),GWF ,WMASS   ,WWIDTH  ,W(1,17  ))    
      CALL IOVXXX(W(1,3   ),W(1,12  ),W(1,17  ),GWF ,AMP(6   ))            
      CALL FVOXXX(W(1,12  ),W(1,2   ),GWP_ZUN ,ZERO    ,ZERO    ,W(1,18  ))    ! W+
      CALL IOVXXX(W(1,3   ),W(1,18  ),W(1,15  ),GWF ,AMP(7   ))            
      CALL FVIXXX(W(1,7   ),W(1,1   ),GWP_ZDL ,ZERO    ,ZERO    ,W(1,19  ))    ! W+
      CALL JIOXXX(W(1,19  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,20  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,20  ),GWF ,AMP(8   ))            
      CALL JIOXXX(W(1,7   ),W(1,12  ),GWF ,WMASS   ,WWIDTH  ,W(1,21  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,21  ),GWF ,AMP(9   ))            
      CALL FVOXXX(W(1,4   ),W(1,2   ),GWP_ZUN ,ZERO    ,ZERO    ,W(1,22  ))    ! W+
      CALL FVIXXX(W(1,6   ),W(1,1   ),GWM_ZUN ,ZERO    ,ZERO    ,W(1,23  ))    ! W-
      CALL JIOXXX(W(1,3   ),W(1,22  ),GWF ,WMASS   ,WWIDTH  ,W(1,24  ))    
      CALL IOVXXX(W(1,23  ),W(1,5   ),W(1,24  ),GWF ,AMP(10  ))   
      CALL wwz_anomal3(W(1,15  ),W(1,24  ),W(1,1   ),AMP(11  ))
      CALL JIOXXX(W(1,6   ),W(1,11  ),GWF ,WMASS   ,WWIDTH  ,W(1,25  ))    
      CALL IOVXXX(W(1,3   ),W(1,22  ),W(1,25  ),GWF ,AMP(12  ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GWP_ZDL ,ZERO    ,ZERO    ,W(1,26  ))    ! W+
      CALL JIOXXX(W(1,26  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,27  ))    
      CALL FVOXXX(W(1,5   ),W(1,27  ),GWF ,ZERO    ,ZERO    ,W(1,28  ))    
      CALL IOVXXX(W(1,6   ),W(1,28  ),W(1,2   ),GWM_ZUN ,AMP(13  ))            ! W-
      CALL jwmwpz_anomal3(W(1,27  ),W(1,2   ),W(1,29))
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,29  ),GWF ,AMP(14  ))            
      CALL IOVXXX(W(1,6   ),W(1,16  ),W(1,27  ),GWF ,AMP(15  ))            
      CALL FVOXXX(W(1,22  ),W(1,1   ),GWP_ZUN ,ZERO    ,ZERO    ,W(1,30  ))    ! W+
      CALL IOVXXX(W(1,3   ),W(1,30  ),W(1,15  ),GWF ,AMP(16  ))            
      CALL FVIXXX(W(1,26  ),W(1,2   ),GWP_ZDL ,ZERO    ,ZERO    ,W(1,31  ))    ! W+
      CALL JIOXXX(W(1,31  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,32  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,32  ),GWF ,AMP(17  ))            
      CALL JIOXXX(W(1,26  ),W(1,22  ),GWF ,WMASS   ,WWIDTH  ,W(1,33  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,33  ),GWF ,AMP(18  ))            
!      if (.not.lswitch)
!     &   CALL JIOXXX(W(1,3),W(1,4),GWF ,WMASS,WWIDTH  ,W(1,34))  
      CALL jwmwpz_anomal3(W(1,34),W(1,2),W(1,35))
      CALL IOVXXX(W(1,23  ),W(1,5   ),W(1,35  ),GWF ,AMP(19  ))            
      CALL IOVXXX(W(1,13  ),W(1,11  ),W(1,34  ),GWF ,AMP(20  ))  
      CALL wwz_anomal3(W(1,15  ),W(1,35  ),W(1,1   ),AMP(21  ))
      CALL FVIXXX(W(1,6   ),W(1,34  ),GWF ,ZERO    ,ZERO    ,W(1,36  ))    
      CALL IOVXXX(W(1,36  ),W(1,11  ),W(1,2   ),GWM_ZDL ,AMP(22  ))            ! W-
      CALL wwz_anomal3(W(1,25  ),W(1,34  ),W(1,2   ),AMP(23  ))
      CALL IOVXXX(W(1,23  ),W(1,16  ),W(1,34  ),GWF ,AMP(24  ))    
      CALL jwmwpz_anomal3(W(1,34  ),W(1,1   ),W(1,37))
      CALL IOVXXX(W(1,13  ),W(1,5   ),W(1,37  ),GWF ,AMP(25  ))   
      CALL wwz_anomal3(W(1,15  ),W(1,37  ),W(1,2   ),AMP(26  ))
      CALL IOVXXX(W(1,36  ),W(1,16  ),W(1,1   ),GWM_ZDL ,AMP(27  ))            ! W-
      CALL wwz_anomal3(W(1,17  ),W(1,34  ),W(1,1   ),AMP(28  ))
      CALL FVOXXX(W(1,5   ),W(1,34  ),GWF ,ZERO    ,ZERO    ,W(1,38  ))    
      CALL IOVXXX(W(1,23  ),W(1,38  ),W(1,2   ),GWM_ZUN ,AMP(29  ))            ! W-
      CALL IOVXXX(W(1,13  ),W(1,38  ),W(1,1   ),GWM_ZUN ,AMP(30  ))            ! W-
      CALL jhww_anomal3(W(1,15  ),W(1,34  ),W(1,39  ))
      CALL zzh_anomal3(W(1,1   ),W(1,2   ),W(1,39  ),AMP(31  ))    
      CALL wwzz_anomal4(W(1,15  ),W(1,1   ),W(1,34  ),W(1,2   ),     
     &     AMP(32  ))  
      use_secondhiggs=.true.
      CALL jhww_anomal3(W(1,15  ),W(1,34  ),W(1,40  ))
      CALL zzh_anomal3(W(1,1   ),W(1,2   ),W(1,40  ),AMP(33  ))    
      use_secondhiggs=.false.
                        
      zz_tens(MU,NU)  = -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)-AMP(   5)
     &             -AMP(   6)-AMP(   7)-AMP(   8)-AMP(   9)-AMP(  10)
     &             -AMP(  11)-AMP(  12)-AMP(  13)-AMP(  14)-AMP(  15)
     &             -AMP(  16)-AMP(  17)-AMP(  18)-AMP(  19)-AMP(  20)
     &             -AMP(  21)-AMP(  22)-AMP(  23)-AMP(  24)-AMP(  25)
     &             -AMP(  26)-AMP(  27)-AMP(  28)-AMP(  29)-AMP(  30)
     &             -AMP(  31)-AMP(  32)
      if (with_secondhiggs) then
        zz_tens(MU,NU) = zz_tens(MU,NU)-AMP(33)
      endif
          ENDDO
      ENDDO

      END


      subroutine WWtoWW_had(Q1,Q2,P,ww_tens)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : w- w+ -> e+ ve mu- vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  31) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=  44)
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 ww_tens(0:3,0:3)
C  
C LOCAL VARIABLES 
C  
      INTEGER I, MU, NU
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
      INTEGER NHEL(3:6), ihel
      DATA (NHEL(IHEL),IHEL=3,6) / +1,-1,-1,+1/
      Save NHEL
c  lepton spinors and W+- polarization vectors
#include "tensor.inc"

      logical lswitch
      parameter (lswitch=.true.)
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/global.inc"
#include "VBFNLO/utilities/coupl_haddecay.inc"
#include "VBFNLO/utilities/process.inc"
C                                                                          
C ----------
C BEGIN CODE
C ----------
      if (lswitch) then      ! read in lepton an W states from common block
         do i=1,6
            w(i,3) = wep(i)
            w(i,4) = wve(i)
            w(i,5) = wmu(i)
            w(i,6) = wvm(i)
            w(i,21) = wp(i)
            w(i,18) = wm(i)
         enddo
      endif


      DO MU = 0,3
         DO NU = 0,3
      CALL VCARTX(Q1(0),wMASS ,wwidth, MU,-1,W(1,1   )) !W-      
      CALL VCARTX(Q2(0),wMASS ,wwidth, NU,-1,W(1,2   )) !W+
!      if (.not.lswitch) then
!         CALL IXXXXX(P(0,4   ),ZERO ,NHEL(3   ),-1,W(1,3   )) !e+        
!         CALL OXXXXX(P(0,3   ),ZERO ,NHEL(4   ),+1,W(1,4   )) !ve       
!         CALL OXXXXX(P(0,6   ),ZERO ,NHEL(5   ),+1,W(1,5   )) !mu-       
!         CALL IXXXXX(P(0,5   ),ZERO ,NHEL(6   ),-1,W(1,6   )) !vm~ 
!      endif      
      CALL FVIXXX(W(1,3   ),W(1,2   ),GWF ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL JIOXXX(W(1,7   ),W(1,4   ),GWP_ZUN ,ZMASS   ,ZWIDTH  ,W(1,8   ))    ! W+
      CALL FVOXXX(W(1,5   ),W(1,8   ),GWM_ZDL ,ZERO    ,ZERO    ,W(1,9   ))    ! W-
      CALL IOVXXX(W(1,6   ),W(1,9   ),W(1,1   ),GWF ,AMP(1   )) 
      CALL jwmwpz_anomal3(W(1,1   ),W(1,8   ),W(1,10))
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,10  ),GWF ,AMP(2   ))            
      CALL FVOXXX(W(1,5   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL IOVXXX(W(1,6   ),W(1,11  ),W(1,8   ),GWM_ZUN ,AMP(3   ))            ! W-
      CALL FVIXXX(W(1,7   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,12  ))    
      CALL JIOXXX(W(1,12  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,13  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,13  ),GWF ,AMP(4   ))            
      CALL FVOXXX(W(1,4   ),W(1,2   ),GWF ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL FVIXXX(W(1,6   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,15  ))    
      CALL JIOXXX(W(1,3   ),W(1,14  ),GWP_ADL ,ZERO    ,ZERO    ,W(1,16  ))    ! W+
      CALL IOVXXX(W(1,15  ),W(1,5   ),W(1,16  ),GWM_ADL ,AMP(5   ))            ! W-
      CALL JIOXXX(W(1,3   ),W(1,14  ),GWP_ZDL ,ZMASS   ,ZWIDTH  ,W(1,17  ))    ! W+
      CALL IOVXXX(W(1,15  ),W(1,5   ),W(1,17  ),GWM_ZDL ,AMP(6   ))            ! W-
!      if (.not.lswitch) 
!     &   CALL JIOXXX( W(1,6),W(1,5),GWF ,WMASS,WWIDTH,W(1,18) )   
      CALL wwa_anomal3(W(1,18  ),W(1,1   ),W(1,16  ),AMP(7   )) 
      CALL wwz_anomal3(W(1,18  ),W(1,1   ),W(1,17  ),AMP(8   ))
      CALL JIOXXX(W(1,6   ),W(1,11  ),GWM_ZUN ,ZMASS   ,ZWIDTH  ,W(1,19  ))    ! W-
      CALL IOVXXX(W(1,3   ),W(1,14  ),W(1,19  ),GWP_ZDL ,AMP(9   ))            ! W+
      CALL FVOXXX(W(1,14  ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,20  ))    
      CALL IOVXXX(W(1,3   ),W(1,20  ),W(1,18  ),GWF ,AMP(10  ))  
!      if (.not.lswitch)
!     &   CALL JIOXXX(W(1,3),W(1,4),GWF ,WMASS,WWIDTH,W(1,21))    
      CALL jaww_anomal3(W(1,2   ),W(1,21  ),W(1,22))
      CALL IOVXXX(W(1,15  ),W(1,5   ),W(1,22  ),GWM_ADL ,AMP(11  ))            ! W-
      CALL jzww_anomal3(W(1,2   ),W(1,21  ),W(1,23))
      CALL IOVXXX(W(1,15  ),W(1,5   ),W(1,23  ),GWM_ZDL ,AMP(12  ))            ! W-
      CALL wwa_anomal3(W(1,18  ),W(1,1   ),W(1,22  ),AMP(13  )) 
      CALL wwz_anomal3(W(1,18  ),W(1,1   ),W(1,23  ),AMP(14  ))
      CALL jhww_anomal3(W(1,2   ),W(1,21  ),W(1,24))
      CALL wwh_anomal3(W(1,18  ),W(1,1   ),W(1,24  ),AMP(15  )) 
      CALL FVIXXX(W(1,6   ),W(1,21  ),GWF ,ZERO    ,ZERO    ,W(1,25  ))    
      CALL IOVXXX(W(1,25  ),W(1,11  ),W(1,2   ),GWF ,AMP(16  )) 
      CALL wwz_anomal3(W(1,2   ),W(1,21  ),W(1,19  ),AMP(17  ))
      CALL jzww_anomal3(W(1,2   ),W(1,1   ),W(1,26))
      CALL FVOXXX(W(1,4   ),W(1,26  ),GWP_ZUN ,ZERO    ,ZERO    ,W(1,27  ))    ! W+
      CALL JIOXXX(W(1,3   ),W(1,27  ),GWF ,WMASS   ,WWIDTH  ,W(1,28  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,28  ),GWF ,AMP(18  ))    
      CALL jaww_anomal3(W(1,2   ),W(1,1   ),W(1,29))
      CALL FVIXXX(W(1,3   ),W(1,29  ),GWP_ADL ,ZERO    ,ZERO    ,W(1,30  ))    ! W+
      CALL JIOXXX(W(1,30  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,31  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,31  ),GWF ,AMP(19  ))            
      CALL FVIXXX(W(1,3   ),W(1,26  ),GWP_ZDL ,ZERO    ,ZERO    ,W(1,32  ))    ! W+
      CALL JIOXXX(W(1,32  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,33  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,33  ),GWF ,AMP(20  ))            
      CALL FVOXXX(W(1,5   ),W(1,21  ),GWF ,ZERO    ,ZERO    ,W(1,34  ))    
      CALL IOVXXX(W(1,15  ),W(1,34  ),W(1,2   ),GWF ,AMP(21  ))      
      CALL jwmwpa_anomal3(W(1,21  ),W(1,29  ),W(1,35))
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,35  ),GWF ,AMP(22  ))   
      CALL jwmwpz_anomal3(W(1,21  ),W(1,26  ),W(1,36))
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,36  ),GWF ,AMP(23  ))   
      CALL jhww_anomal3(W(1,2   ),W(1,1   ),W(1,37))
      CALL wwh_anomal3(W(1,18  ),W(1,21  ),W(1,37  ),AMP(24  ))
      CALL FVOXXX(W(1,5   ),W(1,29  ),GWM_ADL ,ZERO    ,ZERO    ,W(1,39  ))    ! W-
      CALL IOVXXX(W(1,6   ),W(1,39  ),W(1,21  ),GWF ,AMP(25  ))            
      CALL FVOXXX(W(1,5   ),W(1,26  ),GWM_ZDL ,ZERO    ,ZERO    ,W(1,40  ))    ! W-
      CALL IOVXXX(W(1,6   ),W(1,40  ),W(1,21  ),GWF ,AMP(26  ))            
      CALL IOVXXX(W(1,6   ),W(1,34  ),W(1,26  ),GWM_ZUN ,AMP(27  ))            ! W-
      CALL wwww_anomal4(W(1,2   ),W(1,1   ),W(1,18  ),W(1,21  ),
     &     AMP(28  ))
      use_secondhiggs=.true.
      CALL jhww_anomal3(W(1,2   ),W(1,21  ),W(1,41))
      CALL wwh_anomal3(W(1,18  ),W(1,1   ),W(1,41  ),AMP(29  )) 
      CALL jhww_anomal3(W(1,2   ),W(1,1   ),W(1,42))
      CALL wwh_anomal3(W(1,18  ),W(1,21  ),W(1,42  ),AMP(30  ))
      use_secondhiggs=.false.
                                          
      ww_tens(MU,NU)  = -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)-AMP(   5)
     &             -AMP(   6)-AMP(   7)-AMP(   8)-AMP(   9)-AMP(  10)
     &             -AMP(  11)-AMP(  12)-AMP(  13)-AMP(  14)-AMP(  15)
     &             -AMP(  16)-AMP(  17)-AMP(  18)-AMP(  19)-AMP(  20)
     &             -AMP(  21)-AMP(  22)-AMP(  23)-AMP(  24)-AMP(  25)
     &             -AMP(  26)-AMP(  27)-AMP(  28)
      if (with_secondhiggs) then
        ww_tens(MU,NU) = ww_tens(MU,NU)-AMP(29)-AMP(30)
      endif


      if (procid .eq. WPhadWMjj) then
        ! new graphs for W+ decay

      CALL JIOXXX(W(1,7   ),W(1,4   ),GAU ,ZERO    ,ZERO    ,W(1,41  ))    
      CALL FVOXXX(W(1,5   ),W(1,41  ),GAL ,ZERO    ,ZERO    ,W(1,42  ))    
      CALL IOVXXX(W(1,6   ),W(1,42  ),W(1,1   ),GWF ,AMP(29  )) 
      CALL jwmwpa_anomal3(W(1,1   ),W(1,41  ),W(1,43))
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,43  ),GWF ,AMP(30  ))            
      CALL FVOXXX(W(1,4   ),W(1,29  ),GAU ,ZERO    ,ZERO    ,W(1,43  ))    
      CALL JIOXXX(W(1,3   ),W(1,43  ),GWF ,WMASS   ,WWIDTH  ,W(1,44  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,44  ),GWF ,AMP(31  ))    

        ww_tens(MU,NU)  = ww_tens(MU,NU) -AMP(  29)-AMP(  30)-AMP(  31)

      endif

      if (procid .eq. WPWMhadjj) then
        ! new graphs for W- decay

      CALL JIOXXX(W(1,6   ),W(1,11  ),GAU ,ZERO   ,ZERO  ,W(1,41  ))    
      CALL IOVXXX(W(1,3   ),W(1,14  ),W(1,41  ),GAL ,AMP(29  ))            
      CALL wwa_anomal3(W(1,2   ),W(1,21  ),W(1,41  ),AMP(30  ))
      CALL IOVXXX(W(1,6   ),W(1,34  ),W(1,29  ),GAU ,AMP(31  ))            

        ww_tens(MU,NU)  = ww_tens(MU,NU) -AMP(  29)-AMP(  30)-AMP(  31)

      endif

          ENDDO
      ENDDO

      END


      subroutine ZtoWW_had(P,z)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : z -> e+ ve mu- vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   5) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=  13) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,2:5)
      complex*16 z(0:5)
C  
C LOCAL VARIABLES 
C  
      REAL*8 Q1(0:3)
      INTEGER I, mu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
      INTEGER NHEL(2:5), ihel
      DATA (NHEL(IHEL),IHEL=2,5) / +1,-1,-1,+1/
      Save NHEL
c  lepton spinors and W+- polarization vectors
#include "tensor.inc"

      logical lswitch
      parameter (lswitch=.true.)
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/global.inc"
#include "VBFNLO/utilities/coupl_haddecay.inc"
#include "VBFNLO/utilities/process.inc"
C                                                                          
C ----------
C BEGIN CODE
C ----------
      if (lswitch) then      ! read in lepton an W states from common block
         do i=1,6
            w(i,2) = wep(i)
            w(i,3) = wve(i)
            w(i,4) = wmu(i)
            w(i,5) = wvm(i)
            w(i,6) = wp(i)
c            w(i,) = wm(i)
         enddo
      endif

      do mu = 0,3
         q1(mu) = p(mu,2)+p(mu,3)+p(mu,4)+p(mu,5) !Z
      enddo

c
!      if (.not.lswitch) then
!         CALL IXXXXX(P(0,3   ),ZERO ,NHEL(2   ),-1,W(1,2   )) !e+
!         CALL OXXXXX(P(0,2   ),ZERO ,NHEL(3   ),+1,W(1,3   )) !ve       
!         CALL OXXXXX(P(0,5   ),ZERO ,NHEL(4   ),+1,W(1,4   )) !mu-       
!         CALL IXXXXX(P(0,4   ),ZERO ,NHEL(5   ),-1,W(1,5   )) !vm~       
!         CALL JIOXXX(W(1,2   ),W(1,3),GWF ,WMASS,WWIDTH,W(1,6))  
!      endif  
      do mu = 0,3
      CALL VCARTX(Q1(0     ),ZMASS ,Zwidth,MU,-1,W(1,1   )) !Z
      CALL FVOXXX(W(1,4   ),W(1,6   ),GWF ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL IOVXXX(W(1,5   ),W(1,7   ),W(1,1   ),GWM_ZUN ,AMP(1   ))            ! W-
      CALL jwmwpz_anomal3(W(1,6   ),W(1,1   ),W(1,8))
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,8   ),GWF ,AMP(2   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GWM_ZDL ,ZERO    ,ZERO    ,W(1,9   ))    ! W-
      CALL IOVXXX(W(1,5   ),W(1,9   ),W(1,6   ),GWF ,AMP(3   ))            
      CALL FVOXXX(W(1,3   ),W(1,1   ),GWP_ZUN ,ZERO    ,ZERO    ,W(1,10  ))    ! W+
      CALL JIOXXX(W(1,2   ),W(1,10  ),GWF ,WMASS   ,WWIDTH  ,W(1,11  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,11  ),GWF ,AMP(4   ))            
      CALL FVIXXX(W(1,2   ),W(1,1   ),GWP_ZDL ,ZERO    ,ZERO    ,W(1,12  ))    ! W+
      CALL JIOXXX(W(1,12  ),W(1,3   ),GWF ,WMASS   ,WWIDTH  ,W(1,13  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,13  ),GWF ,AMP(5   ))            
      Z(mu) = -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)-AMP(   5)
      enddo
      z(4) = dcmplx(q1(0),q1(3))
      z(5) = dcmplx(q1(1),q1(2))
c
      return
      END


      subroutine AtoWW_had(P,a)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : a -> e+ ve mu- vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   4) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=  12) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,2:5)
      complex*16 a(0:5)
C  
C LOCAL VARIABLES 
C
      REAL*8 Q1(0:3)
      INTEGER I, mu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
      INTEGER NHEL(2:5), ihel
      DATA (NHEL(IHEL),IHEL=2,5) /+1,-1,-1,+1/
      Save NHEL
c  lepton spinors and W+- polarization vectors
#include "tensor.inc"

      logical lswitch
      parameter (lswitch=.true.)
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/global.inc"
#include "VBFNLO/utilities/coupl_haddecay.inc"
#include "VBFNLO/utilities/process.inc"
C                                                                          
C ----------
C BEGIN CODE
C ----------
      if (lswitch) then      ! read in lepton an W states from common block
         do i=1,6
            w(i,2) = wep(i)
            w(i,3) = wve(i)
            w(i,4) = wmu(i)
            w(i,5) = wvm(i)
            w(i,6) = wp(i)
c            w(i,) = wm(i)
         enddo
      endif

      do mu = 0,3
         q1(mu) = p(mu,2)+p(mu,3)+p(mu,4)+p(mu,5) !A
      enddo

!      if (.not.lswitch) then
!         CALL IXXXXX(P(0,3   ),ZERO ,NHEL(2   ),-1,W(1,2   )) !e+       
!         CALL OXXXXX(P(0,2   ),ZERO ,NHEL(3   ),+1,W(1,3   )) !ve       
!         CALL OXXXXX(P(0,5   ),ZERO ,NHEL(4   ),+1,W(1,4   )) !mu-       
!         CALL IXXXXX(P(0,4   ),ZERO ,NHEL(5   ),-1,W(1,5   )) !vm~       
!         CALL JIOXXX(W(1,2   ),W(1,3),GWF ,WMASS,WWIDTH,W(1,6))    
!      endif
      do mu = 0,3
      CALL VCARTX(Q1(0),ZERO ,ZERO, MU,-1,W(1,1   )) !A
      CALL jwmwpa_anomal3(W(1,6   ),W(1,1   ),W(1,7))
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,7   ),GWF ,AMP(1   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GWM_ADL ,ZERO    ,ZERO    ,W(1,8   ))    ! W-
      CALL IOVXXX(W(1,5   ),W(1,8   ),W(1,6   ),GWF ,AMP(2   ))            
      CALL FVIXXX(W(1,2   ),W(1,1   ),GWP_ADL ,ZERO    ,ZERO    ,W(1,9   ))    ! W+
      CALL JIOXXX(W(1,9   ),W(1,3   ),GWF ,WMASS   ,WWIDTH  ,W(1,10  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,10  ),GWF ,AMP(3   ))            
      a(mu) = -AMP(   1)-AMP(   2)-AMP(   3)

      if (procid .eq. WPhadWMjj) then
        ! new graphs for W+ decay

      CALL FVOXXX(W(1,3   ),W(1,1   ),GAU ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL JIOXXX(W(1,2   ),W(1,11  ),GWF ,WMASS   ,WWIDTH  ,W(1,12  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,12  ),GWF ,AMP(4   ))            

      a(mu) = a(mu) -AMP(   4)

      endif

      if (procid .eq. WPWMhadjj) then
        ! new graphs for W- decay

      CALL FVOXXX(W(1,4   ),W(1,6   ),GWF ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL IOVXXX(W(1,5   ),W(1,11  ),W(1,1   ),GAU ,AMP(4   ))            

      a(mu) = a(mu) -AMP(   4)

      endif


      enddo
      a(4) = dcmplx(q1(0),q1(3))
      a(5) = dcmplx(q1(1),q1(2))
c
      END


      subroutine WVtoWM_had(id,Q,v,wma_tens,wmz_tens)
C  Input:   Q(*)        one of the two incoming boson momenta 
c           id = 1      Q = q1 = W- momentum
c           id = 2      Q = q2 = gamma/Z momentum
c  OUPTPUT: wma_tens(mu,nu)  lepton tensor for w gamma--> mu- nubar
c           wmz_tens(mu,nu)  lepton tensor for w Z    --> mu- nubar
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : w- z -> mu- vm~  
C and           w- a -> mu- vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   6) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=   9)
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      integer id
      real*8 q(0:3), v(0:3,4)
      complex*16 wma_tens(0:3,0:3), wmz_tens(0:3,0:3)
C  
C LOCAL VARIABLES 
C  
      INTEGER I, MU, NU
      real*8 q2sq, Q1(0:3), Q2(0:3)
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS), denz
c  lepton spinors and W+- polarization vectors
#include "tensor.inc"

      logical ldebug
      parameter (ldebug=.false.)
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/global.inc"
#include "VBFNLO/utilities/coupl_haddecay.inc"
#include "VBFNLO/utilities/process.inc"
C                                                                          
C ----------
C BEGIN CODE
C ----------
      if (id.eq.1) then
         q2(0) = dreal(wm(5))
         q2(1) = dreal(wm(6))
         q2(2) = dimag(wm(6))
         q2(3) = dimag(wm(5))
         do mu = 0,3
            q1(mu) = q(mu)
            q2(mu) = q2(mu)-q(mu)
         enddo
      elseif (id.eq.2) then
         q1(0) = dreal(wm(5))
         q1(1) = dreal(wm(6))
         q1(2) = dimag(wm(6))
         q1(3) = dimag(wm(5))
         do mu = 0,3
            q2(mu) = q(mu)
            q1(mu) = q1(mu)-q(mu)
         enddo
      endif

      do i=1,6                  ! read in lepton states from common block
         w(i,3) = wmu(i)
         w(i,4) = wvm(i)
      enddo

      q2sq = q2(0)**2-q2(1)**2-q2(2)**2-q2(3)**2
      denz = q2sq/dcmplx(q2sq-zmass**2,zmass*zwidth)
      DO MU = 0,3
         CALL VCARTX(Q1(0),WMASS ,Wwidth, MU,-1,W(1,1)) !W-       
         CALL FVOXXX(WMU,W(1,1),GWF ,ZERO,ZERO,W(1,6))    
         DO NU = 0,3
            CALL VCARTX(Q2(0),ZERO  ,ZERO  , NU,-1,W(1,2)) !A / (Z)
            CALL FVOXXX(WMU,W(1,2),GWM_ZDL ,ZERO,ZERO,W(1,5))               ! W-
            CALL IOVXXX(WVM,W(1,5),W(1,1),GWF ,AMP(1))            
            CALL IOVXXX(WVM,W(1,6),W(1,2),GWM_ZUN ,AMP(2))                  ! W-
            CALL jwmwpa_anomal3(W(1,1),W(1,2),W(1,7)) !for A
            CALL jwmwpz_anomal3(W(1,1),W(1,2),W(1,8)) !for Z
            CALL IOVXXX(WVM,WMU,W(1,7),GWF ,AMP(3)) !for A
            CALL IOVXXX(WVM,WMU,W(1,8),GWF ,AMP(4)) !for Z
            CALL FVOXXX(WMU,W(1,2),GWM_ADL ,ZERO,ZERO,W(1,9))  ! for A             ! W-
            CALL IOVXXX(WVM,W(1,9),W(1,1),GWF ,AMP(5))            
           
            wmz_tens(mu,nu) = (-AMP(   1)-AMP(   2)-AMP(   4))*denz
            wma_tens(mu,nu) = -(amp(5)+amp(3))

            if (procid .eq. WPWMhadjj) then
              ! new graphs for W- decay

            CALL IOVXXX(WVM,W(1,6),W(1,2),GWM_AUN ,AMP(6))                  ! W-

            wma_tens(mu,nu) = wma_tens(mu,nu) -AMP(   6)

            endif

         enddo
      enddo

      end


      subroutine WVtoWP_had(id,Q,v,wpa_tens,wpz_tens)
C  Input:   Q(*)        one of the two incoming boson momenta 
c           id = 1      Q = q1 = W+ momentum
c           id = 2      Q = q2 = gamma/Z momentum
c  OUPTPUT: wpa_tens(mu,nu)  lepton tensor for w gamma--> e+nu
c           wpz_tens(mu,nu)  lepton tensor for w Z    --> e+nu
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : w+(q1) z(q2) -> e+ ve  
C FOR PROCESS : w+(q1) a(q2) -> e+ ve  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   6) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=   10) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS
C
      integer id
      real*8 q(0:3), v(0:3,4)
      complex*16 wpa_tens(0:3,0:3), wpz_tens(0:3,0:3)
C  
C LOCAL VARIABLES 
C  
      INTEGER I, MU, NU
      real*8 q2sq, Q1(0:3), Q2(0:3)
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS), denz
c  lepton spinors and W+- polarization vectors
#include "tensor.inc"

      logical ldebug
      parameter (ldebug=.false.)
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/global.inc"
#include "VBFNLO/utilities/coupl_haddecay.inc"
#include "VBFNLO/utilities/process.inc"
C                                                                          
C ----------
C BEGIN CODE
C ----------
      
      if (id.eq.1) then
         q2(0) = dreal(wp(5))
         q2(1) = dreal(wp(6))
         q2(2) = dimag(wp(6))
         q2(3) = dimag(wp(5))
         do mu = 0,3
            q1(mu) = q(mu)
            q2(mu) = q2(mu)-q(mu)
         enddo
      elseif (id.eq.2) then
         q1(0) = dreal(wp(5))
         q1(1) = dreal(wp(6))
         q1(2) = dimag(wp(6))
         q1(3) = dimag(wp(5))
         do mu = 0,3
            q2(mu) = q(mu)
            q1(mu) = q1(mu)-q(mu)
         enddo
      endif

      do i=1,6                  ! read in lepton states from common block
         w(i,3) = wep(i)
         w(i,4) = wve(i)
      enddo

      q2sq = q2(0)**2-q2(1)**2-q2(2)**2-q2(3)**2
      denz = q2sq/dcmplx(q2sq-zmass**2,zmass*zwidth)
      DO MU = 0,3
         DO NU = 0,3
            CALL VCARTX(Q1(0),WMASS ,Wwidth, MU,-1,W(1,1)) !W+       
            CALL VCARTX(Q2(0),ZERO  ,ZERO  , NU,-1,W(1,2)) !A / (Z)
            CALL FVIXXX(W(1,3),W(1,2),GWP_ZDL ,ZERO,ZERO,W(1,5))        ! W+
            CALL IOVXXX(W(1,5),W(1,4),W(1,1),GWF ,AMP(1)) ! for Z           
            CALL FVIXXX(W(1,3),W(1,1),GWF ,ZERO,ZERO,W(1,6))      
            CALL IOVXXX(W(1,6),W(1,4),W(1,2),GWP_ZUN ,AMP(2)) ! for Z          ! W+
            CALL jwpawm_anomal3(W(1,2),W(1,1),W(1,7) ) !for A
            CALL jwpzwm_anomal3(W(1,2),W(1,1),W(1,8) ) !for Z
            CALL IOVXXX(W(1,3),W(1,4),W(1,7),GWF ,AMP(3)) !for A
            CALL IOVXXX(W(1,3),W(1,4),W(1,8),GWF ,AMP(4)) !for Z
            CALL FVIXXX(W(1,3),W(1,2),GWP_ADL ,ZERO,ZERO,W(1,9))        ! W+
            CALL IOVXXX(W(1,9),W(1,4),W(1,1),GWF ,AMP(5)) ! for A

            wpz_tens(mu,nu) = (-AMP(   1)-AMP(   2)-AMP(   4))*denz
            wpa_tens(mu,nu) = -(amp(5)+amp(3))

            if (procid .eq. WPhadWMjj) then
              ! new graphs for W+ decay

            CALL FVIXXX(W(1,3),W(1,1),GWF ,ZERO,ZERO,W(1,10))      
            CALL IOVXXX(W(1,10),W(1,4),W(1,2),GWP_AUN ,AMP(6)) ! for A          ! W+

            wpa_tens(mu,nu) = wpa_tens(mu,nu) -AMP(   6)

            endif

         enddo
      enddo

      end

