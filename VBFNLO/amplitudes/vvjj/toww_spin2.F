C modified version of toww.F, including exchange of spin-2 particles
C
C by Jessica Frank

      subroutine AAtoWW_spin2(Q1,Q2,P,aa)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C
C
C  
C FOR PROCESS : a a -> e+ ve mu- vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  17) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=  29) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 aa(0:3,0:3)
C  
C LOCAL VARIABLES 
C  
      INTEGER I, MU, NU
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(18,NWAVEFUNCS)
      INTEGER NHEL(3:6), ihel
      DATA (NHEL(IHEL),IHEL=3,6) / +1,-1,-1,+1/
      Save NHEL
c  lepton spinors and W+- polarization vectors
#include "tensor.inc"

      logical lswitch
      parameter (lswitch=.true.)

c only for spin-2 formfactor
      double precision absmomsp2sq, absmoma1sq, absmoma2sq, formfac
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/spin2coupl.inc"
C                                                                          
C ----------
C BEGIN CODE
C ----------
      if (lswitch) then      ! read in lepton an W states from common block
         do i=1,6
            w(i,3) = wep(i)
            w(i,4) = wve(i)
            w(i,5) = wmu(i)
            w(i,6) = wvm(i)
            w(i,19) = wp(i)
            w(i,20) = wm(i)
         enddo
      endif

      DO MU = 0,3
         DO NU = 0,3
      CALL VCARTX(Q1(0),ZERO ,ZERO, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),ZERO ,ZERO, NU,-1,W(1,2   )) 

      if (.not.lswitch) then
         CALL IXXXXX(P(0,4   ),ZERO ,NHEL(3   ),-1,W(1,3   ))        
         CALL OXXXXX(P(0,3   ),ZERO ,NHEL(4   ),+1,W(1,4   ))        
         CALL OXXXXX(P(0,6   ),ZERO ,NHEL(5   ),+1,W(1,5   ))        
         CALL IXXXXX(P(0,5   ),ZERO ,NHEL(6   ),-1,W(1,6   ))  
      endif
      CALL FVIXXX(W(1,3   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL JIOXXX(W(1,7   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,8   ))    
      CALL JVVXXX(W(1,8   ),W(1,1   ),GWWA ,WMASS   ,WWIDTH  ,W(1,9))
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,9   ),GWF ,AMP(1   ))            
      CALL FVOXXX(W(1,5   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,10  ))    
      CALL IOVXXX(W(1,6   ),W(1,10  ),W(1,8   ),GWF ,AMP(2   ))            
      CALL FVIXXX(W(1,7   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL JIOXXX(W(1,11  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,12  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,12  ),GWF ,AMP(3   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,13  ))    
      CALL JIOXXX(W(1,13  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,14  ))    
      CALL JVVXXX(W(1,14  ),W(1,2   ),GWWA ,WMASS   ,WWIDTH  ,W(1,15))
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,15  ),GWF ,AMP(4   ))            
      CALL FVOXXX(W(1,5   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,16  ))    
      CALL IOVXXX(W(1,6   ),W(1,16  ),W(1,14  ),GWF ,AMP(5   ))            
      CALL FVIXXX(W(1,13  ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,17  ))    
      CALL JIOXXX(W(1,17  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,18  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,18  ),GWF ,AMP(6   )) 
      if (.not.lswitch) then
         CALL JIOXXX(W(1,3),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,19))    
         CALL JIOXXX(W(1,6),W(1,5   ),GWF ,WMASS   ,WWIDTH  ,W(1,20)) 
      endif
      CALL JVVXXX(W(1,19  ),W(1,2   ),GWWA ,WMASS   ,WWIDTH  ,W(1,21))
      CALL VVVXXX(W(1,20  ),W(1,21  ),W(1,1   ),GWWA ,AMP(7   ))           
      CALL FVIXXX(W(1,6   ),W(1,19  ),GWF ,ZERO    ,ZERO    ,W(1,22  ))    
      CALL IOVXXX(W(1,22  ),W(1,10  ),W(1,2   ),GAL ,AMP(8   ))            
      CALL JIOXXX(W(1,6   ),W(1,10  ),GWF ,WMASS   ,WWIDTH  ,W(1,23  ))    
      CALL VVVXXX(W(1,23  ),W(1,19  ),W(1,2   ),GWWA ,AMP(9   ))           
      CALL JVVXXX(W(1,19  ),W(1,1   ),GWWA ,WMASS   ,WWIDTH  ,W(1,24))
      CALL VVVXXX(W(1,20  ),W(1,24  ),W(1,2   ),GWWA ,AMP(10  ))           
      CALL IOVXXX(W(1,22  ),W(1,16  ),W(1,1   ),GAL ,AMP(11  ))            
      CALL JIOXXX(W(1,6   ),W(1,16  ),GWF ,WMASS   ,WWIDTH  ,W(1,25  ))    
      CALL VVVXXX(W(1,25  ),W(1,19  ),W(1,1   ),GWWA ,AMP(12  ))           
      CALL W3W3XX(W(1,20  ),W(1,1   ),W(1,19  ),W(1,2   ),GWWA ,GWWA ,     
     &     AMP(13  ))      
    
c additional spin-2 graphs
c singlet

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      AMP(14  )=0.0d0

      else

      CALL UAAXXX_SING(W(1,1 ),W(1,2 ) , W(1,26))
      CALL WWTXXX_SING(W(1,19 ),W(1,20 ),W(1,26 ) , AMP(14 ))

      endif

c triplet

      if ((f6.EQ.0.0d0) .and. (f7.EQ.0.0d0)) then

      AMP(15  )=0.0d0
      AMP(16  )=0.0d0
      AMP(17  )=0.0d0

      else

      CALL UAAXXX_TRIPN(W(1,1 ),W(1,2 ) , W(1,27))
      CALL WWTXXX_TRIPN(W(1,19 ),W(1,20 ),W(1,27 ) , AMP(15 ))

      CALL UWAXXX_TRIPPM(W(1,20 ),W(1,2 ) , W(1,28))
      CALL WATXXX_TRIPPM(W(1,19 ),W(1,1 ),W(1,28 ) , AMP(16 ))
      CALL UWAXXX_TRIPPM(W(1,19 ),W(1,2 ) , W(1,29))
      CALL WATXXX_TRIPPM(W(1,20 ),W(1,1 ),W(1,29 ) , AMP(17 ))

      endif
c end of additional spin-2 graphs     

c formfactor
      absmoma1sq=abs((dreal(W(5,1)))**2-(dreal(W(6,1)))**2
     &               -(dimag(W(6,1)))**2-(dimag(W(5,1)))**2)

      absmoma2sq=abs((dreal(W(5,2)))**2-(dreal(W(6,2)))**2
     &               -(dimag(W(6,2)))**2-(dimag(W(5,2)))**2)

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      absmomsp2sq=abs((dreal(W(17,27)))**2-(dreal(W(18,27)))**2
     &                -(dimag(W(18,27)))**2-(dimag(W(17,27)))**2)

      else

      absmomsp2sq=abs((dreal(W(17,26)))**2-(dreal(W(18,26)))**2
     &                -(dimag(W(18,26)))**2-(dimag(W(17,26)))**2)

      endif

      formfac=(lambdaff**2/(absmoma1sq+lambdaff**2)*
     &         lambdaff**2/(absmoma2sq+lambdaff**2)*
     &         lambdaff**2/(absmomsp2sq+lambdaff**2))**nff

                
      AA(MU,NU)  = -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)-AMP(   5)
     &             -AMP(   6)-AMP(   7)-AMP(   8)-AMP(   9)-AMP(  10)
     &             -AMP(  11)-AMP(  12)-AMP(  13)+
     &             (-AMP(  14)-AMP(  15)-AMP(  16)-AMP(  17))
     &           *formfac

         enddo
      enddo
      END


      subroutine AZtoWW_spin2(Q1,Q2,P,az)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : a z -> e+ ve mu- vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  23) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=  34) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 az(0:3,0:3)
C  
C LOCAL VARIABLES 
C  
      INTEGER I, MU, NU
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(18,NWAVEFUNCS)
      INTEGER NHEL(3:6), ihel
      DATA (NHEL(IHEL),IHEL=3,6) / +1,-1,-1,+1/
      Save NHEL
c  lepton spinors and W+- polarization vectors
#include "tensor.inc"

      logical lswitch
      parameter (lswitch=.true.)

c only for spin-2 formfactor
      double precision absmomsp2sq, absmomasq, absmomzsq, formfac
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/spin2coupl.inc"
C                                                                          
C ----------
C BEGIN CODE
C ----------
      if (lswitch) then      ! read in lepton an W states from common block
         do i=1,6
            w(i,3) = wep(i)
            w(i,4) = wve(i)
            w(i,5) = wmu(i)
            w(i,6) = wvm(i)
            w(i,25) = wp(i)
            w(i,14) = wm(i)
         enddo
      endif

      DO MU = 0,3
         DO NU = 0,3
      CALL VCARTX(Q1(0),ZERO ,ZERO, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),ZMASS ,Zwidth, NU,-1,W(1,2   )) 
      if (.not.lswitch) then
         CALL IXXXXX(P(0,4   ),ZERO ,NHEL(3   ),-1,W(1,3   ))        
         CALL OXXXXX(P(0,3   ),ZERO ,NHEL(4   ),+1,W(1,4   ))        
         CALL OXXXXX(P(0,6   ),ZERO ,NHEL(5   ),+1,W(1,5   ))        
         CALL IXXXXX(P(0,5   ),ZERO ,NHEL(6   ),-1,W(1,6   ))        
      endif
      CALL FVIXXX(W(1,3   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL JIOXXX(W(1,7   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,8   ))    
      CALL JVVXXX(W(1,8   ),W(1,1   ),GWWA ,WMASS   ,WWIDTH  ,W(1,         
     &     9   ))                                                          
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,9   ),GWF ,AMP(1   ))            
      CALL FVOXXX(W(1,5   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,10  ))    
      CALL IOVXXX(W(1,6   ),W(1,10  ),W(1,8   ),GWF ,AMP(2   ))            
      CALL FVIXXX(W(1,7   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL JIOXXX(W(1,11  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,12  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,12  ),GWF ,AMP(3   ))            
      CALL FVOXXX(W(1,4   ),W(1,2   ),GZN ,ZERO    ,ZERO    ,W(1,13  ))    
      if (.not.lswitch)
     &   CALL JIOXXX(W(1,6),W(1,5   ),GWF ,WMASS   ,WWIDTH  ,W(1,14  ))    
      CALL JIOXXX(W(1,3   ),W(1,13  ),GWF ,WMASS   ,WWIDTH  ,W(1,15  ))    
      CALL VVVXXX(W(1,14  ),W(1,15  ),W(1,1   ),GWWA ,AMP(4   ))           
      CALL JIOXXX(W(1,6   ),W(1,10  ),GWF ,WMASS   ,WWIDTH  ,W(1,16  ))    
      CALL IOVXXX(W(1,3   ),W(1,13  ),W(1,16  ),GWF ,AMP(5   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,17  ))    
      CALL JIOXXX(W(1,17  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,18  ))    
      CALL FVOXXX(W(1,5   ),W(1,18  ),GWF ,ZERO    ,ZERO    ,W(1,19  ))    
      CALL IOVXXX(W(1,6   ),W(1,19  ),W(1,2   ),GZN ,AMP(6   ))            
      CALL JVVXXX(W(1,18  ),W(1,2   ),GWWZ ,WMASS   ,WWIDTH  ,W(1,         
     &     20  ))                                                          
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,20  ),GWF ,AMP(7   ))            
      CALL FVOXXX(W(1,5   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,21  ))    
      CALL IOVXXX(W(1,6   ),W(1,21  ),W(1,18  ),GWF ,AMP(8   ))            
      CALL FVIXXX(W(1,17  ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,22  ))    
      CALL JIOXXX(W(1,22  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,23  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,23  ),GWF ,AMP(9   ))            
      CALL JIOXXX(W(1,17  ),W(1,13  ),GWF ,WMASS   ,WWIDTH  ,W(1,24  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,24  ),GWF ,AMP(10  ))            
      if (.not.lswitch) 
     &   CALL JIOXXX(W(1,3),W(1,4   ),GWF ,WMASS ,WWIDTH  ,W(1,25))    
      CALL FVIXXX(W(1,6   ),W(1,2   ),GZN ,ZERO    ,ZERO    ,W(1,26  ))    
      CALL IOVXXX(W(1,26  ),W(1,10  ),W(1,25  ),GWF ,AMP(11  ))            
      CALL JVVXXX(W(1,25  ),W(1,2   ),GWWZ ,WMASS   ,WWIDTH  ,W(1,         
     &     27  ))                                                          
      CALL VVVXXX(W(1,14  ),W(1,27  ),W(1,1   ),GWWA ,AMP(12  ))           
      CALL FVIXXX(W(1,6   ),W(1,25  ),GWF ,ZERO    ,ZERO    ,W(1,28  ))    
      CALL IOVXXX(W(1,28  ),W(1,10  ),W(1,2   ),GZL ,AMP(13  ))            
      CALL VVVXXX(W(1,16  ),W(1,25  ),W(1,2   ),GWWZ ,AMP(14  ))           
      CALL JVVXXX(W(1,25  ),W(1,1),GWWA ,WMASS   ,WWIDTH  ,W(1,29) )
      CALL IOVXXX(W(1,26  ),W(1,5   ),W(1,29  ),GWF ,AMP(15  ))            
      CALL VVVXXX(W(1,14  ),W(1,29  ),W(1,2   ),GWWZ ,AMP(16  ))           
      CALL IOVXXX(W(1,28  ),W(1,21  ),W(1,1   ),GAL ,AMP(17  ))            
      CALL JIOXXX(W(1,6   ),W(1,21  ),GWF ,WMASS   ,WWIDTH  ,W(1,30  ))    
      CALL VVVXXX(W(1,30  ),W(1,25  ),W(1,1   ),GWWA ,AMP(18  ))           
      CALL W3W3XX(W(1,14  ),W(1,2   ),W(1,25  ),W(1,1   ),GWWZ ,GWWA ,     
     &     AMP(19  ))    
       
c additional spin-2 graphs
c singlet

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      AMP(20  )=0.0d0

      else

c save time if couplings are equal and therefore T-gamma-Z-vertex is zero
        if ((f1.EQ.f2) .and. (f3.EQ.f4)) then   
         AMP(20  )=0.0d0
         W(17,31 )= W(5,1  )+W(5,2  )
         W(18,31 )= W(6,1  )+W(6,2  )
        else

      CALL UAZXXX_SING(W(1,1 ),W(1,2 ) , W(1,31))
      CALL WWTXXX_SING(W(1,25 ),W(1,14 ),W(1,31 ) , AMP(20 ))

        endif
      endif

c triplet

      if ((f6.EQ.0.0d0) .and. (f7.EQ.0.0d0)) then

      AMP(21  )=0.0d0
      AMP(22  )=0.0d0
      AMP(23  )=0.0d0

      else

      CALL UAZXXX_TRIPN(W(1,1 ),W(1,2 ) , W(1,32))
      CALL WWTXXX_TRIPN(W(1,25 ),W(1,14 ),W(1,32 ) , AMP(21 ))
      CALL UWZXXX_TRIPPM(W(1,14 ),W(1,2 ) , W(1,33))
      CALL WATXXX_TRIPPM(W(1,25 ),W(1,1 ),W(1,33 ) , AMP(22 ))
      CALL UWZXXX_TRIPPM(W(1,25 ),W(1,2 ) , W(1,34))
      CALL WATXXX_TRIPPM(W(1,14 ),W(1,1 ),W(1,34 ) , AMP(23 ))

      endif
c end of additional spin-2 graphs    

c formfactor
      absmomasq=abs((dreal(W(5,1)))**2-(dreal(W(6,1)))**2
     &               -(dimag(W(6,1)))**2-(dimag(W(5,1)))**2)

      absmomzsq=abs((dreal(W(5,2)))**2-(dreal(W(6,2)))**2
     &               -(dimag(W(6,2)))**2-(dimag(W(5,2)))**2)

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      absmomsp2sq=abs((dreal(W(17,32)))**2-(dreal(W(18,32)))**2
     &                -(dimag(W(18,32)))**2-(dimag(W(17,32)))**2)

      else

      absmomsp2sq=abs((dreal(W(17,31)))**2-(dreal(W(18,31)))**2
     &                -(dimag(W(18,31)))**2-(dimag(W(17,31)))**2)

      endif

      formfac=(lambdaff**2/(absmomasq+lambdaff**2)*
     &         lambdaff**2/(absmomzsq+lambdaff**2)*
     &         lambdaff**2/(absmomsp2sq+lambdaff**2))**nff   

                             
      AZ(MU,NU)  = -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)-AMP(   5)
     &             -AMP(   6)-AMP(   7)-AMP(   8)-AMP(   9)-AMP(  10)
     &             -AMP(  11)-AMP(  12)-AMP(  13)-AMP(  14)-AMP(  15)
     &             -AMP(  16)-AMP(  17)-AMP(  18)-AMP(  19)+
     &             (-AMP(  20)-AMP(  21)-AMP(  22)-AMP(  23))
     &           *formfac


         ENDDO
      ENDDO

      END


      subroutine ZZtoWW_spin2(Q1,Q2,P,zz)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : z z -> e+ ve mu- vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  36) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=  44) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 zz(0:3,0:3)
C  
C LOCAL VARIABLES 
C  
      INTEGER I, MU, NU
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(18,NWAVEFUNCS)
      INTEGER NHEL(3:6), ihel
      DATA (NHEL(IHEL),IHEL=3,6) / +1,-1,-1,+1/
      Save NHEL
c  lepton spinors and W+- polarization vectors
#include "tensor.inc"

      logical lswitch
      parameter (lswitch=.true.)

c only for spin-2 formfactor
      double precision absmomsp2sq, absmomz1sq, absmomz2sq, formfac
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/spin2coupl.inc"
C                                                                          
C ----------
C BEGIN CODE
C ----------
      if (lswitch) then      ! read in lepton an W states from common block
         do i=1,6
            w(i,3) = wep(i)
            w(i,4) = wve(i)
            w(i,5) = wmu(i)
            w(i,6) = wvm(i)
            w(i,34) = wp(i)
            w(i,15) = wm(i)
         enddo
      endif

      DO MU = 0,3
c         print*," mu = ",mu,":",(q1(mu)+q2(mu))/(p(mu,3)+p(mu,4)+p(mu,5)+p(mu,6))
         DO NU = 0,3
      CALL VCARTX(Q1(0),ZMASS ,Zwidth, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),ZMASS ,Zwidth, NU,-1,W(1,2   ))

      if (.not.lswitch) then 
         CALL IXXXXX(P(0,4   ),ZERO ,NHEL(3   ),-1,W(1,3   ))        
         CALL OXXXXX(P(0,3   ),ZERO ,NHEL(4   ),+1,W(1,4   ))        
         CALL OXXXXX(P(0,6   ),ZERO ,NHEL(5   ),+1,W(1,5   ))        
         CALL IXXXXX(P(0,5   ),ZERO ,NHEL(6   ),-1,W(1,6   ))
      endif        
      CALL FVIXXX(W(1,3   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL JIOXXX(W(1,7   ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,8   ))    
      CALL FVOXXX(W(1,5   ),W(1,8   ),GWF ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,6   ),W(1,9   ),W(1,1   ),GZN ,AMP(1   ))            
      CALL JVVXXX(W(1,8   ),W(1,1   ),GWWZ ,WMASS   ,WWIDTH  ,W(1,10))
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,10  ),GWF ,AMP(2   ))            
      CALL FVOXXX(W(1,5   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL IOVXXX(W(1,6   ),W(1,11  ),W(1,8   ),GWF ,AMP(3   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GZN ,ZERO    ,ZERO    ,W(1,12  ))    
      CALL FVIXXX(W(1,6   ),W(1,2   ),GZN ,ZERO    ,ZERO    ,W(1,13  ))    
      CALL JIOXXX(W(1,3   ),W(1,12  ),GWF ,WMASS   ,WWIDTH  ,W(1,14  ))    
      CALL IOVXXX(W(1,13  ),W(1,5   ),W(1,14  ),GWF ,AMP(4   ))            
      if (.not.lswitch) then
         CALL JIOXXX(W(1,6),W(1,5),GWF ,WMASS   ,WWIDTH  ,W(1,15)) 
      endif   
      CALL VVVXXX(W(1,15  ),W(1,14  ),W(1,2   ),GWWZ ,AMP(5   ))           
      CALL FVOXXX(W(1,5   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,16  ))    
      CALL JIOXXX(W(1,6   ),W(1,16  ),GWF ,WMASS   ,WWIDTH  ,W(1,17  ))    
      CALL IOVXXX(W(1,3   ),W(1,12  ),W(1,17  ),GWF ,AMP(6   ))            
      CALL FVOXXX(W(1,12  ),W(1,2   ),GZN ,ZERO    ,ZERO    ,W(1,18  ))    
      CALL IOVXXX(W(1,3   ),W(1,18  ),W(1,15  ),GWF ,AMP(7   ))            
      CALL FVIXXX(W(1,7   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,19  ))    
      CALL JIOXXX(W(1,19  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,20  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,20  ),GWF ,AMP(8   ))            
      CALL JIOXXX(W(1,7   ),W(1,12  ),GWF ,WMASS   ,WWIDTH  ,W(1,21  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,21  ),GWF ,AMP(9   ))            
      CALL FVOXXX(W(1,4   ),W(1,2   ),GZN ,ZERO    ,ZERO    ,W(1,22  ))    
      CALL FVIXXX(W(1,6   ),W(1,1   ),GZN ,ZERO    ,ZERO    ,W(1,23  ))    
      CALL JIOXXX(W(1,3   ),W(1,22  ),GWF ,WMASS   ,WWIDTH  ,W(1,24  ))    
      CALL IOVXXX(W(1,23  ),W(1,5   ),W(1,24  ),GWF ,AMP(10  ))            
      CALL VVVXXX(W(1,15  ),W(1,24  ),W(1,1   ),GWWZ ,AMP(11  ))           
      CALL JIOXXX(W(1,6   ),W(1,11  ),GWF ,WMASS   ,WWIDTH  ,W(1,25  ))    
      CALL IOVXXX(W(1,3   ),W(1,22  ),W(1,25  ),GWF ,AMP(12  ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,26  ))    
      CALL JIOXXX(W(1,26  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,27  ))    
      CALL FVOXXX(W(1,5   ),W(1,27  ),GWF ,ZERO    ,ZERO    ,W(1,28  ))    
      CALL IOVXXX(W(1,6   ),W(1,28  ),W(1,2   ),GZN ,AMP(13  ))            
      CALL JVVXXX(W(1,27  ),W(1,2   ),GWWZ ,WMASS   ,WWIDTH  ,W(1,29))
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,29  ),GWF ,AMP(14  ))            
      CALL IOVXXX(W(1,6   ),W(1,16  ),W(1,27  ),GWF ,AMP(15  ))            
      CALL FVOXXX(W(1,22  ),W(1,1   ),GZN ,ZERO    ,ZERO    ,W(1,30  ))    
      CALL IOVXXX(W(1,3   ),W(1,30  ),W(1,15  ),GWF ,AMP(16  ))            
      CALL FVIXXX(W(1,26  ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,31  ))    
      CALL JIOXXX(W(1,31  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,32  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,32  ),GWF ,AMP(17  ))            
      CALL JIOXXX(W(1,26  ),W(1,22  ),GWF ,WMASS   ,WWIDTH  ,W(1,33  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,33  ),GWF ,AMP(18  ))            
      if (.not.lswitch)
     &   CALL JIOXXX(W(1,3),W(1,4),GWF ,WMASS,WWIDTH  ,W(1,34))    
      CALL JVVXXX(W(1,34),W(1,2),GWWZ ,WMASS ,WWIDTH  ,W(1,35))
      CALL IOVXXX(W(1,23  ),W(1,5   ),W(1,35  ),GWF ,AMP(19  ))            
      CALL IOVXXX(W(1,13  ),W(1,11  ),W(1,34  ),GWF ,AMP(20  ))            
      CALL VVVXXX(W(1,15  ),W(1,35  ),W(1,1   ),GWWZ ,AMP(21  ))           
      CALL FVIXXX(W(1,6   ),W(1,34  ),GWF ,ZERO    ,ZERO    ,W(1,36  ))    
      CALL IOVXXX(W(1,36  ),W(1,11  ),W(1,2   ),GZL ,AMP(22  ))            
      CALL VVVXXX(W(1,25  ),W(1,34  ),W(1,2   ),GWWZ ,AMP(23  ))           
      CALL IOVXXX(W(1,23  ),W(1,16  ),W(1,34  ),GWF ,AMP(24  ))            
      CALL JVVXXX(W(1,34  ),W(1,1   ),GWWZ ,WMASS   ,WWIDTH  ,W(1,37))
      CALL IOVXXX(W(1,13  ),W(1,5   ),W(1,37  ),GWF ,AMP(25  ))            
      CALL VVVXXX(W(1,15  ),W(1,37  ),W(1,2   ),GWWZ ,AMP(26  ))           
      CALL IOVXXX(W(1,36  ),W(1,16  ),W(1,1   ),GZL ,AMP(27  ))            
      CALL VVVXXX(W(1,17  ),W(1,34  ),W(1,1   ),GWWZ ,AMP(28  ))           
      CALL FVOXXX(W(1,5   ),W(1,34  ),GWF ,ZERO    ,ZERO    ,W(1,38  ))    
      CALL IOVXXX(W(1,23  ),W(1,38  ),W(1,2   ),GZN ,AMP(29  ))            
      CALL IOVXXX(W(1,13  ),W(1,38  ),W(1,1   ),GZN ,AMP(30  ))            
      CALL HVVXXX(W(1,1   ),W(1,2   ),GZZH ,HMASS   ,HWIDTH  ,W(1,39))
      CALL JVSXXX(W(1,34  ),W(1,39  ),GWWH ,WMASS   ,WWIDTH  ,W(1,40))
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,40  ),GWF ,AMP(31  ))            
      CALL W3W3XX(W(1,15  ),W(1,1   ),W(1,34  ),W(1,2   ),GWWZ ,GWWZ ,     
     &     AMP(32  ))       
 
c additional spin-2 graphs
c singlet

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      AMP(33  )=0.0d0

      else

      CALL UZZXXX_SING(W(1,1 ),W(1,2 ) , W(1,41))
      CALL WWTXXX_SING(W(1,34 ),W(1,15 ),W(1,41 ) , AMP(33 ))

      endif

c triplet

      if ((f6.EQ.0.0d0) .and. (f7.EQ.0.0d0)) then

      AMP(34  )=0.0d0
      AMP(35  )=0.0d0
      AMP(36  )=0.0d0

      else

      CALL UZZXXX_TRIPN(W(1,1 ),W(1,2 ) , W(1,42))
      CALL WWTXXX_TRIPN(W(1,34 ),W(1,15 ),W(1,42 ) , AMP(34 ))

      CALL UWZXXX_TRIPPM(W(1,15 ),W(1,2 ) , W(1,43))
      CALL WZTXXX_TRIPPM(W(1,34 ),W(1,1 ),W(1,43 ) , AMP(35 ))
      CALL UWZXXX_TRIPPM(W(1,34 ),W(1,2 ) , W(1,44))
      CALL WZTXXX_TRIPPM(W(1,15 ),W(1,1 ),W(1,44 ) , AMP(36 ))

      endif
c end of additional spin-2 graphs  

c formfactor
      absmomz1sq=abs((dreal(W(5,1)))**2-(dreal(W(6,1)))**2
     &               -(dimag(W(6,1)))**2-(dimag(W(5,1)))**2)

      absmomz2sq=abs((dreal(W(5,2)))**2-(dreal(W(6,2)))**2
     &               -(dimag(W(6,2)))**2-(dimag(W(5,2)))**2)

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      absmomsp2sq=abs((dreal(W(17,42)))**2-(dreal(W(18,42)))**2
     &                -(dimag(W(18,42)))**2-(dimag(W(17,42)))**2)

      else

      absmomsp2sq=abs((dreal(W(17,41)))**2-(dreal(W(18,41)))**2
     &                -(dimag(W(18,41)))**2-(dimag(W(17,41)))**2)

      endif

      formfac=(lambdaff**2/(absmomz1sq+lambdaff**2)*
     &         lambdaff**2/(absmomz2sq+lambdaff**2)*
     &         lambdaff**2/(absmomsp2sq+lambdaff**2))**nff  

                                         
      ZZ(MU,NU)  = -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)-AMP(   5)
     &             -AMP(   6)-AMP(   7)-AMP(   8)-AMP(   9)-AMP(  10)
     &             -AMP(  11)-AMP(  12)-AMP(  13)-AMP(  14)-AMP(  15)
     &             -AMP(  16)-AMP(  17)-AMP(  18)-AMP(  19)-AMP(  20)
     &             -AMP(  21)-AMP(  22)-AMP(  23)-AMP(  24)-AMP(  25)
     &             -AMP(  26)-AMP(  27)-AMP(  28)-AMP(  29)-AMP(  30)
     &             -AMP(  31)-AMP(  32)+
     &             (-AMP(  33)-AMP(  34)-AMP(  35)-AMP(  36))
     &         *formfac


          ENDDO
      ENDDO


      END


      subroutine WWtoWW_spin2(Q1,Q2,P,ww)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : w- w+ -> e+ ve mu- vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  32) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=  44)
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 ww(0:3,0:3)
C  
C LOCAL VARIABLES 
C  
      INTEGER I, MU, NU
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(18,NWAVEFUNCS)
      INTEGER NHEL(3:6), ihel
      DATA (NHEL(IHEL),IHEL=3,6) / +1,-1,-1,+1/
      Save NHEL
c  lepton spinors and W+- polarization vectors
#include "tensor.inc"

      logical lswitch
      parameter (lswitch=.true.)

c only for spin-2 formfactor
      double precision absmomsp2sq, absmomwpsq, absmomwmsq, formfac
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/spin2coupl.inc"
C                                                                          
C ----------
C BEGIN CODE
C ----------
      if (lswitch) then      ! read in lepton an W states from common block
         do i=1,6
            w(i,3) = wep(i)
            w(i,4) = wve(i)
            w(i,5) = wmu(i)
            w(i,6) = wvm(i)
            w(i,21) = wp(i)
            w(i,18) = wm(i)
         enddo
      endif

      DO MU = 0,3
         DO NU = 0,3
      CALL VCARTX(Q1(0),wMASS ,wwidth, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),wMASS ,wwidth, NU,-1,W(1,2   )) 

      if (.not.lswitch) then
         CALL IXXXXX(P(0,4   ),ZERO ,NHEL(3   ),-1,W(1,3   ))        
         CALL OXXXXX(P(0,3   ),ZERO ,NHEL(4   ),+1,W(1,4   ))        
         CALL OXXXXX(P(0,6   ),ZERO ,NHEL(5   ),+1,W(1,5   ))        
         CALL IXXXXX(P(0,5   ),ZERO ,NHEL(6   ),-1,W(1,6   ))  
      endif      
      CALL FVIXXX(W(1,3   ),W(1,2   ),GWF ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL JIOXXX(W(1,7   ),W(1,4   ),GZN ,ZMASS   ,ZWIDTH  ,W(1,8   ))    
      CALL FVOXXX(W(1,5   ),W(1,8   ),GZL ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,6   ),W(1,9   ),W(1,1   ),GWF ,AMP(1   ))            
      CALL JVVXXX(W(1,1   ),W(1,8   ),GWWZ ,WMASS   ,WWIDTH  ,W(1,10))
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,10  ),GWF ,AMP(2   ))            
      CALL FVOXXX(W(1,5   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL IOVXXX(W(1,6   ),W(1,11  ),W(1,8   ),GZN ,AMP(3   ))            
      CALL FVIXXX(W(1,7   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,12  ))    
      CALL JIOXXX(W(1,12  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,13  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,13  ),GWF ,AMP(4   ))            
      CALL FVOXXX(W(1,4   ),W(1,2   ),GWF ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL FVIXXX(W(1,6   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,15  ))    
      CALL JIOXXX(W(1,3   ),W(1,14  ),GAL ,ZERO    ,ZERO    ,W(1,16  ))    
      CALL IOVXXX(W(1,15  ),W(1,5   ),W(1,16  ),GAL ,AMP(5   ))            
      CALL JIOXXX(W(1,3   ),W(1,14  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,17  ))    
      CALL IOVXXX(W(1,15  ),W(1,5   ),W(1,17  ),GZL ,AMP(6   ))      
      if (.not.lswitch) 
     &   CALL JIOXXX( W(1,6),W(1,5),GWF ,WMASS,WWIDTH,W(1,18) )    
      CALL VVVXXX(W(1,18  ),W(1,1   ),W(1,16  ),GWWA ,AMP(7   ))           
      CALL VVVXXX(W(1,18  ),W(1,1   ),W(1,17  ),GWWZ ,AMP(8   ))           
      CALL JIOXXX(W(1,6   ),W(1,11  ),GZN ,ZMASS   ,ZWIDTH  ,W(1,19  ))    
      CALL IOVXXX(W(1,3   ),W(1,14  ),W(1,19  ),GZL ,AMP(9   ))            
      CALL FVOXXX(W(1,14  ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,20  ))    
      CALL IOVXXX(W(1,3   ),W(1,20  ),W(1,18  ),GWF ,AMP(10  ))  
      if (.not.lswitch)
     &   CALL JIOXXX(W(1,3),W(1,4),GWF ,WMASS,WWIDTH,W(1,21))    
      CALL JVVXXX(W(1,2   ),W(1,21  ),GWWA ,ZERO    ,ZERO    ,W(1,22))
      CALL IOVXXX(W(1,15  ),W(1,5   ),W(1,22  ),GAL ,AMP(11  ))            
      CALL JVVXXX(W(1,2   ),W(1,21  ),GWWZ ,ZMASS   ,ZWIDTH  ,W(1,23))
      CALL IOVXXX(W(1,15  ),W(1,5   ),W(1,23  ),GZL ,AMP(12  ))            
      CALL VVVXXX(W(1,18  ),W(1,1   ),W(1,22  ),GWWA ,AMP(13  ))           
      CALL VVVXXX(W(1,18  ),W(1,1   ),W(1,23  ),GWWZ ,AMP(14  ))           
      CALL HVVXXX(W(1,2   ),W(1,21  ),GWWH ,HMASS   ,HWIDTH  ,W(1,24))
      CALL VVSXXX(W(1,18  ),W(1,1   ),W(1,24  ),GWWH ,AMP(15  ))    
      CALL FVIXXX(W(1,6   ),W(1,21  ),GWF ,ZERO    ,ZERO    ,W(1,25  ))    
      CALL IOVXXX(W(1,25  ),W(1,11  ),W(1,2   ),GWF ,AMP(16  ))            
      CALL VVVXXX(W(1,2   ),W(1,21  ),W(1,19  ),GWWZ ,AMP(17  ))           
      CALL JVVXXX(W(1,2   ),W(1,1   ),GWWZ ,ZMASS   ,ZWIDTH  ,W(1,26))
      CALL FVOXXX(W(1,4   ),W(1,26  ),GZN ,ZERO    ,ZERO    ,W(1,27  ))    
      CALL JIOXXX(W(1,3   ),W(1,27  ),GWF ,WMASS   ,WWIDTH  ,W(1,28  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,28  ),GWF ,AMP(18  ))            
      CALL JVVXXX(W(1,2   ),W(1,1   ),GWWA ,ZERO    ,ZERO    ,W(1,29))
      CALL FVIXXX(W(1,3   ),W(1,29  ),GAL ,ZERO    ,ZERO    ,W(1,30  ))    
      CALL JIOXXX(W(1,30  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,31  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,31  ),GWF ,AMP(19  ))            
      CALL FVIXXX(W(1,3   ),W(1,26  ),GZL ,ZERO    ,ZERO    ,W(1,32  ))    
      CALL JIOXXX(W(1,32  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,33  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,33  ),GWF ,AMP(20  ))            
      CALL FVOXXX(W(1,5   ),W(1,21  ),GWF ,ZERO    ,ZERO    ,W(1,34  ))    
      CALL IOVXXX(W(1,15  ),W(1,34  ),W(1,2   ),GWF ,AMP(21  ))            
      CALL JVVXXX(W(1,21  ),W(1,29  ),GWWA ,WMASS   ,WWIDTH  ,W(1,35))
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,35  ),GWF ,AMP(22  ))            
      CALL JVVXXX(W(1,21  ),W(1,26  ),GWWZ ,WMASS   ,WWIDTH  ,W(1,36))
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,36  ),GWF ,AMP(23  ))            
      CALL HVVXXX(W(1,2   ),W(1,1   ),GWWH ,HMASS   ,HWIDTH  ,W(1,37))
      CALL JVSXXX(W(1,21  ),W(1,37  ),GWWH ,WMASS   ,WWIDTH  ,W(1,38))
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,38  ),GWF ,AMP(24  ))         
      CALL FVOXXX(W(1,5   ),W(1,29  ),GAL ,ZERO    ,ZERO    ,W(1,39  ))    
      CALL IOVXXX(W(1,6   ),W(1,39  ),W(1,21  ),GWF ,AMP(25  ))            
      CALL FVOXXX(W(1,5   ),W(1,26  ),GZL ,ZERO    ,ZERO    ,W(1,40  ))    
      CALL IOVXXX(W(1,6   ),W(1,40  ),W(1,21  ),GWF ,AMP(26  ))            
      CALL IOVXXX(W(1,6   ),W(1,34  ),W(1,26  ),GZN ,AMP(27  ))            
      CALL WWWWXX(W(1,2   ),W(1,1   ),W(1,18  ),W(1,21  ),GWWZ ,GWWA ,     
     &     AMP(28  ))    
  
c additional spin-2 graphs
c singlet

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      AMP(29  )=0.0d0
      AMP(30  )=0.0d0

      else

      CALL UWWXXX_SING(W(1,21 ),W(1,2  ) , W(1,41 ))
      CALL WWTXXX_SING(W(1,1  ),W(1,18 ),W(1,41 ) , AMP(29  ))    
      CALL UWWXXX_SING(W(1,1  ),W(1,2  ) , W(1,42 ))
      CALL WWTXXX_SING(W(1,21 ),W(1,18 ),W(1,42 ) , AMP(30  ))

      endif

c triplet

      if ((f6.EQ.0.0d0) .and. (f7.EQ.0.0d0)) then

      AMP(31  )=0.0d0
      AMP(32  )=0.0d0

      else

      CALL UWWXXX_TRIPN(W(1,21 ),W(1,2  ) , W(1,43 ))
      CALL WWTXXX_TRIPN(W(1,1  ),W(1,18 ),W(1,43 ) , AMP(31  ))
      CALL UWWXXX_TRIPN(W(1,1  ),W(1,2  ) , W(1,44 ))
      CALL WWTXXX_TRIPN(W(1,21 ),W(1,18 ),W(1,44 ) , AMP(32  ))

      endif
C end of spin-2 graphs  

c formfactor
      absmomwmsq=abs((dreal(W(5,1)))**2-(dreal(W(6,1)))**2
     &               -(dimag(W(6,1)))**2-(dimag(W(5,1)))**2)

      absmomwpsq=abs((dreal(W(5,2)))**2-(dreal(W(6,2)))**2
     &               -(dimag(W(6,2)))**2-(dimag(W(5,2)))**2)

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      absmomsp2sq=abs((dreal(W(17,44)))**2-(dreal(W(18,44)))**2
     &                -(dimag(W(18,44)))**2-(dimag(W(17,44)))**2)

      else

      absmomsp2sq=abs((dreal(W(17,42)))**2-(dreal(W(18,42)))**2
     &                -(dimag(W(18,42)))**2-(dimag(W(17,42)))**2)

      endif

      formfac=(lambdaff**2/(absmomwpsq+lambdaff**2)*
     &         lambdaff**2/(absmomwmsq+lambdaff**2)*
     &         lambdaff**2/(absmomsp2sq+lambdaff**2))**nff     

                                        
      WW(MU,NU)  = -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)-AMP(   5)
     &             -AMP(   6)-AMP(   7)-AMP(   8)-AMP(   9)-AMP(  10)
     &             -AMP(  11)-AMP(  12)-AMP(  13)-AMP(  14)-AMP(  15)
     &             -AMP(  16)-AMP(  17)-AMP(  18)-AMP(  19)-AMP(  20)
     &             -AMP(  21)-AMP(  22)-AMP(  23)-AMP(  24)-AMP(  25)
     &             -AMP(  26)-AMP(  27)-AMP(  28)+
     &            (-AMP(  29)-AMP(  30)-AMP(  31)-AMP(  32))
     &               *formfac


          ENDDO
      ENDDO

      END

