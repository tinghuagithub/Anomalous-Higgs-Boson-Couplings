c
c in this file leptonic tensors needed for qq -> qq ZZ, ZZ -> 2l 2v 
c and ZZ -> 4l are computed for specific helicities (h)
c		
c ------------------------------------------------------------			
c ------------------------------------------------------------	

      subroutine wwtozz_kk(q1,q2,P,h,ww)
	
      IMPLICIT NONE

      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 ww(0:3,0:3)
      integer lsign(3:6,4),ll,h
      

	! possible lepton helicities:
	data (lsign(ll,1),ll=3,6) / -1, -1, -1, -1/  !h=1
	data (lsign(ll,2),ll=3,6) / -1, -1,  1,  1/  !h=2
	data (lsign(ll,3),ll=3,6) /  1,  1, -1, -1/  !h=3
	data (lsign(ll,4),ll=3,6) /  1,  1,  1,  1/  !h=4
	
	call WWtoZZ1_kk(q1,q2,P,lsign(3,h),ww(0,0))
	
	! helicity combi nr.h is selected
	
	end
		
c ------------------------------------------------------------	

      subroutine WWtoZZ1_kk(q1,q2,P,lsign,ww)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : w+ w- -> e+ e- mu+ mu-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  49) 
      INTEGER    NWAVEFUNCS 
      PARAMETER (NWAVEFUNCS=  51) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 ww(0:3,0:3)
      integer lsign(3:6)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,MU, NU
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
c
c  lepton spinors and Z polarization vectors
#include "tensorz.inc"
C  
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/kkcoupl.inc"
      integer k
      Complex*16 AMPK1(1:kkhw),AMPK2(1:kkhw),AMPK3(1:kkhw),AMPK4(1:kkhw),AMPK5(1:kkhw),AMPK6(1:kkhw),
     &           AMPK9(1:kkhw),AMPK10(1:kkhw),AMPKH(1:kkhh),
     &           KK1(6,1:kkhw),KK2(6,1:kkhw),KK3(6,1:kkhw),KK5(6,1:kkhw),KKH1(6,1:kkhh),KKH2(6,1:kkhh)

      logical lswitch
      parameter (lswitch=.true.)
C                                                                          
C ----------
C BEGIN CODE
C ----------
  
      if (lswitch) then
      	do i = 1,6
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,5) = lup(i)
	 w(i,6) = lum(i)
	
         w(i,8)  = au(i)
         w(i,10) = zu(i)
         w(i,23) = ze(i)
         w(i,25) = ae(i)
      	enddo
      else 
      	CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3   ),-1,W(1,3   ))	 
      	CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4   ),+1,W(1,4   ))	 
     	CALL IXXXXX(P(0,5   ),ZERO ,-lsign(5   ),-1,W(1,5   ))	 
      	CALL OXXXXX(P(0,6   ),ZERO ,+lsign(6   ),+1,W(1,6   ))	 

        CALL JIOXXX(W(1,5   ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,8   ))	  
        CALL JIOXXX(W(1,5   ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,10  ))	   
        CALL JIOXXX(W(1,3   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,23  ))	   
        CALL JIOXXX(W(1,3   ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,25  ))	   
      endif

      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),WMASS ,wwidth, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),WMASS ,wwidth, NU,-1,W(1,2   )) 
 
      CALL FVOXXX(W(1,4   ),W(1,2   ),GWF ,ZERO    ,ZERO    ,W(1,7   ))     
      CALL JIOXXX(W(1,3   ),W(1,7   ),GWF ,WMASS   ,WWIDTH  ,W(1,9   ))    
      CALL VVVXXX(W(1,1   ),W(1,9   ),W(1,8   ),GWWA ,AMP(1   ))                 
      CALL VVVXXX(W(1,1   ),W(1,9   ),W(1,10  ),gwwz ,AMP(2   ))           
      CALL FVIXXX(W(1,5   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL JIOXXX(W(1,11  ),W(1,6   ),GWF ,WMASS   ,WWIDTH  ,W(1,12  ))    
      CALL IOVXXX(W(1,3   ),W(1,7   ),W(1,12  ),GWF ,AMP(3   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,13  ))    
      CALL JIOXXX(W(1,13  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,14  ))    
      CALL FVIXXX(W(1,5   ),W(1,14  ),GWF ,ZERO    ,ZERO    ,W(1,15  ))    
      CALL IOVXXX(W(1,15  ),W(1,6   ),W(1,2   ),GWF ,AMP(4   ))            
      CALL JVVXXX(W(1,14  ),W(1,2   ),GWWA ,ZERO    ,ZERO    ,W(1,         
     &     16  ))                                                          
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,16  ),GAL ,AMP(5   ))            
      CALL JVVXXX(W(1,14  ),W(1,2   ),gwwz ,ZMASS   ,ZWIDTH  ,W(1,         
     &     17  ))                                                          
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,17  ),GZL ,AMP(6   ))            
      CALL FVOXXX(W(1,7   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,18  ))    
      CALL IOVXXX(W(1,3   ),W(1,18  ),W(1,8   ),GAL ,AMP(7   ))            
      CALL IOVXXX(W(1,3   ),W(1,18  ),W(1,10  ),GZL ,AMP(8   ))            
      CALL FVIXXX(W(1,13  ),W(1,2   ),GWF ,ZERO    ,ZERO    ,W(1,19  ))    
      CALL JIOXXX(W(1,19  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,20  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,20  ),GAL ,AMP(9   ))            
      CALL JIOXXX(W(1,19  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,21  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,21  ),GZL ,AMP(10  ))            
      CALL JIOXXX(W(1,13  ),W(1,7   ),GZN ,ZMASS   ,ZWIDTH  ,W(1,22  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,22  ),GZL ,AMP(11  ))                  
      CALL FVOXXX(W(1,6   ),W(1,2   ),GWF ,ZERO    ,ZERO    ,W(1,24  ))    
      CALL IOVXXX(W(1,11  ),W(1,24  ),W(1,23  ),GZN ,AMP(12  ))                  
      CALL JVVXXX(W(1,2   ),W(1,25  ),GWWA ,WMASS   ,WWIDTH  ,W(1,         
     &     26  ))                                                          
      CALL VVVXXX(W(1,1   ),W(1,26  ),W(1,8   ),GWWA ,AMP(13  ))           
      CALL VVVXXX(W(1,1   ),W(1,26  ),W(1,10  ),gwwz ,AMP(14  ))           
      CALL JVVXXX(W(1,2   ),W(1,23  ),gwwz ,WMASS   ,WWIDTH  ,W(1,         
     &     27  ))                                                          
      CALL VVVXXX(W(1,1   ),W(1,27  ),W(1,8   ),GWWA ,AMP(15  ))           
      CALL VVVXXX(W(1,1   ),W(1,27  ),W(1,10  ),gwwz ,AMP(16  ))           
      CALL FVOXXX(W(1,6   ),W(1,25  ),GAL ,ZERO    ,ZERO    ,W(1,28  ))    
      CALL IOVXXX(W(1,11  ),W(1,28  ),W(1,2   ),GWF ,AMP(17  ))            
      CALL FVOXXX(W(1,6   ),W(1,23  ),GZL ,ZERO    ,ZERO    ,W(1,29  ))    
      CALL IOVXXX(W(1,11  ),W(1,29  ),W(1,2   ),GWF ,AMP(18  ))            
      CALL VVVXXX(W(1,12  ),W(1,2   ),W(1,25  ),GWWA ,AMP(19  ))           
      CALL VVVXXX(W(1,12  ),W(1,2   ),W(1,23  ),gwwz ,AMP(20  ))           
      CALL JVVXXX(W(1,25  ),W(1,1   ),GWWA ,WMASS   ,WWIDTH  ,W(1,         
     &     30  ))                                                          
      CALL IOVXXX(W(1,5   ),W(1,24  ),W(1,30  ),GWF ,AMP(21  ))            
      CALL JVVXXX(W(1,23  ),W(1,1   ),gwwz ,WMASS   ,WWIDTH  ,W(1,         
     &     31  ))                                                          
      CALL IOVXXX(W(1,5   ),W(1,24  ),W(1,31  ),GWF ,AMP(22  ))            
      CALL VVVXXX(W(1,30  ),W(1,2   ),W(1,8   ),GWWA ,AMP(23  ))           
      CALL VVVXXX(W(1,30  ),W(1,2   ),W(1,10  ),gwwz ,AMP(24  ))           
      CALL VVVXXX(W(1,31  ),W(1,2   ),W(1,8   ),GWWA ,AMP(25  ))           
      CALL VVVXXX(W(1,31  ),W(1,2   ),W(1,10  ),gwwz ,AMP(26  ))           
      CALL JVVXXX(W(1,1   ),W(1,2   ),GWWA ,ZERO    ,ZERO    ,W(1,         
     &     32  ))                                                          
      CALL FVOXXX(W(1,4   ),W(1,32  ),GAL ,ZERO    ,ZERO    ,W(1,33  ))    
      CALL JIOXXX(W(1,3   ),W(1,33  ),GAL ,ZERO    ,ZERO    ,W(1,34  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,34  ),GAL ,AMP(27  ))            
      CALL JIOXXX(W(1,3   ),W(1,33  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,35  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,35  ),GZL ,AMP(28  ))            
      CALL JVVXXX(W(1,1   ),W(1,2   ),gwwz ,ZMASS   ,ZWIDTH  ,W(1,         
     &     36  ))                                                          
      CALL FVOXXX(W(1,4   ),W(1,36  ),GZL ,ZERO    ,ZERO    ,W(1,37  ))    
      CALL JIOXXX(W(1,3   ),W(1,37  ),GAL ,ZERO    ,ZERO    ,W(1,38  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,38  ),GAL ,AMP(29  ))            
      CALL JIOXXX(W(1,3   ),W(1,37  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,39  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,39  ),GZL ,AMP(30  ))            
      CALL FVIXXX(W(1,3   ),W(1,32  ),GAL ,ZERO    ,ZERO    ,W(1,40  ))    
      CALL JIOXXX(W(1,40  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,41  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,41  ),GAL ,AMP(31  ))            
      CALL JIOXXX(W(1,40  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,42  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,42  ),GZL ,AMP(32  ))            
      CALL FVIXXX(W(1,3   ),W(1,36  ),GZL ,ZERO    ,ZERO    ,W(1,43  ))    
      CALL JIOXXX(W(1,43  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,44  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,44  ),GAL ,AMP(33  ))            
      CALL JIOXXX(W(1,43  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,45  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,45  ),GZL ,AMP(34  ))            
      CALL FVIXXX(W(1,5   ),W(1,25  ),GAL ,ZERO    ,ZERO    ,W(1,46  ))    
      CALL IOVXXX(W(1,46  ),W(1,24  ),W(1,1   ),GWF ,AMP(35  ))            
      CALL FVIXXX(W(1,5   ),W(1,23  ),GZL ,ZERO    ,ZERO    ,W(1,47  ))    
      CALL IOVXXX(W(1,47  ),W(1,24  ),W(1,1   ),GWF ,AMP(36  ))   
      
      if (hswitchzz) then         
      CALL HVVXXX(W(1,1   ),W(1,2   ),GWWH ,HMASS   ,HWIDTH  ,W(1,         
     &     48  ))                                                          
      CALL JVSXXX(W(1,23  ),W(1,48  ),GZZH ,ZMASS   ,ZWIDTH  ,W(1,         
     &     49  ))                                                          
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,49  ),GZL ,AMP(37  ))
      endif
          
      CALL FVIXXX(W(1,5   ),W(1,32  ),GAL ,ZERO    ,ZERO    ,W(1,50  ))    
      CALL IOVXXX(W(1,50  ),W(1,6   ),W(1,25  ),GAL ,AMP(38  ))            
      CALL IOVXXX(W(1,50  ),W(1,6   ),W(1,23  ),GZL ,AMP(39  ))            
      CALL FVIXXX(W(1,5   ),W(1,36  ),GZL ,ZERO    ,ZERO    ,W(1,51  ))    
      CALL IOVXXX(W(1,51  ),W(1,6   ),W(1,25  ),GAL ,AMP(40  ))            
      CALL IOVXXX(W(1,51  ),W(1,6   ),W(1,23  ),GZL ,AMP(41  ))            
      CALL IOVXXX(W(1,46  ),W(1,6   ),W(1,32  ),GAL ,AMP(42  ))            
      CALL IOVXXX(W(1,47  ),W(1,6   ),W(1,32  ),GAL ,AMP(43  ))            
      CALL IOVXXX(W(1,46  ),W(1,6   ),W(1,36  ),GZL ,AMP(44  ))            
      CALL IOVXXX(W(1,47  ),W(1,6   ),W(1,36  ),GZL ,AMP(45  ))            

c
c  KK-Amplitudes
c
      do k=1,kkhw
      CALL JVVXXX(W(1,2   ),W(1,25  ),GWWA_K(k,0,0) ,W1MASS_K(k),W1WIDTH_K(k),KK1(1,k ))
      CALL VVVXXX(W(1,1   ),KK1(1,k),W(1,8   ),GWWA_K(k,0,0) ,AMPK1(k ))
c
      CALL VVVXXX(W(1,1   ),KK1(1,k),W(1,10  ),gwwz_K(k,0,0) ,AMPK2(k ))
c      
      CALL JVVXXX(W(1,2   ),W(1,23  ),gwwz_K(k,0,0) ,W1MASS_K(k) ,W1WIDTH_K(k) , KK2(1,k ))
      CALL VVVXXX(W(1,1   ),KK2(1,k) ,W(1,8   ),GWWA_K(k,0,0) ,AMPK3(k ))
c      
      CALL VVVXXX(W(1,1   ),KK2(1,k),W(1,10  ),gwwz_K(k,0,0) ,AMPK4(k ))
c
      CALL JVVXXX(W(1,25  ),W(1,1   ),GWWA_K(k,0,0) ,W1MASS_K(k) ,W1WIDTH_K(k), KK3(1,k ))           
      CALL VVVXXX(KK3(1,k),W(1,2   ),W(1,8   ),GWWA_K(k,0,0) ,AMPK5(k ))           
c
      CALL VVVXXX(KK3(1,k),W(1,2   ),W(1,10  ),gwwz_K(k,0,0) ,AMPK6(k ))
c
      CALL JVVXXX(W(1,23  ),W(1,1   ),gwwz_K(k,0,0) ,W1MASS_K(k),W1WIDTH_K(k), KK5(1,k)  )
      CALL VVVXXX(KK5(1,k),W(1,2   ),W(1,8   ),GWWA_K(k,0,0) ,AMPK9( k  ))           
c      
      CALL VVVXXX(KK5(1,k),W(1,2   ),W(1,10  ),gwwz_K(k,0,0) ,AMPK10(k  ))
      enddo
c
      if (hswitchzz) then
      do k=1,kkhh
      CALL HVVXXX(W(1,1   ),W(1,2   ),GWWH_K(0,0,k) ,H1MASS_K(k),H1WIDTH_K(k),KKH1(1,k ))
      CALL JVSXXX(W(1,23  ),KKH1(1,k), GZZH_K(0,0,k) ,ZMASS   ,ZWIDTH  ,KKH2(1,k  ))  
      CALL IOVXXX(W(1,5   ),W(1,6   ),KKH2(1,k ),GZL ,AMPKH(k ))
      enddo  
      endif
c
c  4-vertex
c
 
      CALL W3W3XX(W(1,1   ),W(1,25  ),W(1,2   ),W(1,8   ),1.d0 ,GWWAA_K(0,0,0,0) ,     
     &     AMP(46  ))                                                      
      CALL W3W3XX(W(1,1   ),W(1,10  ),W(1,2   ),W(1,25  ),1.d0 ,GWWAZ_K(0,0,0,0) ,     
     &     AMP(47  ))                                                      
      CALL W3W3XX(W(1,1   ),W(1,23  ),W(1,2   ),W(1,8   ),1.d0 ,GWWAZ_K(0,0,0,0) ,     
     &     AMP(48  ))                                                      
      CALL W3W3XX(W(1,1   ),W(1,23  ),W(1,2   ),W(1,10  ),1.d0 ,gwwzz_K(0,0,0,0) ,     
     &     AMP(49  ))     
c      
      WW(MU,NU) = +AMP(   1)+AMP(   2)+AMP(   3)+AMP(   4)+AMP(   5)
     &             +AMP(   6)+AMP(   7)+AMP(   8)+AMP(   9)+AMP(  10)
     &             +AMP(  11)+AMP(  12)+AMP(  13)+AMP(  14)+AMP(  15)
     &             +AMP(  16)+AMP(  17)+AMP(  18)+AMP(  19)+AMP(  20)
     &             +AMP(  21)+AMP(  22)+AMP(  23)+AMP(  24)+AMP(  25)
     &             +AMP(  26)+AMP(  27)+AMP(  28)+AMP(  29)+AMP(  30)
     &             +AMP(  31)+AMP(  32)+AMP(  33)+AMP(  34)+AMP(  35)
     &             +AMP(  36)+AMP(  37)+AMP(  38)+AMP(  39)+AMP(  40)
     &             +AMP(  41)+AMP(  42)+AMP(  43)+AMP(  44)+AMP(  45)
     &             +AMP(  46)+AMP(  47)+AMP(  48)+AMP(  49)
      
      do k=1,kkhw
      WW(MU,NU) =  WW(MU,NU)+AMPK1(k)+AMPK2(k)+AMPK3(k)+AMPK4(k)+AMPK5(k)+AMPK6(k)
     &             +AMPK9(k)+AMPK10(k)
      enddo
      do k=1,kkhh
      WW(MU,NU) =  WW(MU,NU)+AMPKH(k)
      enddo     
            ENDDO
      ENDDO

      END
c ------------------------------------------------------------	

      subroutine wwtozzn_kk(q1,q2,P,h,ww)
	
      IMPLICIT NONE

      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 ww(0:3,0:3)
      integer lsign(3:6,4),ll,h
      

	! possible lepton helicities:
	data (lsign(ll,1),ll=3,6) / -1, -1, -1, -1/  !h=1 -> zero
	data (lsign(ll,2),ll=3,6) / -1, -1,  1,  1/  !h=2
	data (lsign(ll,3),ll=3,6) /  1,  1, -1, -1/  !h=3 -> zero
	data (lsign(ll,4),ll=3,6) /  1,  1,  1,  1/  !h=4
	
	call WWtoZZN1_kk(q1,q2,P,lsign(3,h),ww)
	
	end
		
c ------------------------------------------------------------	

      subroutine WWtoZZN1_kk(q1,q2,P,lsign,ww)
C  
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : w+ w- -> e+ e- vm vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  28) 
      INTEGER    NWAVEFUNCS    
      PARAMETER (NWAVEFUNCS=  41) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 ww(0:3,0:3)
      integer lsign(3:6)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,MU, NU
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
c  lepton spinors and Z polarization vectors
#include "tensorz.inc"
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/kkcoupl.inc"
      integer k
      Complex*16 AMPK1(1:kkhw),AMPK2(1:kkhw),AMPK3(1:kkhw),AMPK4(1:kkhw),
     &           AMPKH(1:kkhh),
     &           KK1(6,1:kkhw),KK2(6,1:kkhw),KK3(6,1:kkhw),KK4(6,1:kkhw),KKH1(6,1:kkhh),KKH2(6,1:kkhh)
      logical lswitch
      parameter (lswitch=.true.)
C                                                                          
C  
C ----------
C BEGIN CODE
C ----------
   
      if (lswitch) then
      	do i = 1,4
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,6) = lup(i)
	 w(i,5) = lum(i)
		
         w(i,8)  = -zu(i)
         w(i,20) =  ae(i)
         w(i,22) =  ze(i)
      	enddo
      	do i = 5,6
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,6) = lup(i)
	 w(i,5) = lum(i)
		
         w(i,8)  = zu(i)
         w(i,20) = ae(i)
         w(i,22) = ze(i)
      	enddo
      else 
      	CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3   ),-1,W(1,3   ))	 
      	CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4   ),+1,W(1,4   ))	 
     	CALL OXXXXX(P(0,5   ),ZERO ,+lsign(5   ),+1,W(1,5   ))	 
      	CALL IXXXXX(P(0,6   ),ZERO ,-lsign(6   ),-1,W(1,6   ))	 

	 CALL JIOXXX(W(1,6   ),W(1,5   ),GZN ,ZMASS   ,ZWIDTH  ,W(1,8	))    
	 CALL JIOXXX(W(1,3   ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,20  ))    
	 CALL JIOXXX(W(1,3   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,22  ))    
      endif

      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),WMASS ,wwidth, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),WMASS ,wwidth, NU,-1,W(1,2   )) 
 
      CALL FVOXXX(W(1,4   ),W(1,2   ),GWF ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL JIOXXX(W(1,3   ),W(1,7   ),GWF ,WMASS   ,WWIDTH  ,W(1,9   ))    
      CALL VVVXXX(W(1,1   ),W(1,9   ),W(1,8   ),gwwz ,AMP(1   ))           
      CALL FVOXXX(W(1,5   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,10  ))    
      CALL JIOXXX(W(1,6   ),W(1,10  ),GWF ,WMASS   ,WWIDTH  ,W(1,11  ))    
      CALL IOVXXX(W(1,3   ),W(1,7   ),W(1,11  ),GWF ,AMP(2   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,12  ))    
      CALL JIOXXX(W(1,12  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,13  ))    
      CALL FVOXXX(W(1,5   ),W(1,13  ),GWF ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL IOVXXX(W(1,6   ),W(1,14  ),W(1,2   ),GWF ,AMP(3   ))            
      CALL JVVXXX(W(1,13  ),W(1,2   ),gwwz ,ZMASS   ,ZWIDTH  ,W(1,         
     &     15  ))                                                          
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,15  ),GZN ,AMP(4   ))            
      CALL FVOXXX(W(1,7   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,16  ))    
      CALL IOVXXX(W(1,3   ),W(1,16  ),W(1,8   ),GZL ,AMP(5   ))            
      CALL FVIXXX(W(1,12  ),W(1,2   ),GWF ,ZERO    ,ZERO    ,W(1,17  ))    
      CALL JIOXXX(W(1,17  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,18  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,18  ),GZN ,AMP(6   ))            
      CALL JIOXXX(W(1,12  ),W(1,7   ),GZN ,ZMASS   ,ZWIDTH  ,W(1,19  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,19  ),GZN ,AMP(7   ))            
      CALL FVIXXX(W(1,6   ),W(1,2   ),GWF ,ZERO    ,ZERO    ,W(1,21  ))    
      CALL IOVXXX(W(1,21  ),W(1,10  ),W(1,20  ),GAL ,AMP(8   ))            
      CALL IOVXXX(W(1,21  ),W(1,10  ),W(1,22  ),GZL ,AMP(9   ))            
      CALL JVVXXX(W(1,2   ),W(1,20  ),GWWA ,WMASS   ,WWIDTH  ,W(1,         
     &     23  ))                                                          
      CALL VVVXXX(W(1,1   ),W(1,23  ),W(1,8   ),gwwz ,AMP(10  ))           
      CALL JVVXXX(W(1,2   ),W(1,22  ),gwwz ,WMASS   ,WWIDTH  ,W(1,         
     &     24  ))                                                          
      CALL VVVXXX(W(1,1   ),W(1,24  ),W(1,8   ),gwwz ,AMP(11  ))           
      CALL FVIXXX(W(1,6   ),W(1,22  ),GZN ,ZERO    ,ZERO    ,W(1,25  ))    
      CALL IOVXXX(W(1,25  ),W(1,10  ),W(1,2   ),GWF ,AMP(12  ))            
      CALL VVVXXX(W(1,11  ),W(1,2   ),W(1,20  ),GWWA ,AMP(13  ))           
      CALL VVVXXX(W(1,11  ),W(1,2   ),W(1,22  ),gwwz ,AMP(14  ))           
      CALL JVVXXX(W(1,20  ),W(1,1   ),GWWA ,WMASS   ,WWIDTH  ,W(1,         
     &     26  ))                                                          
      CALL IOVXXX(W(1,21  ),W(1,5   ),W(1,26  ),GWF ,AMP(15  ))            
      CALL JVVXXX(W(1,22  ),W(1,1   ),gwwz ,WMASS   ,WWIDTH  ,W(1,         
     &     27  ))                                                          
      CALL IOVXXX(W(1,21  ),W(1,5   ),W(1,27  ),GWF ,AMP(16  ))            
      CALL VVVXXX(W(1,26  ),W(1,2   ),W(1,8   ),gwwz ,AMP(17  ))           
      CALL VVVXXX(W(1,27  ),W(1,2   ),W(1,8   ),gwwz ,AMP(18  ))           
      CALL JVVXXX(W(1,1   ),W(1,2   ),GWWA ,ZERO    ,ZERO    ,W(1,         
     &     28  ))                                                          
      CALL FVOXXX(W(1,4   ),W(1,28  ),GAL ,ZERO    ,ZERO    ,W(1,29  ))    
      CALL JIOXXX(W(1,3   ),W(1,29  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,30  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,30  ),GZN ,AMP(19  ))            
      CALL JVVXXX(W(1,1   ),W(1,2   ),gwwz ,ZMASS   ,ZWIDTH  ,W(1,         
     &     31  ))                                                          
      CALL FVOXXX(W(1,4   ),W(1,31  ),GZL ,ZERO    ,ZERO    ,W(1,32  ))    
      CALL JIOXXX(W(1,3   ),W(1,32  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,33  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,33  ),GZN ,AMP(20  ))            
      CALL FVIXXX(W(1,3   ),W(1,28  ),GAL ,ZERO    ,ZERO    ,W(1,34  ))    
      CALL JIOXXX(W(1,34  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,35  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,35  ),GZN ,AMP(21  ))            
      CALL FVIXXX(W(1,3   ),W(1,31  ),GZL ,ZERO    ,ZERO    ,W(1,36  ))    
      CALL JIOXXX(W(1,36  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,37  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,37  ),GZN ,AMP(22  ))            
      CALL FVOXXX(W(1,5   ),W(1,22  ),GZN ,ZERO    ,ZERO    ,W(1,38  ))    
      CALL IOVXXX(W(1,21  ),W(1,38  ),W(1,1   ),GWF ,AMP(23  ))            
      
      if (hswitchzz) then
      CALL HVVXXX(W(1,1   ),W(1,2   ),GWWH ,HMASS   ,HWIDTH  ,W(1,         
     &     39  ))                                                          
      CALL JVSXXX(W(1,22  ),W(1,39  ),GZZH ,ZMASS   ,ZWIDTH  ,W(1,         
     &     40  ))                                                          
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,40  ),GZN ,AMP(24  ))
      endif           
 
      CALL FVOXXX(W(1,5   ),W(1,31  ),GZN ,ZERO    ,ZERO    ,W(1,41  ))    
      CALL IOVXXX(W(1,6   ),W(1,41  ),W(1,22  ),GZN ,AMP(25  ))            
      CALL IOVXXX(W(1,6   ),W(1,38  ),W(1,31  ),GZN ,AMP(26  ))            
c
c  KK-Amplitudes
c
      do k=1,kkhw
      CALL JVVXXX(W(1,2   ),W(1,20  ),GWWA_K(k,0,0) ,W1MASS_K(k),W1WIDTH_K(k),KK1(1,k))     
      CALL VVVXXX(W(1,1   ),KK1(1,k ),W(1,8   ),gwwz_K(k,0,0) ,AMPK1(k  ))
c
      CALL JVVXXX(W(1,2   ),W(1,22  ),gwwz_K(k,0,0) ,W1MASS_K(k),W1WIDTH_K(k),KK2(1,k))
      CALL VVVXXX(W(1,1   ),KK2(1,k),W(1,8   ),gwwz_K(k,0,0) ,AMPK2(k  ))    
c
      CALL JVVXXX(W(1,20  ),W(1,1   ),GWWA_K(k,0,0) ,W1MASS_K(k),W1WIDTH_K(k),KK3(1,k)) 
      CALL VVVXXX(KK3(1,k),W(1,2   ),W(1,8   ),gwwz_K(k,0,0) ,AMPK3(k  )) 
c
      CALL JVVXXX(W(1,22  ),W(1,1   ),gwwz_K(k,0,0) ,W1MASS_K(k),W1WIDTH_K(k),KK4(1,k ))
      CALL VVVXXX(KK4(1,k),W(1,2   ),W(1,8   ),gwwz_K(k,0,0) ,AMPK4(k  ))    
      enddo
c
      if (hswitchzz) then
      do k=1,kkhh
      CALL HVVXXX(W(1,1   ),W(1,2   ),GWWH_K(0,0,k) ,H1MASS_K(k),H1WIDTH_K(k),KKH1(1,k)) 
      CALL JVSXXX(W(1,22  ),KKH1(1,k),GZZH_K(0,0,k) ,ZMASS   ,ZWIDTH  ,KKH2(1,k )) 
      CALL IOVXXX(W(1,6   ),W(1,5   ),KKH2(1,k),GZN ,AMPKH(k  ))
      enddo 
      endif    
c
c  4-vertex
c      
      CALL W3W3XX(W(1,1   ),W(1,8   ),W(1,2   ),W(1,20  ),1.d0 ,GWWAZ_K(0,0,0,0) ,     
     &     AMP(27  ))                                                      
      CALL W3W3XX(W(1,1   ),W(1,22  ),W(1,2   ),W(1,8   ),1.d0 ,gwwzz_K(0,0,0,0) ,     
     &     AMP(28  ))                                                      

      ww(mu,nu) = -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)-AMP(   5)
     &             -AMP(   6)-AMP(   7)-AMP(   8)-AMP(   9)-AMP(  10)
     &             -AMP(  11)-AMP(  12)-AMP(  13)-AMP(  14)-AMP(  15)
     &             -AMP(  16)-AMP(  17)-AMP(  18)-AMP(  19)-AMP(  20)
     &             -AMP(  21)-AMP(  22)-AMP(  23)-AMP(  24)-AMP(  25)
     &             -AMP(  26)-AMP(  27)-AMP(  28)
    
      do k=1,kkhw
      ww(mu,nu) = ww(mu,nu) -AMPK1(k)-AMPK2(k)-AMPK3(k)-AMPK4(k)
      enddo
      do k=1,kkhh
      ww(mu,nu) = ww(mu,nu)-AMPKH(k)
      enddo
            ENDDO
      ENDDO

      END
c ------------------------------------------------------------	
c ------------------------------------------------------------	

      subroutine wwtoll_kk(idb,idl,h,Q,v,wll)
	
      IMPLICIT NONE

        integer idb,idl,h
        real*8 q(0:3), v(0:3,4)
        complex*16 wll(0:3,0:3)
	integer lsign(2,2),i,ll,mu,nu
      

	data (lsign(ll,1),ll=1,2) / -1, -1/
	data (lsign(ll,2),ll=1,2) / +1, +1/
	
	if (idl.eq.1) then ! e+e-
	   if (h.eq.1.or.h.eq.2)  i = 1
	   if (h.eq.3.or.h.eq.4)  i = 2
	elseif (idl.eq.2) then ! mu+mu-
	   if (h.eq.1.or.h.eq.3)  i = 1
	   if (h.eq.2.or.h.eq.4)  i = 2
	endif   

	
	call WWtoLL1(idb,idl,Q,v,lsign(1,i),wll(0,0))


	end
		
c ------------------------------------------------------------	
       
      subroutine WWtoLL1_kk(idb,idl,Q,v,lsign,wll)
C  Input:   Q(*)        one of the two incoming boson momenta 
c           idb = 1      Q = q1 = W+ momentum
c           idb = 2      Q = q2 = W- momentum
c	    idl = 1	 l is e
c	    idl = 2	 l is mu
c  OUPTPUT: wll(mu,nu)  lepton tensor for w w--> l+l-  
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : w+ w- -> l+ l-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   3) 
      INTEGER    NWAVEFUNCS  
      PARAMETER (NWAVEFUNCS=   7) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      integer idb,idl
      real*8 q(0:3), v(0:3,4), p(0:3,3:4)
      complex*16 wll(0:3,0:3)
      integer lsign(3:4)
C  
C LOCAL VARIABLES 
C  
      INTEGER I, MU, NU
      real*8 Q1(0:3), Q2(0:3)
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
c  lepton spinors 
#include "tensorz.inc"
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/kkcoupl.inc"
      logical lswitch
      parameter (lswitch=.true.)
C  
C ----------
C BEGIN CODE
C ----------
      
      if (idb.eq.1) then
         do mu = 0,3
            q1(mu) = q(mu)
	    if (idl.eq.1) then
                q2(mu) = qe(mu)-q(mu)
		p(mu,3) = v(mu,1)
		p(mu,4) = v(mu,2)
	    else
	        q2(mu) = qu(mu)-q(mu)
		p(mu,3) = v(mu,3)
		p(mu,4) = v(mu,4)
	    endif
         enddo
      elseif (idb.eq.2) then
         do mu = 0,3
            q2(mu) = q(mu)
	    if (idl.eq.1) then
            	q1(mu) = qe(mu)-q(mu)
		p(mu,3) = v(mu,1)
		p(mu,4) = v(mu,2)
	    else
            	q1(mu) = qu(mu)-q(mu)
		p(mu,3) = v(mu,3)
		p(mu,4) = v(mu,4)
	    endif
         enddo
      endif

	if (lswitch) then
	  if (idl.eq.1) then
	    do i = 1,6
	    w(i,3) = lep(i)
	    w(i,4) = lem(i)
	    enddo
	  else
	    do i = 1,6
	    w(i,3) = lup(i)
	    w(i,4) = lum(i)
	    enddo
	  endif
	else	 
       	   CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3),-1,W(1,3   ))        
       	   CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4),+1,W(1,4   ))              
        endif    
	     
      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),WMASS ,wwidth, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),WMASS ,wwidth, NU,-1,W(1,2   )) 
 
      CALL FVIXXX(W(1,3   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,5   ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,2   ),GWF ,AMP(1   ))            
      CALL JVVXXX(W(1,1   ),W(1,2   ),GWWA ,ZERO    ,ZERO    ,W(1,         
     &     6   ))                                                          
      CALL IOVXXX(W(1,3   ),W(1,4   ),W(1,6   ),GAL ,AMP(2   ))            
      CALL JVVXXX(W(1,1   ),W(1,2   ),gwwz ,ZMASS   ,ZWIDTH  ,W(1,         
     &     7   ))                                                          
      CALL IOVXXX(W(1,3   ),W(1,4   ),W(1,7   ),GZL ,AMP(3   ))            
      
      
      wll(mu,nu) = +AMP(   1)+AMP(   2)+AMP(   3)
         
	 enddo !nu
      enddo !mu

      end
      
c ------------------------------------------------------------	
       
       
      subroutine WWtoLLN_kk(idb,Q,v,wll)
C  Input:   Q(*)        one of the two incoming boson momenta 
c           idb = 1      Q = q1 = W+ momentum
c           idb = 2      Q = q2 = W- momentum
c  OUPTPUT: wll(mu,nu)  lepton tensor for w w--> vm vm~ 
C  
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : w+ w- -> vm vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   2) 
      INTEGER    NWAVEFUNCS  
      PARAMETER (NWAVEFUNCS=   6) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      integer idb
      real*8 q(0:3), v(0:3,2), p(0:3,3:4)
      complex*16 wll(0:3,0:3)
C  
C LOCAL VARIABLES 
C  
      INTEGER I, MU, NU
      real*8 Q1(0:3), Q2(0:3)
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
c  lepton spinors 
#include "tensorz.inc"
C  
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/kkcoupl.inc"
      logical lswitch
      parameter (lswitch=.true.)
C                                                                            
C ----------
C BEGIN CODE
C ----------
      
      if (idb.eq.1) then
         do mu = 0,3
            q1(mu) = q(mu)
	    q2(mu) = qu(mu)-q(mu)
	    p(mu,3) = v(mu,2)
	    p(mu,4) = v(mu,1)
         enddo
      elseif (idb.eq.2) then
         do mu = 0,3
            q2(mu) = q(mu)
            q1(mu) = qu(mu)-q(mu)
	    p(mu,3) = v(mu,1)
	    p(mu,4) = v(mu,2)
         enddo
      endif
	
	if (lswitch) then
	    do i = 1,6
	    w(i,3) = lum(i)
	    w(i,4) = lup(i)
	    enddo
	else
          CALL OXXXXX(P(0,3   ),ZERO ,-1,+1,W(1,3   ))	 
          CALL IXXXXX(P(0,4   ),ZERO ,+1,-1,W(1,4   )) 
        endif  
	     
             
      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),WMASS ,wwidth, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),WMASS ,wwidth, NU,-1,W(1,2   )) 
 
      CALL FVOXXX(W(1,3   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,5   ))    
      CALL IOVXXX(W(1,4   ),W(1,5   ),W(1,2   ),GWF ,AMP(1   ))            
      CALL JVVXXX(W(1,1   ),W(1,2   ),gwwz ,ZMASS   ,ZWIDTH  ,W(1,         
     &     6   ))                                                          
      CALL IOVXXX(W(1,4   ),W(1,3   ),W(1,6   ),GZN ,AMP(2   ))            
      
      wll(mu,nu) = -AMP(   1)-AMP(   2)


	 enddo !nu
      enddo !mu

      end

c ------------------------------------------------------------	

c ------------------------------------------------------------	

      subroutine vvtozz_kk(q1,q2,P,h,aa,az,za,zz)
	
      IMPLICIT NONE

      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 aa(0:3,0:3)
      complex*16 az(0:3,0:3)
      complex*16 za(0:3,0:3)
      complex*16 zz(0:3,0:3)
      integer lsign(3:6,4),h,ll
      

	! possible lepton helicities:
	data (lsign(ll,1),ll=3,6) / -1, -1, -1, -1/
	data (lsign(ll,2),ll=3,6) / -1, -1,  1,  1/
	data (lsign(ll,3),ll=3,6) /  1,  1, -1, -1/
	data (lsign(ll,4),ll=3,6) /  1,  1,  1,  1/
	
	call AAtoZZ1_kk(q1,q2,P,lsign(3,h),aa(0,0))
	call AZtoZZ1_kk(q1,q2,P,lsign(3,h),az(0,0))
	call AZtoZZ1_kk(q2,q1,P,lsign(3,h),za(0,0))
	call ZZtoZZ1_kk(q1,q2,P,lsign(3,h),zz(0,0))
		
	end
		
c ------------------------------------------------------------	
       
      subroutine AAtoZZ1_kk(q1,q2,P,lsign,aa)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : a a -> e+ e- mu+ mu-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  40) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=  50) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 aa(0:3,0:3)
      integer lsign(3:6)
C  
C LOCAL VARIABLES 
C  
      INTEGER I, mu,nu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
c  lepton spinors and Z polarization vectors
#include "tensorz.inc"
c
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/kkcoupl.inc"
      logical lswitch
      parameter (lswitch=.true.)
C                                                                          
C ----------
C BEGIN CODE
C ----------
     
      if (lswitch) then
      	do i = 1,6
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,5) = lup(i)
	 w(i,6) = lum(i)
	
         w(i,20) = au(i)
         w(i,22) = zu(i)
         w(i,45) = ae(i)
         w(i,46) = ze(i)
      	enddo
      else 
      
      	CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3   ),-1,W(1,3   ))	 
      	CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4   ),+1,W(1,4   ))	 
     	CALL IXXXXX(P(0,5   ),ZERO ,-lsign(5   ),-1,W(1,5   ))	 
      	CALL OXXXXX(P(0,6   ),ZERO ,+lsign(6   ),+1,W(1,6   ))	 

       	CALL JIOXXX(W(1,5   ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,20  ))    
      	CALL JIOXXX(W(1,5   ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,22  ))    
      	CALL JIOXXX(W(1,3   ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,45  ))    
      	CALL JIOXXX(W(1,3   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,46  ))    
      endif

      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),zero ,zero, MU,-1,W(1,1	  ))	    
      CALL VCARTX(Q2(0),zero ,zero, NU,-1,W(1,2	  ))      
      
      CALL FVIXXX(W(1,3   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL JIOXXX(W(1,7   ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,8   ))    
      CALL FVIXXX(W(1,5   ),W(1,8   ),GAL ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,9   ),W(1,6   ),W(1,1   ),GAL ,AMP(1   ))            
      CALL JIOXXX(W(1,7   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,10  ))    
      CALL FVIXXX(W(1,5   ),W(1,10  ),GZL ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL IOVXXX(W(1,11  ),W(1,6   ),W(1,1   ),GAL ,AMP(2   ))            
      CALL FVIXXX(W(1,5   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,12  ))    
      CALL IOVXXX(W(1,12  ),W(1,6   ),W(1,8   ),GAL ,AMP(3   ))            
      CALL IOVXXX(W(1,12  ),W(1,6   ),W(1,10  ),GZL ,AMP(4   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,13  ))    
      CALL FVOXXX(W(1,6   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL JIOXXX(W(1,3   ),W(1,13  ),GAL ,ZERO    ,ZERO    ,W(1,15  ))    
      CALL IOVXXX(W(1,5   ),W(1,14  ),W(1,15  ),GAL ,AMP(5   ))            
      CALL JIOXXX(W(1,3   ),W(1,13  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,16  ))    
      CALL IOVXXX(W(1,5   ),W(1,14  ),W(1,16  ),GZL ,AMP(6   ))            
      CALL FVIXXX(W(1,5   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,17  ))    
      CALL JIOXXX(W(1,17  ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,18  ))    
      CALL IOVXXX(W(1,3   ),W(1,13  ),W(1,18  ),GAL ,AMP(7   ))            
      CALL JIOXXX(W(1,17  ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,19  ))    
      CALL IOVXXX(W(1,3   ),W(1,13  ),W(1,19  ),GZL ,AMP(8   ))            
      CALL FVOXXX(W(1,13  ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,21  ))    
      CALL IOVXXX(W(1,3   ),W(1,21  ),W(1,20  ),GAL ,AMP(9   ))                  
      CALL IOVXXX(W(1,3   ),W(1,21  ),W(1,22  ),GZL ,AMP(10  ))                  
      CALL FVIXXX(W(1,7   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,23  ))    
      CALL JIOXXX(W(1,23  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,24  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,24  ),GAL ,AMP(11  ))            
      CALL JIOXXX(W(1,23  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,25  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,25  ),GZL ,AMP(12  ))            
      CALL JIOXXX(W(1,7   ),W(1,13  ),GAL ,ZERO    ,ZERO    ,W(1,26  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,26  ),GAL ,AMP(13  ))            
      CALL JIOXXX(W(1,7   ),W(1,13  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,27  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,27  ),GZL ,AMP(14  ))            
      CALL FVOXXX(W(1,4   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,28  ))    
      CALL FVOXXX(W(1,6   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,29  ))    
      CALL JIOXXX(W(1,3   ),W(1,28  ),GAL ,ZERO    ,ZERO    ,W(1,30  ))    
      CALL IOVXXX(W(1,5   ),W(1,29  ),W(1,30  ),GAL ,AMP(15  ))            
      CALL JIOXXX(W(1,3   ),W(1,28  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,31  ))    
      CALL IOVXXX(W(1,5   ),W(1,29  ),W(1,31  ),GZL ,AMP(16  ))            
      CALL JIOXXX(W(1,12  ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,32  ))    
      CALL IOVXXX(W(1,3   ),W(1,28  ),W(1,32  ),GAL ,AMP(17  ))            
      CALL JIOXXX(W(1,12  ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,33  ))    
      CALL IOVXXX(W(1,3   ),W(1,28  ),W(1,33  ),GZL ,AMP(18  ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,34  ))    
      CALL JIOXXX(W(1,34  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,35  ))    
      CALL FVIXXX(W(1,5   ),W(1,35  ),GAL ,ZERO    ,ZERO    ,W(1,36  ))    
      CALL IOVXXX(W(1,36  ),W(1,6   ),W(1,2   ),GAL ,AMP(19  ))            
      CALL JIOXXX(W(1,34  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,37  ))    
      CALL FVIXXX(W(1,5   ),W(1,37  ),GZL ,ZERO    ,ZERO    ,W(1,38  ))    
      CALL IOVXXX(W(1,38  ),W(1,6   ),W(1,2   ),GAL ,AMP(20  ))            
      CALL IOVXXX(W(1,17  ),W(1,6   ),W(1,35  ),GAL ,AMP(21  ))            
      CALL IOVXXX(W(1,17  ),W(1,6   ),W(1,37  ),GZL ,AMP(22  ))            
      CALL FVOXXX(W(1,28  ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,39  ))    
      CALL IOVXXX(W(1,3   ),W(1,39  ),W(1,20  ),GAL ,AMP(23  ))            
      CALL IOVXXX(W(1,3   ),W(1,39  ),W(1,22  ),GZL ,AMP(24  ))            
      CALL FVIXXX(W(1,34  ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,40  ))    
      CALL JIOXXX(W(1,40  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,41  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,41  ),GAL ,AMP(25  ))            
      CALL JIOXXX(W(1,40  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,42  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,42  ),GZL ,AMP(26  ))            
      CALL JIOXXX(W(1,34  ),W(1,28  ),GAL ,ZERO    ,ZERO    ,W(1,43  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,43  ),GAL ,AMP(27  ))            
      CALL JIOXXX(W(1,34  ),W(1,28  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,44  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,44  ),GZL ,AMP(28  ))                  
      CALL IOVXXX(W(1,12  ),W(1,14  ),W(1,45  ),GAL ,AMP(29  ))                  
      CALL IOVXXX(W(1,12  ),W(1,14  ),W(1,46  ),GZL ,AMP(30  ))            
      CALL FVOXXX(W(1,6   ),W(1,45  ),GAL ,ZERO    ,ZERO    ,W(1,47  ))    
      CALL IOVXXX(W(1,12  ),W(1,47  ),W(1,2   ),GAL ,AMP(31  ))            
      CALL FVOXXX(W(1,6   ),W(1,46  ),GZL ,ZERO    ,ZERO    ,W(1,48  ))    
      CALL IOVXXX(W(1,12  ),W(1,48  ),W(1,2   ),GAL ,AMP(32  ))            
      CALL IOVXXX(W(1,17  ),W(1,29  ),W(1,45  ),GAL ,AMP(33  ))            
      CALL IOVXXX(W(1,17  ),W(1,29  ),W(1,46  ),GZL ,AMP(34  ))            
      CALL IOVXXX(W(1,17  ),W(1,47  ),W(1,1   ),GAL ,AMP(35  ))            
      CALL IOVXXX(W(1,17  ),W(1,48  ),W(1,1   ),GAL ,AMP(36  ))            
      CALL FVIXXX(W(1,5   ),W(1,45  ),GAL ,ZERO    ,ZERO    ,W(1,49  ))    
      CALL IOVXXX(W(1,49  ),W(1,29  ),W(1,2   ),GAL ,AMP(37  ))            
      CALL FVIXXX(W(1,5   ),W(1,46  ),GZL ,ZERO    ,ZERO    ,W(1,50  ))    
      CALL IOVXXX(W(1,50  ),W(1,29  ),W(1,2   ),GAL ,AMP(38  ))            
      CALL IOVXXX(W(1,49  ),W(1,14  ),W(1,1   ),GAL ,AMP(39  ))            
      CALL IOVXXX(W(1,50  ),W(1,14  ),W(1,1   ),GAL ,AMP(40  ))            
      
      aa(mu,nu) = +AMP(   1)+AMP(   2)+AMP(   3)+AMP(   4)+AMP(   5)
     &             +AMP(   6)+AMP(   7)+AMP(   8)+AMP(   9)+AMP(  10)
     &             +AMP(  11)+AMP(  12)+AMP(  13)+AMP(  14)+AMP(  15)
     &             +AMP(  16)+AMP(  17)+AMP(  18)+AMP(  19)+AMP(  20)
     &             +AMP(  21)+AMP(  22)+AMP(  23)+AMP(  24)+AMP(  25)
     &             +AMP(  26)+AMP(  27)+AMP(  28)+AMP(  29)+AMP(  30)
     &             +AMP(  31)+AMP(  32)+AMP(  33)+AMP(  34)+AMP(  35)
     &             +AMP(  36)+AMP(  37)+AMP(  38)+AMP(  39)+AMP(  40)

	   enddo
        enddo
	
	end
	
				
c ------------------------------------------------------------
	
       
      subroutine AZtoZZ1_kk(q1,q2,P,lsign,az)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : a z -> e+ e- mu+ mu-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  40) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=  50) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 az(0:3,0:3)
      integer lsign(3:6)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu,nu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
c  lepton spinors and Z polarization vectors
#include "tensorz.inc"
c
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/kkcoupl.inc"
      logical lswitch
      parameter (lswitch=.true.)
C                                                                          
C ----------
C BEGIN CODE
C ----------

      if (lswitch) then
      	do i = 1,6
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,5) = lup(i)
	 w(i,6) = lum(i)
	
         w(i,20) = au(i)
         w(i,22) = zu(i)
         w(i,45) = ae(i)
         w(i,46) = ze(i)
      	enddo
      else 
      	CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3   ),-1,W(1,3   ))	 
      	CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4   ),+1,W(1,4   ))	 
     	CALL IXXXXX(P(0,5   ),ZERO ,-lsign(5   ),-1,W(1,5   ))	 
      	CALL OXXXXX(P(0,6   ),ZERO ,+lsign(6   ),+1,W(1,6   ))	 
   
      	CALL JIOXXX(W(1,5   ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,20  ))    
      	CALL JIOXXX(W(1,5   ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,22  ))    
      	CALL JIOXXX(W(1,3   ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,45  ))    
      	CALL JIOXXX(W(1,3   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,46  ))    
      endif

      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),zero  ,zero, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),zMASS ,zwidth, NU,-1,W(1,2   )) 
 
      CALL FVIXXX(W(1,3   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL JIOXXX(W(1,7   ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,8   ))    
      CALL FVIXXX(W(1,5   ),W(1,8   ),GAL ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,9   ),W(1,6   ),W(1,1   ),GAL ,AMP(1   ))            
      CALL JIOXXX(W(1,7   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,10  ))    
      CALL FVIXXX(W(1,5   ),W(1,10  ),GZL ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL IOVXXX(W(1,11  ),W(1,6   ),W(1,1   ),GAL ,AMP(2   ))            
      CALL FVIXXX(W(1,5   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,12  ))    
      CALL IOVXXX(W(1,12  ),W(1,6   ),W(1,8   ),GAL ,AMP(3   ))            
      CALL IOVXXX(W(1,12  ),W(1,6   ),W(1,10  ),GZL ,AMP(4   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,13  ))    
      CALL FVOXXX(W(1,6   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL JIOXXX(W(1,3   ),W(1,13  ),GAL ,ZERO    ,ZERO    ,W(1,15  ))    
      CALL IOVXXX(W(1,5   ),W(1,14  ),W(1,15  ),GAL ,AMP(5   ))            
      CALL JIOXXX(W(1,3   ),W(1,13  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,16  ))    
      CALL IOVXXX(W(1,5   ),W(1,14  ),W(1,16  ),GZL ,AMP(6   ))            
      CALL FVIXXX(W(1,5   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,17  ))    
      CALL JIOXXX(W(1,17  ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,18  ))    
      CALL IOVXXX(W(1,3   ),W(1,13  ),W(1,18  ),GAL ,AMP(7   ))            
      CALL JIOXXX(W(1,17  ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,19  ))    
      CALL IOVXXX(W(1,3   ),W(1,13  ),W(1,19  ),GZL ,AMP(8   ))                  
      CALL FVOXXX(W(1,13  ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,21  ))    
      CALL IOVXXX(W(1,3   ),W(1,21  ),W(1,20  ),GAL ,AMP(9   ))                  
      CALL IOVXXX(W(1,3   ),W(1,21  ),W(1,22  ),GZL ,AMP(10  ))            
      CALL FVIXXX(W(1,7   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,23  ))    
      CALL JIOXXX(W(1,23  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,24  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,24  ),GAL ,AMP(11  ))            
      CALL JIOXXX(W(1,23  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,25  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,25  ),GZL ,AMP(12  ))            
      CALL JIOXXX(W(1,7   ),W(1,13  ),GAL ,ZERO    ,ZERO    ,W(1,26  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,26  ),GAL ,AMP(13  ))            
      CALL JIOXXX(W(1,7   ),W(1,13  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,27  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,27  ),GZL ,AMP(14  ))            
      CALL FVOXXX(W(1,4   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,28  ))    
      CALL FVOXXX(W(1,6   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,29  ))    
      CALL JIOXXX(W(1,3   ),W(1,28  ),GAL ,ZERO    ,ZERO    ,W(1,30  ))    
      CALL IOVXXX(W(1,5   ),W(1,29  ),W(1,30  ),GAL ,AMP(15  ))            
      CALL JIOXXX(W(1,3   ),W(1,28  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,31  ))    
      CALL IOVXXX(W(1,5   ),W(1,29  ),W(1,31  ),GZL ,AMP(16  ))            
      CALL JIOXXX(W(1,12  ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,32  ))    
      CALL IOVXXX(W(1,3   ),W(1,28  ),W(1,32  ),GAL ,AMP(17  ))            
      CALL JIOXXX(W(1,12  ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,33  ))    
      CALL IOVXXX(W(1,3   ),W(1,28  ),W(1,33  ),GZL ,AMP(18  ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,34  ))    
      CALL JIOXXX(W(1,34  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,35  ))    
      CALL FVIXXX(W(1,5   ),W(1,35  ),GAL ,ZERO    ,ZERO    ,W(1,36  ))    
      CALL IOVXXX(W(1,36  ),W(1,6   ),W(1,2   ),GZL ,AMP(19  ))            
      CALL JIOXXX(W(1,34  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,37  ))    
      CALL FVIXXX(W(1,5   ),W(1,37  ),GZL ,ZERO    ,ZERO    ,W(1,38  ))    
      CALL IOVXXX(W(1,38  ),W(1,6   ),W(1,2   ),GZL ,AMP(20  ))            
      CALL IOVXXX(W(1,17  ),W(1,6   ),W(1,35  ),GAL ,AMP(21  ))            
      CALL IOVXXX(W(1,17  ),W(1,6   ),W(1,37  ),GZL ,AMP(22  ))            
      CALL FVOXXX(W(1,28  ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,39  ))    
      CALL IOVXXX(W(1,3   ),W(1,39  ),W(1,20  ),GAL ,AMP(23  ))            
      CALL IOVXXX(W(1,3   ),W(1,39  ),W(1,22  ),GZL ,AMP(24  ))            
      CALL FVIXXX(W(1,34  ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,40  ))    
      CALL JIOXXX(W(1,40  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,41  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,41  ),GAL ,AMP(25  ))            
      CALL JIOXXX(W(1,40  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,42  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,42  ),GZL ,AMP(26  ))            
      CALL JIOXXX(W(1,34  ),W(1,28  ),GAL ,ZERO    ,ZERO    ,W(1,43  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,43  ),GAL ,AMP(27  ))            
      CALL JIOXXX(W(1,34  ),W(1,28  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,44  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,44  ),GZL ,AMP(28  ))            
      CALL IOVXXX(W(1,12  ),W(1,14  ),W(1,45  ),GAL ,AMP(29  ))            
      CALL IOVXXX(W(1,12  ),W(1,14  ),W(1,46  ),GZL ,AMP(30  ))            
      CALL FVOXXX(W(1,6   ),W(1,45  ),GAL ,ZERO    ,ZERO    ,W(1,47  ))    
      CALL IOVXXX(W(1,12  ),W(1,47  ),W(1,2   ),GZL ,AMP(31  ))            
      CALL FVOXXX(W(1,6   ),W(1,46  ),GZL ,ZERO    ,ZERO    ,W(1,48  ))    
      CALL IOVXXX(W(1,12  ),W(1,48  ),W(1,2   ),GZL ,AMP(32  ))            
      CALL IOVXXX(W(1,17  ),W(1,29  ),W(1,45  ),GAL ,AMP(33  ))            
      CALL IOVXXX(W(1,17  ),W(1,29  ),W(1,46  ),GZL ,AMP(34  ))            
      CALL IOVXXX(W(1,17  ),W(1,47  ),W(1,1   ),GAL ,AMP(35  ))            
      CALL IOVXXX(W(1,17  ),W(1,48  ),W(1,1   ),GAL ,AMP(36  ))            
      CALL FVIXXX(W(1,5   ),W(1,45  ),GAL ,ZERO    ,ZERO    ,W(1,49  ))    
      CALL IOVXXX(W(1,49  ),W(1,29  ),W(1,2   ),GZL ,AMP(37  ))            
      CALL FVIXXX(W(1,5   ),W(1,46  ),GZL ,ZERO    ,ZERO    ,W(1,50  ))    
      CALL IOVXXX(W(1,50  ),W(1,29  ),W(1,2   ),GZL ,AMP(38  ))            
      CALL IOVXXX(W(1,49  ),W(1,14  ),W(1,1   ),GAL ,AMP(39  ))            
      CALL IOVXXX(W(1,50  ),W(1,14  ),W(1,1   ),GAL ,AMP(40  ))            
      
      az(mu,nu) = +AMP(   1)+AMP(   2)+AMP(   3)+AMP(   4)+AMP(   5)
     &             +AMP(   6)+AMP(   7)+AMP(   8)+AMP(   9)+AMP(  10)
     &             +AMP(  11)+AMP(  12)+AMP(  13)+AMP(  14)+AMP(  15)
     &             +AMP(  16)+AMP(  17)+AMP(  18)+AMP(  19)+AMP(  20)
     &             +AMP(  21)+AMP(  22)+AMP(  23)+AMP(  24)+AMP(  25)
     &             +AMP(  26)+AMP(  27)+AMP(  28)+AMP(  29)+AMP(  30)
     &             +AMP(  31)+AMP(  32)+AMP(  33)+AMP(  34)+AMP(  35)
     &             +AMP(  36)+AMP(  37)+AMP(  38)+AMP(  39)+AMP(  40)
	
	  enddo
       enddo	

      END

c ------------------------------------------------------------	
c       
      subroutine ZZtoZZ1_kk(q1,q2,P,lsign,zz)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : z z -> e+ e- mu+ mu-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS 
      PARAMETER (NGRAPHS=  43) 
      INTEGER    NWAVEFUNCS   
      PARAMETER (NWAVEFUNCS=  54) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 zz(0:3,0:3)
      integer lsign(3:6)
C  
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu,nu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
c  lepton spinors and Z polarization vectors
#include "tensorz.inc"
C  
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/kkcoupl.inc"
      integer k
      Complex*16 AMPKH1(1:kkhh),AMPKH2(1:kkhh),AMPKH3(1:kkhh),
     &           KKH1(6,1:kkhh),KKH2(6,1:kkhh),KKH3(6,1:kkhh),KKH4(6,1:kkhh)
      logical lswitch
      parameter (lswitch=.true.)
C                                                                          
C ----------
C BEGIN CODE
C ----------

      if (lswitch) then
      	do i = 1,6
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,5) = lup(i)
	 w(i,6) = lum(i)
	
         w(i,20) = au(i)
         w(i,22) = zu(i)
         w(i,45) = ae(i)
         w(i,46) = ze(i)
      	enddo
      else 
      	CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3   ),-1,W(1,3   ))	 
      	CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4   ),+1,W(1,4   ))	 
     	CALL IXXXXX(P(0,5   ),ZERO ,-lsign(5   ),-1,W(1,5   ))	 
      	CALL OXXXXX(P(0,6   ),ZERO ,+lsign(6   ),+1,W(1,6   ))	 

      	CALL JIOXXX(W(1,5   ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,20  ))    
      	CALL JIOXXX(W(1,5   ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,22  ))    
      	CALL JIOXXX(W(1,3   ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,45  ))    
      	CALL JIOXXX(W(1,3   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,46  ))    
      endif

      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),ZMASS ,zwidth, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),ZMASS ,zwidth, NU,-1,W(1,2   )) 
 
      CALL FVIXXX(W(1,3   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL JIOXXX(W(1,7   ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,8   ))    
      CALL FVIXXX(W(1,5   ),W(1,8   ),GAL ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,9   ),W(1,6   ),W(1,1   ),GZL ,AMP(1   ))            
      CALL JIOXXX(W(1,7   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,10  ))    
      CALL FVIXXX(W(1,5   ),W(1,10  ),GZL ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL IOVXXX(W(1,11  ),W(1,6   ),W(1,1   ),GZL ,AMP(2   ))            
      CALL FVIXXX(W(1,5   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,12  ))    
      CALL IOVXXX(W(1,12  ),W(1,6   ),W(1,8   ),GAL ,AMP(3   ))            
      CALL IOVXXX(W(1,12  ),W(1,6   ),W(1,10  ),GZL ,AMP(4   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,13  ))    
      CALL FVOXXX(W(1,6   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL JIOXXX(W(1,3   ),W(1,13  ),GAL ,ZERO    ,ZERO    ,W(1,15  ))    
      CALL IOVXXX(W(1,5   ),W(1,14  ),W(1,15  ),GAL ,AMP(5   ))            
      CALL JIOXXX(W(1,3   ),W(1,13  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,16  ))    
      CALL IOVXXX(W(1,5   ),W(1,14  ),W(1,16  ),GZL ,AMP(6   ))            
      CALL FVIXXX(W(1,5   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,17  ))    
      CALL JIOXXX(W(1,17  ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,18  ))    
      CALL IOVXXX(W(1,3   ),W(1,13  ),W(1,18  ),GAL ,AMP(7   ))            
      CALL JIOXXX(W(1,17  ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,19  ))    
      CALL IOVXXX(W(1,3   ),W(1,13  ),W(1,19  ),GZL ,AMP(8   ))            
      CALL FVOXXX(W(1,13  ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,21  ))    
      CALL IOVXXX(W(1,3   ),W(1,21  ),W(1,20  ),GAL ,AMP(9   ))            
      CALL IOVXXX(W(1,3   ),W(1,21  ),W(1,22  ),GZL ,AMP(10  ))            
      CALL FVIXXX(W(1,7   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,23  ))    
      CALL JIOXXX(W(1,23  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,24  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,24  ),GAL ,AMP(11  ))            
      CALL JIOXXX(W(1,23  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,25  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,25  ),GZL ,AMP(12  ))            
      CALL JIOXXX(W(1,7   ),W(1,13  ),GAL ,ZERO    ,ZERO    ,W(1,26  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,26  ),GAL ,AMP(13  ))            
      CALL JIOXXX(W(1,7   ),W(1,13  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,27  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,27  ),GZL ,AMP(14  ))            
      CALL FVOXXX(W(1,4   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,28  ))    
      CALL FVOXXX(W(1,6   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,29  ))    
      CALL JIOXXX(W(1,3   ),W(1,28  ),GAL ,ZERO    ,ZERO    ,W(1,30  ))    
      CALL IOVXXX(W(1,5   ),W(1,29  ),W(1,30  ),GAL ,AMP(15  ))            
      CALL JIOXXX(W(1,3   ),W(1,28  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,31  ))    
      CALL IOVXXX(W(1,5   ),W(1,29  ),W(1,31  ),GZL ,AMP(16  ))            
      CALL JIOXXX(W(1,12  ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,32  ))    
      CALL IOVXXX(W(1,3   ),W(1,28  ),W(1,32  ),GAL ,AMP(17  ))            
      CALL JIOXXX(W(1,12  ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,33  ))    
      CALL IOVXXX(W(1,3   ),W(1,28  ),W(1,33  ),GZL ,AMP(18  ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,34  ))    
      CALL JIOXXX(W(1,34  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,35  ))    
      CALL FVIXXX(W(1,5   ),W(1,35  ),GAL ,ZERO    ,ZERO    ,W(1,36  ))    
      CALL IOVXXX(W(1,36  ),W(1,6   ),W(1,2   ),GZL ,AMP(19  ))            
      CALL JIOXXX(W(1,34  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,37  ))    
      CALL FVIXXX(W(1,5   ),W(1,37  ),GZL ,ZERO    ,ZERO    ,W(1,38  ))    
      CALL IOVXXX(W(1,38  ),W(1,6   ),W(1,2   ),GZL ,AMP(20  ))            
      CALL IOVXXX(W(1,17  ),W(1,6   ),W(1,35  ),GAL ,AMP(21  ))            
      CALL IOVXXX(W(1,17  ),W(1,6   ),W(1,37  ),GZL ,AMP(22  ))            
      CALL FVOXXX(W(1,28  ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,39  ))    
      CALL IOVXXX(W(1,3   ),W(1,39  ),W(1,20  ),GAL ,AMP(23  ))            
      CALL IOVXXX(W(1,3   ),W(1,39  ),W(1,22  ),GZL ,AMP(24  ))            
      CALL FVIXXX(W(1,34  ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,40  ))    
      CALL JIOXXX(W(1,40  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,41  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,41  ),GAL ,AMP(25  ))            
      CALL JIOXXX(W(1,40  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,42  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,42  ),GZL ,AMP(26  ))            
      CALL JIOXXX(W(1,34  ),W(1,28  ),GAL ,ZERO    ,ZERO    ,W(1,43  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,43  ),GAL ,AMP(27  ))            
      CALL JIOXXX(W(1,34  ),W(1,28  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,44  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,44  ),GZL ,AMP(28  ))            
      CALL IOVXXX(W(1,12  ),W(1,14  ),W(1,45  ),GAL ,AMP(29  ))            
      CALL IOVXXX(W(1,12  ),W(1,14  ),W(1,46  ),GZL ,AMP(30  )) 
      
      if (hswitchzz) then         
      CALL HVVXXX(W(1,46  ),W(1,2   ),GZZH ,HMASS   ,HWIDTH  ,W(1,         
     &     47  ))                                                          
      CALL VVSXXX(W(1,22  ),W(1,1   ),W(1,47  ),GZZH ,AMP(31  ))  
      endif
         
      CALL FVOXXX(W(1,6   ),W(1,45  ),GAL ,ZERO    ,ZERO    ,W(1,48  ))    
      CALL IOVXXX(W(1,12  ),W(1,48  ),W(1,2   ),GZL ,AMP(32  ))            
      CALL FVOXXX(W(1,6   ),W(1,46  ),GZL ,ZERO    ,ZERO    ,W(1,49  ))    
      CALL IOVXXX(W(1,12  ),W(1,49  ),W(1,2   ),GZL ,AMP(33  ))            
      CALL IOVXXX(W(1,17  ),W(1,29  ),W(1,45  ),GAL ,AMP(34  ))            
      CALL IOVXXX(W(1,17  ),W(1,29  ),W(1,46  ),GZL ,AMP(35  ))

      if (hswitchzz) then             
      CALL HVVXXX(W(1,1   ),W(1,46  ),GZZH ,HMASS   ,HWIDTH  ,W(1,         
     &     50  ))                                                          
      CALL VVSXXX(W(1,22  ),W(1,2   ),W(1,50  ),GZZH ,AMP(36  ))
      endif
           
      CALL IOVXXX(W(1,17  ),W(1,48  ),W(1,1   ),GZL ,AMP(37  ))            
      CALL IOVXXX(W(1,17  ),W(1,49  ),W(1,1   ),GZL ,AMP(38  ))            
      CALL FVIXXX(W(1,5   ),W(1,45  ),GAL ,ZERO    ,ZERO    ,W(1,51  ))    
      CALL IOVXXX(W(1,51  ),W(1,29  ),W(1,2   ),GZL ,AMP(39  ))            
      CALL FVIXXX(W(1,5   ),W(1,46  ),GZL ,ZERO    ,ZERO    ,W(1,52  ))    
      CALL IOVXXX(W(1,52  ),W(1,29  ),W(1,2   ),GZL ,AMP(40  ))            
      CALL IOVXXX(W(1,51  ),W(1,14  ),W(1,1   ),GZL ,AMP(41  ))            
      CALL IOVXXX(W(1,52  ),W(1,14  ),W(1,1   ),GZL ,AMP(42  ))

      if (hswitchzz) then             
      CALL HVVXXX(W(1,1   ),W(1,2   ),GZZH ,HMASS   ,HWIDTH  ,W(1,         
     &     53  ))                                                          
      CALL JVSXXX(W(1,46  ),W(1,53  ),GZZH ,ZMASS   ,ZWIDTH  ,W(1,         
     &     54  ))                                                          
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,54  ),GZL ,AMP(43  ))
      endif            
c
c KK-Amplitudes
c     
      if (hswitchzz) then
      do k=1,kkhh
      CALL HVVXXX(W(1,46  ),W(1,2   ),GZZH_K(0,0,k) ,H1MASS_K(k),H1WIDTH_K(k), KKH1(1,k))
      CALL VVSXXX(W(1,22  ),W(1,1   ),KKH1(1,k),GZZH_K(0,0,k) ,AMPKH1(k  ))
c
      CALL HVVXXX(W(1,1   ),W(1,46  ),GZZH_K(0,0,k) ,H1MASS_K(k),H1WIDTH_K(k), KKH2(1,k))              
      CALL VVSXXX(W(1,22  ),W(1,2   ),KKH2(1,k),GZZH_K(0,0,k) ,AMPKH2(k  ))  
c
      CALL HVVXXX(W(1,1   ),W(1,2   ),GZZH_K(0,0,k) ,H1MASS_K(k),H1WIDTH_K(k), KKH3(1,k))   
      CALL JVSXXX(W(1,46  ),KKH3(1,k),GZZH_K(0,0,k) ,ZMASS   ,ZWIDTH  ,KKH4(1,k ))   
      CALL IOVXXX(W(1,5   ),W(1,6   ),KKH4(1,k),GZL ,AMPKH3(k  ))
      enddo
      endif

      zz(mu,nu)  = +AMP(   1)+AMP(   2)+AMP(   3)+AMP(   4)+AMP(   5)
     &             +AMP(   6)+AMP(   7)+AMP(   8)+AMP(   9)+AMP(  10)
     &             +AMP(  11)+AMP(  12)+AMP(  13)+AMP(  14)+AMP(  15)
     &             +AMP(  16)+AMP(  17)+AMP(  18)+AMP(  19)+AMP(  20)
     &             +AMP(  21)+AMP(  22)+AMP(  23)+AMP(  24)+AMP(  25)
     &             +AMP(  26)+AMP(  27)+AMP(  28)+AMP(  29)+AMP(  30)
     &             +AMP(  31)+AMP(  32)+AMP(  33)+AMP(  34)+AMP(  35)
     &             +AMP(  36)+AMP(  37)+AMP(  38)+AMP(  39)+AMP(  40)
     &             +AMP(  41)+AMP(  42)+AMP(  43)
      do k=1,kkhh
      zz(mu,nu) = zz(mu,nu) +AMPKH1(k)+AMPKH2(k)+AMPKH3(k)
      enddo
	  enddo
       enddo

      END
c ------------------------------------------------------------	

      subroutine vvtozzn_kk(q1,q2,P,h,aa,az,za,zz)
	
      IMPLICIT NONE

      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 aa(0:3,0:3)
      complex*16 az(0:3,0:3)
      complex*16 za(0:3,0:3)
      complex*16 zz(0:3,0:3)
      integer lsign(3:6,4),h,ll
      

	! possible lepton helicities:
	data (lsign(ll,1),ll=3,6) / -1, -1, -1, -1/ ! zero
	data (lsign(ll,2),ll=3,6) / -1, -1,  1,  1/
	data (lsign(ll,3),ll=3,6) /  1,  1, -1, -1/ ! zero
	data (lsign(ll,4),ll=3,6) /  1,  1,  1,  1/
	
	call AAtoZZN1_kk(q1,q2,P,lsign(3,h),aa(0,0))
	call AZtoZZN1_kk(q1,q2,P,lsign(3,h),az(0,0))
	call AZtoZZN1_kk(q2,q1,P,lsign(3,h),za(0,0))
	call ZZtoZZN1_kk(q1,q2,P,lsign(3,h),zz(0,0))
		
	end
		
      
c ------------------------------------------------------------	
       
      subroutine AAtoZZN1_kk(q1,q2,P,lsign,aa)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : a a -> e+ e- vm vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   6) 
      INTEGER    NWAVEFUNCS 
      PARAMETER (NWAVEFUNCS=  19) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C    
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 aa(0:3,0:3)
      integer lsign(3:6)
C  
C LOCAL VARIABLES 
C  
      INTEGER I, mu,nu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
c  lepton spinors and Z polarization vectors
#include "tensorz.inc"
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/kkcoupl.inc"
      logical lswitch
      parameter (lswitch=.true.)
c                                                                          
C ----------
C BEGIN CODE
C ----------
      
      if (lswitch) then
      	do i = 1,4
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,6) = lup(i)
	 w(i,5) = lum(i)
	 	
         w(i,8) = - zu(i)
       	enddo
      	do i = 5,6
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,6) = lup(i)
	 w(i,5) = lum(i)
	 	
         w(i,8) =  zu(i)
       	enddo
      else 
       CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3   ),-1,W(1,3   ))	
       CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4   ),+1,W(1,4   ))	
       CALL OXXXXX(P(0,5   ),ZERO ,+lsign(5   ),+1,W(1,5   ))	
       CALL IXXXXX(P(0,6   ),ZERO ,-lsign(6   ),-1,W(1,6   ))	
   
        CALL JIOXXX(W(1,6   ),W(1,5   ),GZN ,ZMASS   ,ZWIDTH  ,W(1,8   ))    
      endif

   
      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),zero ,zero, MU,-1,W(1,1	  ))	    
      CALL VCARTX(Q2(0),zero ,zero, NU,-1,W(1,2	  ))      
                  
      CALL FVOXXX(W(1,4   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL FVOXXX(W(1,7   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,3   ),W(1,9   ),W(1,8   ),GZL ,AMP(1   ))            
      CALL FVIXXX(W(1,3   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,10  ))    
      CALL FVIXXX(W(1,10  ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL JIOXXX(W(1,11  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,12  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,12  ),GZN ,AMP(2   ))            
      CALL JIOXXX(W(1,10  ),W(1,7   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,13  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,13  ),GZN ,AMP(3   ))            
      CALL FVOXXX(W(1,4   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL FVOXXX(W(1,14  ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,15  ))    
      CALL IOVXXX(W(1,3   ),W(1,15  ),W(1,8   ),GZL ,AMP(4   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,16  ))    
      CALL FVIXXX(W(1,16  ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,17  ))    
      CALL JIOXXX(W(1,17  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,18  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,18  ),GZN ,AMP(5   ))            
      CALL JIOXXX(W(1,16  ),W(1,14  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,19  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,19  ),GZN ,AMP(6   ))            
      
      aa(mu,nu) = -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)-AMP(   5)
     &             -AMP(   6)
 

	enddo
      enddo
      
      end	
      
      			
c ------------------------------------------------------------
	
       
      subroutine AZtoZZN1_kk(q1,q2,P,lsign,az)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : a z -> e+ e- vm vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  10) 
      INTEGER    NWAVEFUNCS    
      PARAMETER (NWAVEFUNCS=  25) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 az(0:3,0:3)
      integer lsign(3:6)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu,nu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/kkcoupl.inc"
#include "tensorz.inc"
C   
      logical lswitch
      parameter (lswitch=.true.)
C  
C                                                                          
C ----------
C BEGIN CODE
C ----------

      if (lswitch) then
      	do i = 1,4
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,6) = lup(i)
	 w(i,5) = lum(i)
	
         w(i,12) = - zu(i)
       	enddo
      	do i = 5,6
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,6) = lup(i)
	 w(i,5) = lum(i)
	
         w(i,12) = zu(i)
       	enddo
      else 
      	CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3   ),-1,W(1,3   ))	 
      	CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4   ),+1,W(1,4   ))	 
     	CALL OXXXXX(P(0,5   ),ZERO ,+lsign(5   ),+1,W(1,5   ))	 
      	CALL IXXXXX(P(0,6   ),ZERO ,-lsign(6   ),-1,W(1,6   ))	 
  
      	CALL JIOXXX(W(1,6   ),W(1,5   ),GZN ,ZMASS   ,ZWIDTH  ,W(1,12  ))    
      endif


      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),zero  ,zero, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),zMASS ,zwidth, NU,-1,W(1,2   )) 
      
      CALL FVOXXX(W(1,4   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL FVIXXX(W(1,6   ),W(1,2   ),GZN ,ZERO    ,ZERO    ,W(1,8   ))    
      CALL JIOXXX(W(1,3   ),W(1,7   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,9   ))    
      CALL IOVXXX(W(1,8   ),W(1,5   ),W(1,9   ),GZN ,AMP(1   ))            
      CALL FVOXXX(W(1,5   ),W(1,2   ),GZN ,ZERO    ,ZERO    ,W(1,10  ))    
      CALL JIOXXX(W(1,6   ),W(1,10  ),GZN ,ZMASS   ,ZWIDTH  ,W(1,11  ))    
      CALL IOVXXX(W(1,3   ),W(1,7   ),W(1,11  ),GZL ,AMP(2   ))            
      CALL FVOXXX(W(1,7   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,13  ))    
      CALL IOVXXX(W(1,3   ),W(1,13  ),W(1,12  ),GZL ,AMP(3   ))            
      CALL FVIXXX(W(1,3   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL FVIXXX(W(1,14  ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,15  ))    
      CALL JIOXXX(W(1,15  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,16  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,16  ),GZN ,AMP(4   ))            
      CALL JIOXXX(W(1,14  ),W(1,7   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,17  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,17  ),GZN ,AMP(5   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,18  ))    
      CALL JIOXXX(W(1,18  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,19  ))    
      CALL FVOXXX(W(1,5   ),W(1,19  ),GZN ,ZERO    ,ZERO    ,W(1,20  ))    
      CALL IOVXXX(W(1,6   ),W(1,20  ),W(1,2   ),GZN ,AMP(6   ))            
      CALL IOVXXX(W(1,6   ),W(1,10  ),W(1,19  ),GZN ,AMP(7   ))            
      CALL FVOXXX(W(1,4   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,21  ))    
      CALL FVOXXX(W(1,21  ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,22  ))    
      CALL IOVXXX(W(1,3   ),W(1,22  ),W(1,12  ),GZL ,AMP(8   ))            
      CALL FVIXXX(W(1,18  ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,23  ))    
      CALL JIOXXX(W(1,23  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,24  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,24  ),GZN ,AMP(9   ))            
      CALL JIOXXX(W(1,18  ),W(1,21  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,25  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,25  ),GZN ,AMP(10  ))            
           
      az(mu,nu) =  -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)-AMP(   5)
     &             -AMP(   6)-AMP(   7)-AMP(   8)-AMP(   9)-AMP(  10)
		
	  enddo
       enddo	

      END

c ------------------------------------------------------------	
c       
      subroutine ZZtoZZN1_kk(q1,q2,P,lsign,zz)
C  
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : z z -> e+ e- vm vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  23) 
      INTEGER    NWAVEFUNCS    
      PARAMETER (NWAVEFUNCS=  38) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 zz(0:3,0:3)
      integer lsign(3:6)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu,nu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/kkcoupl.inc"
      integer k
      Complex*16 AMPKH1(1:kkhh),AMPKH2(1:kkhh),AMPKH3(1:kkhh),
     &           KKH1(6,1:kkhh),KKH2(6,1:kkhh),KKH3(6,1:kkhh),KKH4(6,1:kkhh)
#include "tensorz.inc"
C     
      logical lswitch
      parameter (lswitch=.true.)
C  
C                                                                          
C ----------
C BEGIN CODE
C ----------

      if (lswitch) then
      	do i = 1,4
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,6) = lup(i)
	 w(i,5) = lum(i)
	
         w(i,16) =  - zu(i)
         w(i,32) =   ze(i)
       	enddo
      	do i = 5,6
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,6) = lup(i)
	 w(i,5) = lum(i)
	
         w(i,16) =   zu(i)
         w(i,32) =   ze(i)
       	enddo
      else 
      	CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3   ),-1,W(1,3   ))	 
      	CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4   ),+1,W(1,4   ))	 
     	CALL OXXXXX(P(0,5   ),ZERO ,+lsign(5   ),+1,W(1,5   ))	 
      	CALL IXXXXX(P(0,6   ),ZERO ,-lsign(6   ),-1,W(1,6   ))	 

      	CALL JIOXXX(W(1,6   ),W(1,5   ),GZN ,ZMASS   ,ZWIDTH  ,W(1,16  ))    
      	CALL JIOXXX(W(1,3   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,32  ))    
      endif

      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),ZMASS ,zwidth, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),ZMASS ,zwidth, NU,-1,W(1,2   )) 
 
      CALL FVIXXX(W(1,3   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL JIOXXX(W(1,7   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,8   ))    
      CALL FVOXXX(W(1,5   ),W(1,8   ),GZN ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,6   ),W(1,9   ),W(1,1   ),GZN ,AMP(1   ))            
      CALL FVOXXX(W(1,5   ),W(1,1   ),GZN ,ZERO    ,ZERO    ,W(1,10  ))    
      CALL IOVXXX(W(1,6   ),W(1,10  ),W(1,8   ),GZN ,AMP(2   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL FVIXXX(W(1,6   ),W(1,2   ),GZN ,ZERO    ,ZERO    ,W(1,12  ))    
      CALL JIOXXX(W(1,3   ),W(1,11  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,13  ))    
      CALL IOVXXX(W(1,12  ),W(1,5   ),W(1,13  ),GZN ,AMP(3   ))            
      CALL FVOXXX(W(1,5   ),W(1,2   ),GZN ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL JIOXXX(W(1,6   ),W(1,14  ),GZN ,ZMASS   ,ZWIDTH  ,W(1,15  ))    
      CALL IOVXXX(W(1,3   ),W(1,11  ),W(1,15  ),GZL ,AMP(4   ))            
      CALL FVOXXX(W(1,11  ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,17  ))    
      CALL IOVXXX(W(1,3   ),W(1,17  ),W(1,16  ),GZL ,AMP(5   ))            
      CALL FVIXXX(W(1,7   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,18  ))    
      CALL JIOXXX(W(1,18  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,19  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,19  ),GZN ,AMP(6   ))            
      CALL JIOXXX(W(1,7   ),W(1,11  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,20  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,20  ),GZN ,AMP(7   ))            
      CALL FVOXXX(W(1,4   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,21  ))    
      CALL FVIXXX(W(1,6   ),W(1,1   ),GZN ,ZERO    ,ZERO    ,W(1,22  ))    
      CALL JIOXXX(W(1,3   ),W(1,21  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,23  ))    
      CALL IOVXXX(W(1,22  ),W(1,5   ),W(1,23  ),GZN ,AMP(8   ))            
      CALL JIOXXX(W(1,6   ),W(1,10  ),GZN ,ZMASS   ,ZWIDTH  ,W(1,24  ))    
      CALL IOVXXX(W(1,3   ),W(1,21  ),W(1,24  ),GZL ,AMP(9   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,25  ))    
      CALL JIOXXX(W(1,25  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,26  ))    
      CALL FVOXXX(W(1,5   ),W(1,26  ),GZN ,ZERO    ,ZERO    ,W(1,27  ))    
      CALL IOVXXX(W(1,6   ),W(1,27  ),W(1,2   ),GZN ,AMP(10  ))            
      CALL IOVXXX(W(1,6   ),W(1,14  ),W(1,26  ),GZN ,AMP(11  ))            
      CALL FVOXXX(W(1,21  ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,28  ))    
      CALL IOVXXX(W(1,3   ),W(1,28  ),W(1,16  ),GZL ,AMP(12  ))            
      CALL FVIXXX(W(1,25  ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,29  ))    
      CALL JIOXXX(W(1,29  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,30  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,30  ),GZN ,AMP(13  ))            
      CALL JIOXXX(W(1,25  ),W(1,21  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,31  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,31  ),GZN ,AMP(14  ))            
      CALL IOVXXX(W(1,12  ),W(1,10  ),W(1,32  ),GZN ,AMP(15  ))  

      if (hswitchzz) then         
      CALL HVVXXX(W(1,32  ),W(1,2   ),GZZH ,HMASS   ,HWIDTH  ,W(1,         
     &     33  ))                                                          
      CALL VVSXXX(W(1,16  ),W(1,1   ),W(1,33  ),GZZH ,AMP(16  ))
      endif
          
      CALL FVIXXX(W(1,6   ),W(1,32  ),GZN ,ZERO    ,ZERO    ,W(1,34  ))    
      CALL IOVXXX(W(1,34  ),W(1,10  ),W(1,2   ),GZN ,AMP(17  ))            
      CALL IOVXXX(W(1,22  ),W(1,14  ),W(1,32  ),GZN ,AMP(18  ))   

      if (hswitchzz) then           
      CALL HVVXXX(W(1,1   ),W(1,32  ),GZZH ,HMASS   ,HWIDTH  ,W(1,         
     &     35  ))                                                          
      CALL VVSXXX(W(1,16  ),W(1,2   ),W(1,35  ),GZZH ,AMP(19  ))
      endif
                 
      CALL IOVXXX(W(1,34  ),W(1,14  ),W(1,1   ),GZN ,AMP(20  ))            
      CALL FVOXXX(W(1,5   ),W(1,32  ),GZN ,ZERO    ,ZERO    ,W(1,36  ))    
      CALL IOVXXX(W(1,22  ),W(1,36  ),W(1,2   ),GZN ,AMP(21  ))            
      CALL IOVXXX(W(1,12  ),W(1,36  ),W(1,1   ),GZN ,AMP(22  ))

      if (hswitchzz) then              
      CALL HVVXXX(W(1,1   ),W(1,2   ),GZZH ,HMASS   ,HWIDTH  ,W(1,         
     &     37  ))                                                          
      CALL JVSXXX(W(1,32  ),W(1,37  ),GZZH ,ZMASS   ,ZWIDTH  ,W(1,         
     &     38  ))                                                          
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,38  ),GZN ,AMP(23  ))
      endif            
c
c  KK-Amplitudes
c
      if (hswitchzz) then
      do k=1,kkhh
      CALL HVVXXX(W(1,32  ),W(1,2   ),GZZH_K(0,0,k) ,H1MASS_K(k),H1WIDTH_K(k), KKH1(1,k))              
      CALL VVSXXX(W(1,16  ),W(1,1   ),KKH1(1,k),GZZH_K(0,0,k) ,AMPKH1(k ))
c
      CALL HVVXXX(W(1,1   ),W(1,32  ),GZZH_K(0,0,k) ,H1MASS_K(k),H1WIDTH_K(k), KKH2(1,k))     
      CALL VVSXXX(W(1,16  ),W(1,2   ),KKH2(1,k),GZZH_K(0,0,k) ,AMPKH2(k  )) 
c
      CALL HVVXXX(W(1,1   ),W(1,2   ),GZZH_K(0,0,k) ,H1MASS_K(k),H1WIDTH_K(k), KKH3(1,k))
      CALL JVSXXX(W(1,32  ),KKH3(1,k),GZZH_K(0,0,k) ,ZMASS,ZWIDTH , KKH4(1,k))                                                          
      CALL IOVXXX(W(1,6   ),W(1,5   ),KKH4(1,k),GZN ,AMPKH3(k  ))
      enddo
      endif

      zz(mu,nu)= -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)-AMP(   5)
     &             -AMP(   6)-AMP(   7)-AMP(   8)-AMP(   9)-AMP(  10)
     &             -AMP(  11)-AMP(  12)-AMP(  13)-AMP(  14)-AMP(  15)
     &             -AMP(  16)-AMP(  17)-AMP(  18)-AMP(  19)-AMP(  20)
     &             -AMP(  21)-AMP(  22)-AMP(  23)
 
      do k=1,kkhh
         zz(mu,nu)=zz(mu,nu)-AMPKH1(k)-AMPKH2(k)-AMPKH3(k)
      enddo
	  enddo
       enddo

      END
c ------------------------------------------------------------	
c ------------------------------------------------------------	

      subroutine vvtoll_kk(idb,idl,h,Q,v,aa,az,za,zz)
	
      IMPLICIT NONE

        integer idb,idbb,idl,h
        real*8 q(0:3), v(0:3,4)
        complex*16 aa(0:3,0:3)
        complex*16 az(0:3,0:3)
        complex*16 za(0:3,0:3)
c        complex*16 zan(0:3,0:3)
        complex*16 zz(0:3,0:3)
	integer lsign(2,2),i,ll,mu,nu
      
c	data (lsign(ll,1),ll=1,2) /  1,  1/
c	data (lsign(ll,2),ll=1,2) / -1, -1/
	
	data (lsign(ll,1),ll=1,2) / -1, -1/
	data (lsign(ll,2),ll=1,2) / +1, +1/
	
	idbb = -idb+3
	
	if (idl.eq.1) then ! e+e-
	   if (h.eq.1.or.h.eq.2)  i = 1
	   if (h.eq.3.or.h.eq.4)  i = 2
	elseif (idl.eq.2) then ! mu+mu-
	   if (h.eq.1.or.h.eq.3)  i = 1
	   if (h.eq.2.or.h.eq.4)  i = 2
	endif   

	        call AAtoLL1_kk(idb ,idl,Q,v,lsign(1,i),aa(0,0))
	        call AZtoLL1_kk(idb ,idl,Q,v,lsign(1,i),az(0,0))
	        call ZAtoLL1_kk(idb,idl,Q,v,lsign(1,i),za(0,0)) 
	        call ZZtoLL1_kk(idb ,idl,Q,v,lsign(1,i),zz(0,0))
			
	end
		
c ------------------------------------------------------------	
       
      subroutine AAtoLL1_kk(idb,idl,Q,v,lsign,aa)
C  Input:   Q(*)        one of the two incoming boson momenta 
c           idb = 1      Q = q1 = A(1) momentum
c           idb = 2      Q = q2 = A(2) momentum
c	    idl = 1	 l is e
c	    idl = 2	 l is mu
c  OUPTPUT: aa(mu,nu)  lepton tensor for a a --> l+l-  
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : a a -> e+ e-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS 
      PARAMETER (NGRAPHS=   2) 
      INTEGER    NWAVEFUNCS   
      PARAMETER (NWAVEFUNCS=   6) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      integer idb,idl
      real*8 q(0:3), v(0:3,4), p(0:3,3:4)
      complex*16 aa(0:3,0:3)
      integer lsign(3:4)
C    
C LOCAL VARIABLES 
C  
      INTEGER I,mu,nu
      real*8 Q1(0:3), Q2(0:3)
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
c  lepton spinors 
#include "tensorz.inc"
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/kkcoupl.inc"
      logical lswitch
      parameter (lswitch=.true.)
C                                                                          
C ----------
C BEGIN CODE
C ----------
      
      if (idb.eq.1) then
         do mu = 0,3
            q1(mu) = q(mu)
	    if (idl.eq.1) then
                q2(mu) = qe(mu)-q(mu)
		p(mu,3) = v(mu,1)
		p(mu,4) = v(mu,2)
	    else
	        q2(mu) = qu(mu)-q(mu)
		p(mu,3) = v(mu,3)
		p(mu,4) = v(mu,4)
	    endif
         enddo
      elseif (idb.eq.2) then
         do mu = 0,3
            q2(mu) = q(mu)
	    if (idl.eq.1) then
            	q1(mu) = qe(mu)-q(mu)
		p(mu,3) = v(mu,1)
		p(mu,4) = v(mu,2)
	    else
            	q1(mu) = qu(mu)-q(mu)
		p(mu,3) = v(mu,3)
		p(mu,4) = v(mu,4)
	    endif
         enddo
      endif
	
	if (lswitch) then
	  if (idl.eq.1) then
	    do i = 1,6
	    w(i,3) = lep(i)
	    w(i,4) = lem(i)
	    enddo
	  else
	    do i = 1,6
	    w(i,3) = lup(i)
	    w(i,4) = lum(i)
	    enddo
	  endif
	else	 
       	  CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3),-1,W(1,3   ))	     
       	  CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4),+1,W(1,4   )) 
	endif
             
      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),zero ,zero, MU,-1,W(1,1	  ))	    
      CALL VCARTX(Q2(0),zero ,zero, NU,-1,W(1,2	  )) 
 
 
      CALL FVIXXX(W(1,3   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,5   ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,1   ),GAL ,AMP(1   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL IOVXXX(W(1,6   ),W(1,4   ),W(1,2   ),GAL ,AMP(2   ))            
      
      aa(mu,nu) = +AMP(   1)+AMP(   2)
        
	 enddo !nu
      enddo !mu

      end

c ------------------------------------------------------------	
       
      subroutine AZtoLL1_kk(idb,idl,Q,v,lsign,az)
C  Input:   Q(*)        one of the two incoming boson momenta 
c           idb = 1      Q = q1 = A(1) momentum
c           idb = 2      Q = q2 = A(2) momentum
c	    idl = 1	 l is e
c	    idl = 2	 l is mu
c  OUPTPUT: aa(mu,nu)  lepton tensor for a z --> l+l-  
C  
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : a z -> e+ e-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS 
      PARAMETER (NGRAPHS=   2) 
      INTEGER    NWAVEFUNCS  
      PARAMETER (NWAVEFUNCS=   6) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      integer idb,idl
      real*8 q(0:3), v(0:3,4), p(0:3,3:4)
      complex*16 az(0:3,0:3)
      integer lsign(3:4)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu,nu
      real*8 Q1(0:3), Q2(0:3)
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
c  lepton spinors 
#include "tensorz.inc"
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/kkcoupl.inc"
      logical lswitch
      parameter (lswitch=.true.)
C  
C ----------
C BEGIN CODE
C ----------
      
      if (idb.eq.1) then
         do mu = 0,3
            q1(mu) = q(mu)
	    if (idl.eq.1) then
                q2(mu) = qe(mu)-q(mu)
		p(mu,3) = v(mu,1)
		p(mu,4) = v(mu,2)
	    else
	        q2(mu) = qu(mu)-q(mu)
		p(mu,3) = v(mu,3)
		p(mu,4) = v(mu,4)
	    endif
         enddo
      elseif (idb.eq.2) then
         do mu = 0,3
            q2(mu) = q(mu)
	    if (idl.eq.1) then
            	q1(mu) = qe(mu)-q(mu)
		p(mu,3) = v(mu,1)
		p(mu,4) = v(mu,2)
	    else
            	q1(mu) = qu(mu)-q(mu)
		p(mu,3) = v(mu,3)
		p(mu,4) = v(mu,4)
	    endif
         enddo
      endif
	 
        if (lswitch) then
	  if (idl.eq.1) then
	    do i = 1,6
	    w(i,3) = lep(i)
	    w(i,4) = lem(i)
	    enddo
	  else
	    do i = 1,6
	    w(i,3) = lup(i)
	    w(i,4) = lum(i)
	    enddo
	  endif
	else	 
       	  CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3),-1,W(1,3   ))        
          CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4),+1,W(1,4   )) 
	endif
             
      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),zero  ,zero, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),zMASS ,zwidth, NU,-1,W(1,2   )) 
 
      CALL FVIXXX(W(1,3   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,5   ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,1   ),GAL ,AMP(1   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL IOVXXX(W(1,6   ),W(1,4   ),W(1,2   ),GZL ,AMP(2   ))            
      
      az(mu,nu) = +AMP(   1)+AMP(   2)
         
	 enddo !nu
      enddo !mu

      end

c ------------------------------------------------------------	
       
      subroutine ZAtoLL1_kk(idb,idl,Q,v,lsign,za)
C  Input:   Q(*)        one of the two incoming boson momenta 
c           idb = 1      Q = q1 = A(1) momentum
c           idb = 2      Q = q2 = A(2) momentum
c	    idl = 1	 l is e
c	    idl = 2	 l is mu
c  OUPTPUT: aa(mu,nu)  lepton tensor for a z --> l+l-  
C  
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : z a -> e+ e-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   2) 
      INTEGER    NWAVEFUNCS 
      PARAMETER (NWAVEFUNCS=   6) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      integer idb,idl
      real*8 q(0:3), v(0:3,4), p(0:3,3:4)
      complex*16 za(0:3,0:3)
      integer lsign(3:4)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu,nu
      real*8 Q1(0:3), Q2(0:3)
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
c  lepton spinors 
#include "tensorz.inc"
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/kkcoupl.inc"
      logical lswitch
      parameter (lswitch=.true.)
C                                                                          
C ----------
C BEGIN CODE
C ----------
      
      if (idb.eq.1) then
         do mu = 0,3
            q1(mu) = q(mu)
	    if (idl.eq.1) then
                q2(mu) = qe(mu)-q(mu)
		p(mu,3) = v(mu,1)
		p(mu,4) = v(mu,2)
	    else
	        q2(mu) = qu(mu)-q(mu)
		p(mu,3) = v(mu,3)
		p(mu,4) = v(mu,4)
	    endif
         enddo
      elseif (idb.eq.2) then
         do mu = 0,3
            q2(mu) = q(mu)
	    if (idl.eq.1) then
            	q1(mu) = qe(mu)-q(mu)
		p(mu,3) = v(mu,1)
		p(mu,4) = v(mu,2)
	    else
            	q1(mu) = qu(mu)-q(mu)
		p(mu,3) = v(mu,3)
		p(mu,4) = v(mu,4)
	    endif
         enddo
      endif

	if (lswitch) then
	  if (idl.eq.1) then
	    do i = 1,6
	    w(i,3) = lep(i)
	    w(i,4) = lem(i)
	    enddo
	  else
	    do i = 1,6
	    w(i,3) = lup(i)
	    w(i,4) = lum(i)
	    enddo
	  endif
	else	 
          CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3),-1,W(1,3   ))        
          CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4),+1,W(1,4   )) 
        endif  
	     
      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),zmass ,zwidth, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),zero  ,zero , NU,-1,W(1,2   )) 
 
      CALL FVIXXX(W(1,3   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,5   ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,1   ),GZL ,AMP(1   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL IOVXXX(W(1,6   ),W(1,4   ),W(1,2   ),GAL ,AMP(2   ))            
      
      za(mu,nu) = +AMP(   1)+AMP(   2)
 
 	 enddo !nu
      enddo !mu

      end


c ------------------------------------------------------------	
       
      subroutine ZZtoLL1_kk(idb,idl,Q,v,lsign,zz)
C  Input:   Q(*)        one of the two incoming boson momenta 
c           idb = 1      Q = q1 = A(1) momentum
c           idb = 2      Q = q2 = A(2) momentum
c	    idl = 1	 l is e
c	    idl = 2	 l is mu
c  OUPTPUT: aa(mu,nu)  lepton tensor for z z --> l+l-  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : z z -> e+ e-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS 
      PARAMETER (NGRAPHS=   2) 
      INTEGER    NWAVEFUNCS   
      PARAMETER (NWAVEFUNCS=   6) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      integer idb,idl
      real*8 q(0:3), v(0:3,4), p(0:3,3:4)
      complex*16 zz(0:3,0:3)
      integer lsign(3:4)
C  
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu,nu
      real*8 Q1(0:3), Q2(0:3)
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
c  lepton spinors 
#include "tensorz.inc"
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/kkcoupl.inc"
      logical lswitch
      parameter (lswitch=.true.)
C  
C ----------
C BEGIN CODE
C ----------
      
      if (idb.eq.1) then
         do mu = 0,3
            q1(mu) = q(mu)
	    if (idl.eq.1) then
                q2(mu) = qe(mu)-q(mu)
		p(mu,3) = v(mu,1)
		p(mu,4) = v(mu,2)
	    else
	        q2(mu) = qu(mu)-q(mu)
		p(mu,3) = v(mu,3)
		p(mu,4) = v(mu,4)
	    endif
         enddo
      elseif (idb.eq.2) then
         do mu = 0,3
            q2(mu) = q(mu)
	    if (idl.eq.1) then
            	q1(mu) = qe(mu)-q(mu)
		p(mu,3) = v(mu,1)
		p(mu,4) = v(mu,2)
	    else
            	q1(mu) = qu(mu)-q(mu)
		p(mu,3) = v(mu,3)
		p(mu,4) = v(mu,4)
	    endif
         enddo
      endif

	if (lswitch) then
	  if (idl.eq.1) then
	    do i = 1,6
	    w(i,3) = lep(i)
	    w(i,4) = lem(i)
	    enddo
	  else
	    do i = 1,6
	    w(i,3) = lup(i)
	    w(i,4) = lum(i)
	    enddo
	  endif
	else	 
          CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3),-1,W(1,3   ))        
          CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4),+1,W(1,4   )) 
        endif
	  
	     
      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),zMASS ,zwidth, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),zMASS ,zwidth, NU,-1,W(1,2   )) 
 
      CALL FVIXXX(W(1,3   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,5   ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,1   ),GZL ,AMP(1   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL IOVXXX(W(1,6   ),W(1,4   ),W(1,2   ),GZL ,AMP(2   ))            
      
      zz(mu,nu) = +AMP(   1)+AMP(   2)
        
	 enddo !nu
      enddo !mu

      end
c ------------------------------------------------------------	

      subroutine vvtolln_kk(idb,Q,v,aa,az,za,zz)
	
      IMPLICIT NONE

        integer idb
        real*8 q(0:3), v(0:3,2)
        complex*16 aa(0:3,0:3)
        complex*16 az(0:3,0:3)
        complex*16 za(0:3,0:3)
        complex*16 zz(0:3,0:3)
	integer mu,nu

	call ZZtoLLN1(idb,Q,v,zz)
		
	do mu = 0,3
	   do nu = 0,3
	      aa(mu,nu) = 0d0
	      az(mu,nu) = 0d0
	      za(mu,nu) = 0d0
	   enddo
	enddo   	
		
	end
		
c ------------------------------------------------------------	
       
      subroutine ZZtoLLN1_kk(idb,Q,v,zz)
   
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : z z -> vm vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   2) 
      INTEGER    NWAVEFUNCS 
      PARAMETER (NWAVEFUNCS=   6) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      integer idb
      real*8 q(0:3), v(0:3,2), p(0:3,3:4)
      complex*16 zz(0:3,0:3)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu,nu
      real*8 Q1(0:3), Q2(0:3)
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
c  lepton spinors 
#include "tensorz.inc"
c
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/kkcoupl.inc"
      logical lswitch
      parameter (lswitch=.true.)
C  
C                                                                          
C ----------
C BEGIN CODE
C ----------
      
      if (idb.eq.1) then
         do mu = 0,3
            q1(mu) = q(mu)
	    q2(mu) = qu(mu)-q(mu)
	    p(mu,3) = v(mu,1)
	    p(mu,4) = v(mu,2)
         enddo
      elseif (idb.eq.2) then
         do mu = 0,3
            q2(mu) = q(mu)
            q1(mu) = qu(mu)-q(mu)
	    p(mu,3) = v(mu,1)
	    p(mu,4) = v(mu,2)
         enddo
      endif
 
 	if (lswitch) then
	    do i = 1,6
	    w(i,3) = lum(i)
	    w(i,4) = lup(i)
	    enddo
	else
       	  CALL OXXXXX(P(0,3   ),ZERO ,-1,+1,W(1,3   ))        
       	  CALL IXXXXX(P(0,4   ),ZERO ,+1,-1,W(1,4   )) 
        endif    
	     
      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),zMASS ,zwidth, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),zMASS ,zwidth, NU,-1,W(1,2   )) 

      CALL FVOXXX(W(1,3   ),W(1,2   ),GZN ,ZERO    ,ZERO    ,W(1,5   ))    
      CALL IOVXXX(W(1,4   ),W(1,5   ),W(1,1   ),GZN ,AMP(1   ))            
      CALL FVOXXX(W(1,3   ),W(1,1   ),GZN ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL IOVXXX(W(1,4   ),W(1,6   ),W(1,2   ),GZN ,AMP(2   ))            
      
      zz(mu,nu)  = -AMP(   1)-AMP(   2)
	
	 enddo !nu
      enddo !mu

      end

c ------------------------------------------------------------	

c ------------------------------------------------------------	

      subroutine vto4l_kk(p,h,a4l,z4l)
	
      IMPLICIT NONE

      REAL*8 P(0:3,2:5)
      complex*16 a4l(0:5),z4l(0:5)
      integer lsign(2:5,4),h,ll   

	! possible lepton helicities:
	data (lsign(ll,1),ll=2,5) / -1, -1, -1, -1/  !h=1
	data (lsign(ll,2),ll=2,5) / -1, -1,  1,  1/  !h=2
	data (lsign(ll,3),ll=2,5) /  1,  1, -1, -1/  !h=3
	data (lsign(ll,4),ll=2,5) /  1,  1,  1,  1/  !h=4

	call Zto4l_kk(P,lsign(2,h),z4l)
	call Ato4l_kk(P,lsign(2,h),a4l)
		
			
	end
		
c ------------------------------------------------------------	
c ------------------------------------------------------------	
   
      subroutine Zto4L_kk(P,lsign,z)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : z -> e+ e- mu+ mu-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   8) 
      INTEGER    NWAVEFUNCS 
      PARAMETER (NWAVEFUNCS=  16) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,2:5),q(0:3)
      INTEGER lsign(2:5)
      complex*16 z(0:5)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
c  lepton spinors and Z polarization vectors
#include "tensorz.inc"

C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/kkcoupl.inc"
      logical lswitch
      parameter (lswitch=.true.)
C  
C ----------
C BEGIN CODE
C ----------

      if (lswitch) then
      	do i = 1,6
	 w(i,2) = lep(i)
	 w(i,3) = lem(i)
	 w(i,4) = lup(i)
	 w(i,5) = lum(i)
      	enddo
      else 
        CALL IXXXXX(P(0,2   ),ZERO ,-lsign(2),-1,W(1,2   ))       
        CALL OXXXXX(P(0,3   ),ZERO ,+lsign(3),+1,W(1,3   ))       
        CALL IXXXXX(P(0,4   ),ZERO ,-lsign(4),-1,W(1,4   ))       
        CALL OXXXXX(P(0,5   ),ZERO ,+lsign(5),+1,W(1,5   )) 
      endif
             
      do mu = 0,3
         q(mu) = p(mu,2)+p(mu,3)+p(mu,4)+p(mu,5)
      enddo
c
      do mu = 0,3
      CALL VCARTX(Q(0),zmass ,zwidth, MU,-1,W(1,1   ))
      CALL JIOXXX(W(1,2   ),W(1,3   ),GAL ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL FVIXXX(W(1,4   ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL IOVXXX(W(1,7   ),W(1,5   ),W(1,1   ),GZL ,AMP(1   ))            
      CALL JIOXXX(W(1,2   ),W(1,3   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,8   ))    
      CALL FVIXXX(W(1,4   ),W(1,8   ),GZL ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,9   ),W(1,5   ),W(1,1   ),GZL ,AMP(2   ))            
      CALL FVIXXX(W(1,4   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,10  ))    
      CALL IOVXXX(W(1,10  ),W(1,5   ),W(1,6   ),GAL ,AMP(3   ))            
      CALL IOVXXX(W(1,10  ),W(1,5   ),W(1,8   ),GZL ,AMP(4   ))            
      CALL FVOXXX(W(1,3   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL JIOXXX(W(1,2   ),W(1,11  ),GAL ,ZERO    ,ZERO    ,W(1,12  ))    
      CALL IOVXXX(W(1,4   ),W(1,5   ),W(1,12  ),GAL ,AMP(5   ))            
      CALL JIOXXX(W(1,2   ),W(1,11  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,13  ))    
      CALL IOVXXX(W(1,4   ),W(1,5   ),W(1,13  ),GZL ,AMP(6   ))            
      CALL FVIXXX(W(1,2   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL JIOXXX(W(1,14  ),W(1,3   ),GAL ,ZERO    ,ZERO    ,W(1,15  ))    
      CALL IOVXXX(W(1,4   ),W(1,5   ),W(1,15  ),GAL ,AMP(7   ))            
      CALL JIOXXX(W(1,14  ),W(1,3   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,16  ))    
      CALL IOVXXX(W(1,4   ),W(1,5   ),W(1,16  ),GZL ,AMP(8   ))            
      z(mu) = +AMP(   1)+AMP(   2)+AMP(   3)+AMP(   4)+AMP(   5)
     &             +AMP(   6)+AMP(   7)+AMP(   8)
      enddo
             
      z(4) = dcmplx(q(0),q(3))
      z(5) = dcmplx(q(1),q(2))

      return
      END
      
c------------------------------------------------------------------------      
          
      subroutine Ato4L_kk(P,lsign,a)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : a -> e+ e- mu+ mu-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   8) 
      INTEGER    NWAVEFUNCS    
      PARAMETER (NWAVEFUNCS=  16) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,2:5),q(0:3)
      INTEGER lsign(2:5)
      complex*16 a(0:5)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/kkcoupl.inc"    
c  lepton spinors and Z polarization vectors
#include "tensorz.inc"
   
      logical lswitch
      parameter (lswitch=.true.)
C                                                                          
C ----------
C BEGIN CODE
C ----------

      if (lswitch) then
      	do i = 1,6
	 w(i,2) = lep(i)
	 w(i,3) = lem(i)
	 w(i,4) = lup(i)
	 w(i,5) = lum(i)
	 
	 w(i,6) = ae(i)
	 w(i,8) = ze(i)
      	enddo
      else   
        CALL IXXXXX(P(0,2   ),ZERO ,-lsign(2   ),-1,W(1,2   ))	   
        CALL OXXXXX(P(0,3   ),ZERO ,+lsign(3   ),+1,W(1,3   ))	   
        CALL IXXXXX(P(0,4   ),ZERO ,-lsign(4   ),-1,W(1,4   ))	   
        CALL OXXXXX(P(0,5   ),ZERO ,+lsign(5   ),+1,W(1,5   ))	   
        
	CALL JIOXXX(W(1,2   ),W(1,3   ),GAL ,ZERO    ,ZERO    ,W(1,6   ))    
        CALL JIOXXX(W(1,2   ),W(1,3   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,8   ))    
      endif

      do mu = 0,3
         q(mu) = p(mu,2)+p(mu,3)+p(mu,4)+p(mu,5)
      enddo

c
      do mu = 0,3
      CALL VCARTX(Q(0),zero ,zero, MU,-1,W(1,1   ))
      CALL FVIXXX(W(1,4   ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL IOVXXX(W(1,7   ),W(1,5   ),W(1,1   ),GAL ,AMP(1   ))            
      CALL FVIXXX(W(1,4   ),W(1,8   ),GZL ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,9   ),W(1,5   ),W(1,1   ),GAL ,AMP(2   ))            
      CALL FVIXXX(W(1,4   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,10  ))    
      CALL IOVXXX(W(1,10  ),W(1,5   ),W(1,6   ),GAL ,AMP(3   ))            
      CALL IOVXXX(W(1,10  ),W(1,5   ),W(1,8   ),GZL ,AMP(4   ))            
      CALL FVOXXX(W(1,3   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL JIOXXX(W(1,2   ),W(1,11  ),GAL ,ZERO    ,ZERO    ,W(1,12  ))    
      CALL IOVXXX(W(1,4   ),W(1,5   ),W(1,12  ),GAL ,AMP(5   ))            
      CALL JIOXXX(W(1,2   ),W(1,11  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,13  ))    
      CALL IOVXXX(W(1,4   ),W(1,5   ),W(1,13  ),GZL ,AMP(6   ))            
      CALL FVIXXX(W(1,2   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL JIOXXX(W(1,14  ),W(1,3   ),GAL ,ZERO    ,ZERO    ,W(1,15  ))    
      CALL IOVXXX(W(1,4   ),W(1,5   ),W(1,15  ),GAL ,AMP(7   ))            
      CALL JIOXXX(W(1,14  ),W(1,3   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,16  ))    
      CALL IOVXXX(W(1,4   ),W(1,5   ),W(1,16  ),GZL ,AMP(8   ))            
      a(mu) = +AMP(   1)+AMP(   2)+AMP(   3)+AMP(   4)+AMP(   5)
     &             +AMP(   6)+AMP(   7)+AMP(   8)
     
      enddo   
     
      a(4) = dcmplx(q(0),q(3))
      a(5) = dcmplx(q(1),q(2))

      return
      END
      

c ------------------------------------------------------------	

      subroutine vto4ln_kk(p,h,a4l,z4l)
	
      IMPLICIT NONE

      REAL*8 P(0:3,2:5)
      complex*16 a4l(0:5),z4l(0:5)
      integer lsign(2:5,4),h,ll   

	! possible lepton helicities:
	data (lsign(ll,1),ll=2,5) / -1, -1, -1, -1/  !h=1 
	data (lsign(ll,2),ll=2,5) / -1, -1,  1,  1/  !h=2 -> zero
	data (lsign(ll,3),ll=2,5) /  1,  1, -1, -1/  !h=3 
	data (lsign(ll,4),ll=2,5) /  1,  1,  1,  1/  !h=4 -> zero

	call Zto4ln_kk(P,lsign(2,h),z4l)
	call Ato4ln_kk(P,lsign(2,h),a4l)
	
			
	end
		
c ------------------------------------------------------------	
c ------------------------------------------------------------	
   
      subroutine Zto4LN_kk(P,lsign,z)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : z -> e+ e- vm vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   4) 
      INTEGER    NWAVEFUNCS   
      PARAMETER (NWAVEFUNCS=  12) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,2:5),q(0:3)
      INTEGER lsign(2:5)
      complex*16 z(0:5)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/kkcoupl.inc"
c  lepton spinors and Z polarization vectors
#include "tensorz.inc"
  
      logical lswitch
      parameter (lswitch=.true.)
C                                                                          
C ----------
C BEGIN CODE
C ----------

      if (lswitch) then
      	do i = 1,6
	 w(i,2) = lep(i)
	 w(i,3) = lem(i)
	 w(i,4) = lum(i)
	 w(i,5) = lup(i)
	 
	 w(i,6) = ze(i)
      	enddo
      else
        CALL IXXXXX(P(0,2   ),ZERO ,-lsign(2),-1,W(1,2   ))       
        CALL OXXXXX(P(0,3   ),ZERO ,+lsign(3),+1,W(1,3   ))       
        CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4),+1,W(1,4   ))       
        CALL IXXXXX(P(0,5   ),ZERO ,-lsign(5),-1,W(1,5   )) 

        CALL JIOXXX(W(1,2   ),W(1,3   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,6   ))    
      endif
                         
      do mu = 0,3
         q(mu) = p(mu,2)+p(mu,3)+p(mu,4)+p(mu,5)
      enddo


      do mu = 0,3
      CALL VCARTX(Q(0),zmass ,zwidth, MU,-1,W(1,1   ))
      CALL FVOXXX(W(1,4   ),W(1,6   ),GZN ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL IOVXXX(W(1,5   ),W(1,7   ),W(1,1   ),GZN ,AMP(1   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GZN ,ZERO    ,ZERO    ,W(1,8   ))    
      CALL IOVXXX(W(1,5   ),W(1,8   ),W(1,6   ),GZN ,AMP(2   ))            
      CALL FVOXXX(W(1,3   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL JIOXXX(W(1,2   ),W(1,9   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,10  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,10  ),GZN ,AMP(3   ))            
      CALL FVIXXX(W(1,2   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL JIOXXX(W(1,11  ),W(1,3   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,12  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,12  ),GZN ,AMP(4   ))            
      z(  mu) = -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)
      enddo
             
      z(4) = dcmplx(q(0),q(3))
      z(5) = dcmplx(q(1),q(2))

      return
      END

c------------------------------------------------------------------------      
          
      subroutine Ato4LN_kk(P,lsign,a)
C  
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : a -> e+ e- vm vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   2) 
      INTEGER    NWAVEFUNCS   
      PARAMETER (NWAVEFUNCS=   9) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,2:5),q(0:3)
      INTEGER lsign(2:5)
      complex*16 a(0:5)
C  
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/kkcoupl.inc"
c  lepton spinors and Z polarization vectors
#include "tensorz.inc"
   
      logical lswitch
      parameter (lswitch=.true.)
C  
C                                                                          
C ----------
C BEGIN CODE
C ----------
      
      if (lswitch) then
      	do i = 1,6
	 w(i,2) = lep(i)
	 w(i,3) = lem(i)
	 w(i,4) = lum(i)
	 w(i,5) = lup(i)
      	enddo
      else
        CALL IXXXXX(P(0,2   ),ZERO ,-lsign(2),-1,W(1,2   ))       
        CALL OXXXXX(P(0,3   ),ZERO ,+lsign(3),+1,W(1,3   ))       
        CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4),+1,W(1,4   ))       
        CALL IXXXXX(P(0,5   ),ZERO ,-lsign(5),-1,W(1,5   )) 
      endif  
	                 
      do mu = 0,3
         q(mu) = p(mu,2)+p(mu,3)+p(mu,4)+p(mu,5)
      enddo
 
      do mu = 0,3
      CALL VCARTX(Q(0),zero ,zero, MU,-1,W(1,1   ))
      CALL FVOXXX(W(1,3   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL JIOXXX(W(1,2   ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,7   ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,7   ),GZN ,AMP(1   ))            
      CALL FVIXXX(W(1,2   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,8   ))    
      CALL JIOXXX(W(1,8   ),W(1,3   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,9   ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,9   ),GZN ,AMP(2   ))            

      a( mu) = -AMP(   1)-AMP(   2)
       
      enddo   
     
      a(4) = dcmplx(q(0),q(3))
      a(5) = dcmplx(q(1),q(2))
	

      return
      END



