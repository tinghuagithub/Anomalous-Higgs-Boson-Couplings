c modified version of tozz.F, including exchange of spin-2 particles
c
c by Jessica Frank	

      subroutine wwtozz_spin2(q1,q2,P,h,ww)
	
      IMPLICIT NONE

      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 ww(0:3,0:3)
      integer lsign(3:6,4),ll,h
      

	! possible lepton helicities:
	data (lsign(ll,1),ll=3,6) / -1, -1, -1, -1/  !h=1
	data (lsign(ll,2),ll=3,6) / -1, -1,  1,  1/  !h=2
	data (lsign(ll,3),ll=3,6) /  1,  1, -1, -1/  !h=3
	data (lsign(ll,4),ll=3,6) /  1,  1,  1,  1/  !h=4
	
	call WWtoZZ1_spin2(q1,q2,P,lsign(3,h),ww(0,0))
	
	! helicity combi nr.h is selected
	
	end
		
c ------------------------------------------------------------	

      subroutine WWtoZZ1_spin2(q1,q2,P,lsign,ww)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : w+ w- -> e+ e- mu+ mu-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  65) 
      INTEGER    NWAVEFUNCS 
      PARAMETER (NWAVEFUNCS=  57) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 ww(0:3,0:3)
      integer lsign(3:6)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,MU, NU
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(18,NWAVEFUNCS)
c
c  lepton spinors and Z polarization vectors
#include "tensorz.inc"
C  
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/spin2coupl.inc"
   
      logical lswitch
      parameter (lswitch=.true.)

c only for spin-2 formfactors
      double precision absmomsp2sq, absmomwpsq, absmomwmsq, formfac
C                                                                          
C ----------
C BEGIN CODE
C ----------
  
      if (lswitch) then
      	do i = 1,6
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,5) = lup(i)
	 w(i,6) = lum(i)
	
         w(i,8)  = au(i)
         w(i,10) = zu(i)
         w(i,23) = ze(i)
         w(i,25) = ae(i)
      	enddo
      else 
      	CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3   ),-1,W(1,3   ))	 
      	CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4   ),+1,W(1,4   ))	 
     	CALL IXXXXX(P(0,5   ),ZERO ,-lsign(5   ),-1,W(1,5   ))	 
      	CALL OXXXXX(P(0,6   ),ZERO ,+lsign(6   ),+1,W(1,6   ))	 

        CALL JIOXXX(W(1,5   ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,8   ))	  
        CALL JIOXXX(W(1,5   ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,10  ))	   
        CALL JIOXXX(W(1,3   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,23  ))	   
        CALL JIOXXX(W(1,3   ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,25  ))	   
      endif

      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),WMASS ,wwidth, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),WMASS ,wwidth, NU,-1,W(1,2   )) 
 
      CALL FVOXXX(W(1,4   ),W(1,2   ),GWF ,ZERO    ,ZERO    ,W(1,7   ))     
      CALL JIOXXX(W(1,3   ),W(1,7   ),GWF ,WMASS   ,WWIDTH  ,W(1,9   ))    
      CALL VVVXXX(W(1,1   ),W(1,9   ),W(1,8   ),GWWA ,AMP(1   ))                 
      CALL VVVXXX(W(1,1   ),W(1,9   ),W(1,10  ),GWWZ ,AMP(2   ))           
      CALL FVIXXX(W(1,5   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL JIOXXX(W(1,11  ),W(1,6   ),GWF ,WMASS   ,WWIDTH  ,W(1,12  ))    
      CALL IOVXXX(W(1,3   ),W(1,7   ),W(1,12  ),GWF ,AMP(3   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,13  ))    
      CALL JIOXXX(W(1,13  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,14  ))    
      CALL FVIXXX(W(1,5   ),W(1,14  ),GWF ,ZERO    ,ZERO    ,W(1,15  ))    
      CALL IOVXXX(W(1,15  ),W(1,6   ),W(1,2   ),GWF ,AMP(4   ))            
      CALL JVVXXX(W(1,14  ),W(1,2   ),GWWA ,ZERO    ,ZERO    ,W(1,         
     &     16  ))                                                          
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,16  ),GAL ,AMP(5   ))            
      CALL JVVXXX(W(1,14  ),W(1,2   ),GWWZ ,ZMASS   ,ZWIDTH  ,W(1,         
     &     17  ))                                                          
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,17  ),GZL ,AMP(6   ))            
      CALL FVOXXX(W(1,7   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,18  ))    
      CALL IOVXXX(W(1,3   ),W(1,18  ),W(1,8   ),GAL ,AMP(7   ))            
      CALL IOVXXX(W(1,3   ),W(1,18  ),W(1,10  ),GZL ,AMP(8   ))            
      CALL FVIXXX(W(1,13  ),W(1,2   ),GWF ,ZERO    ,ZERO    ,W(1,19  ))    
      CALL JIOXXX(W(1,19  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,20  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,20  ),GAL ,AMP(9   ))            
      CALL JIOXXX(W(1,19  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,21  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,21  ),GZL ,AMP(10  ))            
      CALL JIOXXX(W(1,13  ),W(1,7   ),GZN ,ZMASS   ,ZWIDTH  ,W(1,22  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,22  ),GZL ,AMP(11  ))                  
      CALL FVOXXX(W(1,6   ),W(1,2   ),GWF ,ZERO    ,ZERO    ,W(1,24  ))    
      CALL IOVXXX(W(1,11  ),W(1,24  ),W(1,23  ),GZN ,AMP(12  ))                  
      CALL JVVXXX(W(1,2   ),W(1,25  ),GWWA ,WMASS   ,WWIDTH  ,W(1,         
     &     26  ))                                                          
      CALL VVVXXX(W(1,1   ),W(1,26  ),W(1,8   ),GWWA ,AMP(13  ))           
      CALL VVVXXX(W(1,1   ),W(1,26  ),W(1,10  ),GWWZ ,AMP(14  ))           
      CALL JVVXXX(W(1,2   ),W(1,23  ),GWWZ ,WMASS   ,WWIDTH  ,W(1,         
     &     27  ))                                                          
      CALL VVVXXX(W(1,1   ),W(1,27  ),W(1,8   ),GWWA ,AMP(15  ))           
      CALL VVVXXX(W(1,1   ),W(1,27  ),W(1,10  ),GWWZ ,AMP(16  ))           
      CALL FVOXXX(W(1,6   ),W(1,25  ),GAL ,ZERO    ,ZERO    ,W(1,28  ))    
      CALL IOVXXX(W(1,11  ),W(1,28  ),W(1,2   ),GWF ,AMP(17  ))            
      CALL FVOXXX(W(1,6   ),W(1,23  ),GZL ,ZERO    ,ZERO    ,W(1,29  ))    
      CALL IOVXXX(W(1,11  ),W(1,29  ),W(1,2   ),GWF ,AMP(18  ))            
      CALL VVVXXX(W(1,12  ),W(1,2   ),W(1,25  ),GWWA ,AMP(19  ))           
      CALL VVVXXX(W(1,12  ),W(1,2   ),W(1,23  ),GWWZ ,AMP(20  ))           
      CALL JVVXXX(W(1,25  ),W(1,1   ),GWWA ,WMASS   ,WWIDTH  ,W(1,         
     &     30  ))                                                          
      CALL IOVXXX(W(1,5   ),W(1,24  ),W(1,30  ),GWF ,AMP(21  ))            
      CALL JVVXXX(W(1,23  ),W(1,1   ),GWWZ ,WMASS   ,WWIDTH  ,W(1,         
     &     31  ))                                                          
      CALL IOVXXX(W(1,5   ),W(1,24  ),W(1,31  ),GWF ,AMP(22  ))            
      CALL VVVXXX(W(1,30  ),W(1,2   ),W(1,8   ),GWWA ,AMP(23  ))           
      CALL VVVXXX(W(1,30  ),W(1,2   ),W(1,10  ),GWWZ ,AMP(24  ))           
      CALL VVVXXX(W(1,31  ),W(1,2   ),W(1,8   ),GWWA ,AMP(25  ))           
      CALL VVVXXX(W(1,31  ),W(1,2   ),W(1,10  ),GWWZ ,AMP(26  ))           
      CALL JVVXXX(W(1,1   ),W(1,2   ),GWWA ,ZERO    ,ZERO    ,W(1,         
     &     32  ))                                                          
      CALL FVOXXX(W(1,4   ),W(1,32  ),GAL ,ZERO    ,ZERO    ,W(1,33  ))    
      CALL JIOXXX(W(1,3   ),W(1,33  ),GAL ,ZERO    ,ZERO    ,W(1,34  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,34  ),GAL ,AMP(27  ))            
      CALL JIOXXX(W(1,3   ),W(1,33  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,35  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,35  ),GZL ,AMP(28  ))            
      CALL JVVXXX(W(1,1   ),W(1,2   ),GWWZ ,ZMASS   ,ZWIDTH  ,W(1,         
     &     36  ))                                                          
      CALL FVOXXX(W(1,4   ),W(1,36  ),GZL ,ZERO    ,ZERO    ,W(1,37  ))    
      CALL JIOXXX(W(1,3   ),W(1,37  ),GAL ,ZERO    ,ZERO    ,W(1,38  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,38  ),GAL ,AMP(29  ))            
      CALL JIOXXX(W(1,3   ),W(1,37  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,39  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,39  ),GZL ,AMP(30  ))            
      CALL FVIXXX(W(1,3   ),W(1,32  ),GAL ,ZERO    ,ZERO    ,W(1,40  ))    
      CALL JIOXXX(W(1,40  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,41  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,41  ),GAL ,AMP(31  ))            
      CALL JIOXXX(W(1,40  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,42  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,42  ),GZL ,AMP(32  ))            
      CALL FVIXXX(W(1,3   ),W(1,36  ),GZL ,ZERO    ,ZERO    ,W(1,43  ))    
      CALL JIOXXX(W(1,43  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,44  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,44  ),GAL ,AMP(33  ))            
      CALL JIOXXX(W(1,43  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,45  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,45  ),GZL ,AMP(34  ))            
      CALL FVIXXX(W(1,5   ),W(1,25  ),GAL ,ZERO    ,ZERO    ,W(1,46  ))    
      CALL IOVXXX(W(1,46  ),W(1,24  ),W(1,1   ),GWF ,AMP(35  ))            
      CALL FVIXXX(W(1,5   ),W(1,23  ),GZL ,ZERO    ,ZERO    ,W(1,47  ))    
      CALL IOVXXX(W(1,47  ),W(1,24  ),W(1,1   ),GWF ,AMP(36  ))            
      CALL HVVXXX(W(1,1   ),W(1,2   ),GWWH ,HMASS   ,HWIDTH  ,W(1,         
     &     48  ))                                                          
      CALL JVSXXX(W(1,23  ),W(1,48  ),GZZH ,ZMASS   ,ZWIDTH  ,W(1,         
     &     49  ))                                                          
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,49  ),GZL ,AMP(37  ))            
      CALL FVIXXX(W(1,5   ),W(1,32  ),GAL ,ZERO    ,ZERO    ,W(1,50  ))    
      CALL IOVXXX(W(1,50  ),W(1,6   ),W(1,25  ),GAL ,AMP(38  ))            
      CALL IOVXXX(W(1,50  ),W(1,6   ),W(1,23  ),GZL ,AMP(39  ))            
      CALL FVIXXX(W(1,5   ),W(1,36  ),GZL ,ZERO    ,ZERO    ,W(1,51  ))    
      CALL IOVXXX(W(1,51  ),W(1,6   ),W(1,25  ),GAL ,AMP(40  ))            
      CALL IOVXXX(W(1,51  ),W(1,6   ),W(1,23  ),GZL ,AMP(41  ))            
      CALL IOVXXX(W(1,46  ),W(1,6   ),W(1,32  ),GAL ,AMP(42  ))            
      CALL IOVXXX(W(1,47  ),W(1,6   ),W(1,32  ),GAL ,AMP(43  ))            
      CALL IOVXXX(W(1,46  ),W(1,6   ),W(1,36  ),GZL ,AMP(44  ))            
      CALL IOVXXX(W(1,47  ),W(1,6   ),W(1,36  ),GZL ,AMP(45  ))            
      CALL W3W3XX(W(1,1   ),W(1,25  ),W(1,2   ),W(1,8   ),GWWA ,GWWA ,     
     &     AMP(46  ))                                                      
      CALL W3W3XX(W(1,1   ),W(1,10  ),W(1,2   ),W(1,25  ),GWWZ ,GWWA ,     
     &     AMP(47  ))                                                      
      CALL W3W3XX(W(1,1   ),W(1,23  ),W(1,2   ),W(1,8   ),GWWZ ,GWWA ,     
     &     AMP(48  ))                                                      
      CALL W3W3XX(W(1,1   ),W(1,23  ),W(1,2   ),W(1,10  ),GWWZ ,GWWZ ,     
     &     AMP(49  ))         
                                             
c additional spin-2 graphs
c singlet

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      AMP(50  )=0.0d0
      AMP(51  )=0.0d0
      AMP(52  )=0.0d0
      AMP(53  )=0.0d0

      else

      CALL UWWXXX_SING(W(1,1  ),W(1,2 ) , W(1,52 ))
      CALL ZZTXXX_SING(W(1,23  ),W(1,10 ),W(1,52) , AMP(50  ))
      CALL AATXXX_SING(W(1,25  ),W(1,8  ),W(1,52) , AMP(51  ))

c save time if couplings are equal and therefore T-gamma-Z-vertex is zero
        if ((f1.EQ.f2) .and. (f3.EQ.f4)) then   
         AMP(52   )=0.0d0
         AMP(53   )=0.0d0
        else

        CALL AZTXXX_SING(W(1,25  ),W(1,10 ),W(1,52) , AMP(52  ))
        CALL AZTXXX_SING(W(1,8   ),W(1,23 ),W(1,52) , AMP(53  ))

        endif

      endif

c triplet

      if ((f6.EQ.0.0d0) .and. (f7.EQ.0.0d0)) then

      AMP(54  )=0.0d0
      AMP(55  )=0.0d0
      AMP(56  )=0.0d0
      AMP(57  )=0.0d0
      AMP(58  )=0.0d0
      AMP(59  )=0.0d0
      AMP(60  )=0.0d0
      AMP(61  )=0.0d0
      AMP(62  )=0.0d0
      AMP(63  )=0.0d0
      AMP(64  )=0.0d0
      AMP(65  )=0.0d0

      else

      CALL UWWXXX_TRIPN(W(1,1  ),W(1,2 ) , W(1,53 ))
      CALL ZZTXXX_TRIPN(W(1,23  ),W(1,10 ),W(1,53) , AMP(54  ))
      CALL AATXXX_TRIPN(W(1,25  ),W(1,8  ),W(1,53) , AMP(55  ))
      CALL AZTXXX_TRIPN(W(1,25  ),W(1,10 ),W(1,53) , AMP(56  ))
      CALL AZTXXX_TRIPN(W(1,8   ),W(1,23 ),W(1,53) , AMP(57  ))

      CALL UWAXXX_TRIPPM(W(1,1  ),W(1,8 ) , W(1,54 ))
      CALL WATXXX_TRIPPM(W(1,2  ),W(1,25 ),W(1,54) , AMP(58  ))
      CALL UWZXXX_TRIPPM(W(1,1  ),W(1,10 ) , W(1,55 ))
      CALL WATXXX_TRIPPM(W(1,2  ),W(1,25 ),W(1,55) , AMP(59  ))
      CALL WZTXXX_TRIPPM(W(1,2  ),W(1,23 ),W(1,54) , AMP(60  ))
      CALL WZTXXX_TRIPPM(W(1,2  ),W(1,23 ),W(1,55) , AMP(61  ))
      CALL UWAXXX_TRIPPM(W(1,1  ),W(1,25 ) , W(1,56 ))
      CALL WATXXX_TRIPPM(W(1,2  ),W(1,8 ),W(1,56 ) , AMP(62  ))
      CALL WZTXXX_TRIPPM(W(1,2  ),W(1,10 ),W(1,56) , AMP(63  ))
      CALL UWZXXX_TRIPPM(W(1,1  ),W(1,23 ) , W(1,57 ))
      CALL WATXXX_TRIPPM(W(1,2  ),W(1,8 ),W(1,57 ) , AMP(64  ))
      CALL WZTXXX_TRIPPM(W(1,2  ),W(1,10 ),W(1,57) , AMP(65  ))

      endif

c end of additional spin-2 graphs

c formfactor
      absmomwpsq=abs((dreal(W(5,1)))**2-(dreal(W(6,1)))**2
     &               -(dimag(W(6,1)))**2-(dimag(W(5,1)))**2)

      absmomwmsq=abs((dreal(W(5,2)))**2-(dreal(W(6,2)))**2
     &               -(dimag(W(6,2)))**2-(dimag(W(5,2)))**2)

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      absmomsp2sq=abs((dreal(W(17,53)))**2-(dreal(W(18,53)))**2
     &                -(dimag(W(18,53)))**2-(dimag(W(17,53)))**2)

      else

      absmomsp2sq=abs((dreal(W(17,52)))**2-(dreal(W(18,52)))**2
     &                -(dimag(W(18,52)))**2-(dimag(W(17,52)))**2)

      endif

      formfac=(lambdaff**2/(absmomwpsq+lambdaff**2)*
     &         lambdaff**2/(absmomwmsq+lambdaff**2)*
     &         lambdaff**2/(absmomsp2sq+lambdaff**2))**nff


      WW(MU,NU) = +AMP(   1)+AMP(   2)+AMP(   3)+AMP(   4)+AMP(   5)
     &             +AMP(   6)+AMP(   7)+AMP(   8)+AMP(   9)+AMP(  10)
     &             +AMP(  11)+AMP(  12)+AMP(  13)+AMP(  14)+AMP(  15)
     &             +AMP(  16)+AMP(  17)+AMP(  18)+AMP(  19)+AMP(  20)
     &             +AMP(  21)+AMP(  22)+AMP(  23)+AMP(  24)+AMP(  25)
     &             +AMP(  26)+AMP(  27)+AMP(  28)+AMP(  29)+AMP(  30)
     &             +AMP(  31)+AMP(  32)+AMP(  33)+AMP(  34)+AMP(  35)
     &             +AMP(  36)+AMP(  37)+AMP(  38)+AMP(  39)+AMP(  40)
     &             +AMP(  41)+AMP(  42)+AMP(  43)+AMP(  44)+AMP(  45)
     &             +AMP(  46)+AMP(  47)+AMP(  48)+AMP(  49)
     &            +(AMP(  50)
     &             +AMP(  51)+AMP(  52)+AMP(  53)+AMP(  54)+AMP(  55)
     &             +AMP(  56)+AMP(  57)+AMP(  58)+AMP(  59)+AMP(  60)
     &             +AMP(  61)+AMP(  62)+AMP(  63)+AMP(  64)+AMP(  65))
     &         *formfac
        
   
            ENDDO
      ENDDO

      END
c ------------------------------------------------------------	

      subroutine wwtozzn_spin2(q1,q2,P,h,ww)
	
      IMPLICIT NONE

      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 ww(0:3,0:3)
      integer lsign(3:6,4),ll,h
      

	! possible lepton helicities:
	data (lsign(ll,1),ll=3,6) / -1, -1, -1, -1/  !h=1 -> zero
	data (lsign(ll,2),ll=3,6) / -1, -1,  1,  1/  !h=2
	data (lsign(ll,3),ll=3,6) /  1,  1, -1, -1/  !h=3 -> zero
	data (lsign(ll,4),ll=3,6) /  1,  1,  1,  1/  !h=4
	
	call WWtoZZN1_spin2(q1,q2,P,lsign(3,h),ww)
	
	end
		
c ------------------------------------------------------------	

      subroutine WWtoZZN1_spin2(q1,q2,P,lsign,ww)
C  
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : w+ w- -> e+ e- vm vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  36) 
      INTEGER    NWAVEFUNCS    
      PARAMETER (NWAVEFUNCS=  46) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 ww(0:3,0:3)
      integer lsign(3:6)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,MU, NU
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(18,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
c  lepton spinors and Z polarization vectors
#include "tensorz.inc"
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/spin2coupl.inc"
   
      logical lswitch
      parameter (lswitch=.true.)

c only for spin-2 formfactor
      double precision absmomsp2sq, absmomwpsq, absmomwmsq, formfac                                                    
C  
C ----------
C BEGIN CODE
C ----------
   
      if (lswitch) then
      	do i = 1,4
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,6) = lup(i)
	 w(i,5) = lum(i)
		
         w(i,8)  = -zu(i)
         w(i,20) =  ae(i)
         w(i,22) =  ze(i)
      	enddo
      	do i = 5,6
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,6) = lup(i)
	 w(i,5) = lum(i)
		
         w(i,8)  = zu(i)
         w(i,20) = ae(i)
         w(i,22) = ze(i)
      	enddo
      else 
      	CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3   ),-1,W(1,3   ))	 
      	CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4   ),+1,W(1,4   ))	 
     	CALL OXXXXX(P(0,5   ),ZERO ,+lsign(5   ),+1,W(1,5   ))	 
      	CALL IXXXXX(P(0,6   ),ZERO ,-lsign(6   ),-1,W(1,6   ))	 

	 CALL JIOXXX(W(1,6   ),W(1,5   ),GZN ,ZMASS   ,ZWIDTH  ,W(1,8	))    
	 CALL JIOXXX(W(1,3   ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,20  ))    
	 CALL JIOXXX(W(1,3   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,22  ))    
      endif

      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),WMASS ,wwidth, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),WMASS ,wwidth, NU,-1,W(1,2   )) 
 
      CALL FVOXXX(W(1,4   ),W(1,2   ),GWF ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL JIOXXX(W(1,3   ),W(1,7   ),GWF ,WMASS   ,WWIDTH  ,W(1,9   ))    
      CALL VVVXXX(W(1,1   ),W(1,9   ),W(1,8   ),GWWZ ,AMP(1   ))           
      CALL FVOXXX(W(1,5   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,10  ))    
      CALL JIOXXX(W(1,6   ),W(1,10  ),GWF ,WMASS   ,WWIDTH  ,W(1,11  ))    
      CALL IOVXXX(W(1,3   ),W(1,7   ),W(1,11  ),GWF ,AMP(2   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,12  ))    
      CALL JIOXXX(W(1,12  ),W(1,4   ),GWF ,WMASS   ,WWIDTH  ,W(1,13  ))    
      CALL FVOXXX(W(1,5   ),W(1,13  ),GWF ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL IOVXXX(W(1,6   ),W(1,14  ),W(1,2   ),GWF ,AMP(3   ))            
      CALL JVVXXX(W(1,13  ),W(1,2   ),GWWZ ,ZMASS   ,ZWIDTH  ,W(1,         
     &     15  ))                                                          
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,15  ),GZN ,AMP(4   ))            
      CALL FVOXXX(W(1,7   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,16  ))    
      CALL IOVXXX(W(1,3   ),W(1,16  ),W(1,8   ),GZL ,AMP(5   ))            
      CALL FVIXXX(W(1,12  ),W(1,2   ),GWF ,ZERO    ,ZERO    ,W(1,17  ))    
      CALL JIOXXX(W(1,17  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,18  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,18  ),GZN ,AMP(6   ))            
      CALL JIOXXX(W(1,12  ),W(1,7   ),GZN ,ZMASS   ,ZWIDTH  ,W(1,19  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,19  ),GZN ,AMP(7   ))            
      CALL FVIXXX(W(1,6   ),W(1,2   ),GWF ,ZERO    ,ZERO    ,W(1,21  ))    
      CALL IOVXXX(W(1,21  ),W(1,10  ),W(1,20  ),GAL ,AMP(8   ))            
      CALL IOVXXX(W(1,21  ),W(1,10  ),W(1,22  ),GZL ,AMP(9   ))            
      CALL JVVXXX(W(1,2   ),W(1,20  ),GWWA ,WMASS   ,WWIDTH  ,W(1,         
     &     23  ))                                                          
      CALL VVVXXX(W(1,1   ),W(1,23  ),W(1,8   ),GWWZ ,AMP(10  ))           
      CALL JVVXXX(W(1,2   ),W(1,22  ),GWWZ ,WMASS   ,WWIDTH  ,W(1,         
     &     24  ))                                                          
      CALL VVVXXX(W(1,1   ),W(1,24  ),W(1,8   ),GWWZ ,AMP(11  ))           
      CALL FVIXXX(W(1,6   ),W(1,22  ),GZN ,ZERO    ,ZERO    ,W(1,25  ))    
      CALL IOVXXX(W(1,25  ),W(1,10  ),W(1,2   ),GWF ,AMP(12  ))            
      CALL VVVXXX(W(1,11  ),W(1,2   ),W(1,20  ),GWWA ,AMP(13  ))           
      CALL VVVXXX(W(1,11  ),W(1,2   ),W(1,22  ),GWWZ ,AMP(14  ))           
      CALL JVVXXX(W(1,20  ),W(1,1   ),GWWA ,WMASS   ,WWIDTH  ,W(1,         
     &     26  ))                                                          
      CALL IOVXXX(W(1,21  ),W(1,5   ),W(1,26  ),GWF ,AMP(15  ))            
      CALL JVVXXX(W(1,22  ),W(1,1   ),GWWZ ,WMASS   ,WWIDTH  ,W(1,         
     &     27  ))                                                          
      CALL IOVXXX(W(1,21  ),W(1,5   ),W(1,27  ),GWF ,AMP(16  ))            
      CALL VVVXXX(W(1,26  ),W(1,2   ),W(1,8   ),GWWZ ,AMP(17  ))           
      CALL VVVXXX(W(1,27  ),W(1,2   ),W(1,8   ),GWWZ ,AMP(18  ))           
      CALL JVVXXX(W(1,1   ),W(1,2   ),GWWA ,ZERO    ,ZERO    ,W(1,         
     &     28  ))                                                          
      CALL FVOXXX(W(1,4   ),W(1,28  ),GAL ,ZERO    ,ZERO    ,W(1,29  ))    
      CALL JIOXXX(W(1,3   ),W(1,29  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,30  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,30  ),GZN ,AMP(19  ))            
      CALL JVVXXX(W(1,1   ),W(1,2   ),GWWZ ,ZMASS   ,ZWIDTH  ,W(1,         
     &     31  ))                                                          
      CALL FVOXXX(W(1,4   ),W(1,31  ),GZL ,ZERO    ,ZERO    ,W(1,32  ))    
      CALL JIOXXX(W(1,3   ),W(1,32  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,33  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,33  ),GZN ,AMP(20  ))            
      CALL FVIXXX(W(1,3   ),W(1,28  ),GAL ,ZERO    ,ZERO    ,W(1,34  ))    
      CALL JIOXXX(W(1,34  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,35  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,35  ),GZN ,AMP(21  ))            
      CALL FVIXXX(W(1,3   ),W(1,31  ),GZL ,ZERO    ,ZERO    ,W(1,36  ))    
      CALL JIOXXX(W(1,36  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,37  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,37  ),GZN ,AMP(22  ))            
      CALL FVOXXX(W(1,5   ),W(1,22  ),GZN ,ZERO    ,ZERO    ,W(1,38  ))    
      CALL IOVXXX(W(1,21  ),W(1,38  ),W(1,1   ),GWF ,AMP(23  ))            
      CALL HVVXXX(W(1,1   ),W(1,2   ),GWWH ,HMASS   ,HWIDTH  ,W(1,         
     &     39  ))                                                          
      CALL JVSXXX(W(1,22  ),W(1,39  ),GZZH ,ZMASS   ,ZWIDTH  ,W(1,         
     &     40  ))                                                          
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,40  ),GZN ,AMP(24  ))            
      CALL FVOXXX(W(1,5   ),W(1,31  ),GZN ,ZERO    ,ZERO    ,W(1,41  ))    
      CALL IOVXXX(W(1,6   ),W(1,41  ),W(1,22  ),GZN ,AMP(25  ))            
      CALL IOVXXX(W(1,6   ),W(1,38  ),W(1,31  ),GZN ,AMP(26  ))            
      CALL W3W3XX(W(1,1   ),W(1,8   ),W(1,2   ),W(1,20  ),GWWZ ,GWWA ,     
     &     AMP(27  ))                                                      
      CALL W3W3XX(W(1,1   ),W(1,22  ),W(1,2   ),W(1,8   ),GWWZ ,GWWZ ,     
     &     AMP(28  ))  
 
c additional spin-2 graphs
c singlet

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      AMP(29  )=0.0d0
      AMP(30  )=0.0d0

      else

      CALL UWWXXX_SING(W(1,1  ),W(1,2 ) , W(1,42 ))
      CALL ZZTXXX_SING(W(1,22  ),W(1,8 ),W(1,42) , AMP(29  ))

c save time if couplings are equal and therefore T-gamma-Z-vertex is zero
        if ((f1.EQ.f2) .and. (f3.EQ.f4)) then   
         AMP(30  )=0.0d0
        else

         CALL AZTXXX_SING(W(1,20  ),W(1,8 ),W(1,42) , AMP(30  ))
        endif

      endif

c triplet

      if ((f6.EQ.0.0d0) .and. (f7.EQ.0.0d0)) then

      AMP(31  )=0.0d0
      AMP(32  )=0.0d0
      AMP(33  )=0.0d0
      AMP(34  )=0.0d0
      AMP(35  )=0.0d0
      AMP(36  )=0.0d0

      else

      CALL UWWXXX_TRIPN(W(1,1  ),W(1,2 ) , W(1,43 ))
      CALL ZZTXXX_TRIPN(W(1,22  ),W(1,8 ),W(1,43) , AMP(31  ))
      CALL AZTXXX_TRIPN(W(1,20  ),W(1,8 ),W(1,43) , AMP(32  ))

      CALL UWZXXX_TRIPPM(W(1,1  ),W(1,22 ) , W(1,44 ))
      CALL WZTXXX_TRIPPM(W(1,2  ),W(1,8 ),W(1,44) , AMP(33  ))
      CALL UWZXXX_TRIPPM(W(1,1  ),W(1,8 ) , W(1,45 ))
      CALL WZTXXX_TRIPPM(W(1,2  ),W(1,22 ),W(1,45) , AMP(34  ))
      CALL UWAXXX_TRIPPM(W(1,1  ),W(1,20 ) , W(1,46 ))
      CALL WZTXXX_TRIPPM(W(1,2  ),W(1,8 ),W(1,46) , AMP(35  ))
      CALL WATXXX_TRIPPM(W(1,2  ),W(1,20 ),W(1,45) , AMP(36  ))

      endif

c end of additional spin-2 graphs

c formfactor
      absmomwpsq=abs((dreal(W(5,1)))**2-(dreal(W(6,1)))**2
     &               -(dimag(W(6,1)))**2-(dimag(W(5,1)))**2)

      absmomwmsq=abs((dreal(W(5,2)))**2-(dreal(W(6,2)))**2
     &               -(dimag(W(6,2)))**2-(dimag(W(5,2)))**2)

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      absmomsp2sq=abs((dreal(W(17,43)))**2-(dreal(W(18,43)))**2
     &                -(dimag(W(18,43)))**2-(dimag(W(17,43)))**2)

      else

      absmomsp2sq=abs((dreal(W(17,42)))**2-(dreal(W(18,42)))**2
     &                -(dimag(W(18,42)))**2-(dimag(W(17,42)))**2)

      endif

      formfac=(lambdaff**2/(absmomwpsq+lambdaff**2)*
     &         lambdaff**2/(absmomwmsq+lambdaff**2)*
     &         lambdaff**2/(absmomsp2sq+lambdaff**2))**nff

      
      ww(mu,nu) = -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)-AMP(   5)
     &             -AMP(   6)-AMP(   7)-AMP(   8)-AMP(   9)-AMP(  10)
     &             -AMP(  11)-AMP(  12)-AMP(  13)-AMP(  14)-AMP(  15)
     &             -AMP(  16)-AMP(  17)-AMP(  18)-AMP(  19)-AMP(  20)
     &             -AMP(  21)-AMP(  22)-AMP(  23)-AMP(  24)-AMP(  25)
     &             -AMP(  26)-AMP(  27)-AMP(  28)
     &           +(-AMP(  29)-AMP(  30)-AMP(  31)-AMP(  32)-AMP(  33)
     &             -AMP(  34)-AMP(  35)-AMP(  36))
     &        *formfac
     
            ENDDO
      ENDDO

      END
c ------------------------------------------------------------	
c ------------------------------------------------------------	

      subroutine wwtoll_spin2(idb,idl,h,Q,v,wll)
	
      IMPLICIT NONE

        integer idb,idl,h
        real*8 q(0:3), v(0:3,4)
        complex*16 wll(0:3,0:3)
	integer lsign(2,2),i,ll,mu,nu
      

	data (lsign(ll,1),ll=1,2) / -1, -1/
	data (lsign(ll,2),ll=1,2) / +1, +1/
	
	if (idl.eq.1) then ! e+e-
	   if (h.eq.1.or.h.eq.2)  i = 1
	   if (h.eq.3.or.h.eq.4)  i = 2
	elseif (idl.eq.2) then ! mu+mu-
	   if (h.eq.1.or.h.eq.3)  i = 1
	   if (h.eq.2.or.h.eq.4)  i = 2
	endif   

	
	call WWtoLL1_spin2(idb,idl,Q,v,lsign(1,i),wll(0,0))


	end
		
c ------------------------------------------------------------	
       
      subroutine WWtoLL1_spin2(idb,idl,Q,v,lsign,wll)
C  Input:   Q(*)        one of the two incoming boson momenta 
c           idb = 1      Q = q1 = W+ momentum
c           idb = 2      Q = q2 = W- momentum
c	    idl = 1	 l is e
c	    idl = 2	 l is mu
c  OUPTPUT: wll(mu,nu)  lepton tensor for w w--> l+l-  
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : w+ w- -> l+ l-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   3) 
      INTEGER    NWAVEFUNCS  
      PARAMETER (NWAVEFUNCS=   7) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      integer idb,idl
      real*8 q(0:3), v(0:3,4), p(0:3,3:4)
      complex*16 wll(0:3,0:3)
      integer lsign(3:4)
C  
C LOCAL VARIABLES 
C  
      INTEGER I, MU, NU
      real*8 Q1(0:3), Q2(0:3)
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
c  lepton spinors 
#include "tensorz.inc"
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
   
      logical lswitch
      parameter (lswitch=.true.)
C  
C ----------
C BEGIN CODE
C ----------
      
      if (idb.eq.1) then
         do mu = 0,3
            q1(mu) = q(mu)
	    if (idl.eq.1) then
                q2(mu) = qe(mu)-q(mu)
		p(mu,3) = v(mu,1)
		p(mu,4) = v(mu,2)
	    else
	        q2(mu) = qu(mu)-q(mu)
		p(mu,3) = v(mu,3)
		p(mu,4) = v(mu,4)
	    endif
         enddo
      elseif (idb.eq.2) then
         do mu = 0,3
            q2(mu) = q(mu)
	    if (idl.eq.1) then
            	q1(mu) = qe(mu)-q(mu)
		p(mu,3) = v(mu,1)
		p(mu,4) = v(mu,2)
	    else
            	q1(mu) = qu(mu)-q(mu)
		p(mu,3) = v(mu,3)
		p(mu,4) = v(mu,4)
	    endif
         enddo
      endif

	if (lswitch) then
	  if (idl.eq.1) then
	    do i = 1,6
	    w(i,3) = lep(i)
	    w(i,4) = lem(i)
	    enddo
	  else
	    do i = 1,6
	    w(i,3) = lup(i)
	    w(i,4) = lum(i)
	    enddo
	  endif
	else	 
       	   CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3),-1,W(1,3   ))        
       	   CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4),+1,W(1,4   ))              
        endif    
	     
      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),WMASS ,wwidth, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),WMASS ,wwidth, NU,-1,W(1,2   )) 
 
      CALL FVIXXX(W(1,3   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,5   ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,2   ),GWF ,AMP(1   ))            
      CALL JVVXXX(W(1,1   ),W(1,2   ),GWWA ,ZERO    ,ZERO    ,W(1,         
     &     6   ))                                                          
      CALL IOVXXX(W(1,3   ),W(1,4   ),W(1,6   ),GAL ,AMP(2   ))            
      CALL JVVXXX(W(1,1   ),W(1,2   ),GWWZ ,ZMASS   ,ZWIDTH  ,W(1,         
     &     7   ))                                                          
      CALL IOVXXX(W(1,3   ),W(1,4   ),W(1,7   ),GZL ,AMP(3   ))            
      
      
      wll(mu,nu) = +AMP(   1)+AMP(   2)+AMP(   3)
         
	 enddo !nu
      enddo !mu

      end
      
c ------------------------------------------------------------	
       
       
      subroutine WWtoLLN_spin2(idb,Q,v,wll)
C  Input:   Q(*)        one of the two incoming boson momenta 
c           idb = 1      Q = q1 = W+ momentum
c           idb = 2      Q = q2 = W- momentum
c  OUPTPUT: wll(mu,nu)  lepton tensor for w w--> vm vm~ 
C  
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : w+ w- -> vm vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   2) 
      INTEGER    NWAVEFUNCS  
      PARAMETER (NWAVEFUNCS=   6) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      integer idb
      real*8 q(0:3), v(0:3,2), p(0:3,3:4)
      complex*16 wll(0:3,0:3)
C  
C LOCAL VARIABLES 
C  
      INTEGER I, MU, NU
      real*8 Q1(0:3), Q2(0:3)
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
c  lepton spinors 
#include "tensorz.inc"
C  
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
   
      logical lswitch
      parameter (lswitch=.true.)
C                                                                            
C ----------
C BEGIN CODE
C ----------
      
      if (idb.eq.1) then
         do mu = 0,3
            q1(mu) = q(mu)
	    q2(mu) = qu(mu)-q(mu)
	    p(mu,3) = v(mu,1)
	    p(mu,4) = v(mu,2)
         enddo
      elseif (idb.eq.2) then
         do mu = 0,3
            q2(mu) = q(mu)
            q1(mu) = qu(mu)-q(mu)
	    p(mu,3) = v(mu,1)
	    p(mu,4) = v(mu,2)
         enddo
      endif
	
	if (lswitch) then
	    do i = 1,6
	    w(i,3) = lum(i)
	    w(i,4) = lup(i)
	    enddo
	else
          CALL OXXXXX(P(0,3   ),ZERO ,-1,+1,W(1,3   ))	 
          CALL IXXXXX(P(0,4   ),ZERO ,+1,-1,W(1,4   )) 
        endif  
	     
             
      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),WMASS ,wwidth, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),WMASS ,wwidth, NU,-1,W(1,2   )) 
 
      CALL FVOXXX(W(1,3   ),W(1,1   ),GWF ,ZERO    ,ZERO    ,W(1,5   ))    
      CALL IOVXXX(W(1,4   ),W(1,5   ),W(1,2   ),GWF ,AMP(1   ))            
      CALL JVVXXX(W(1,1   ),W(1,2   ),GWWZ ,ZMASS   ,ZWIDTH  ,W(1,         
     &     6   ))                                                          
      CALL IOVXXX(W(1,4   ),W(1,3   ),W(1,6   ),GZN ,AMP(2   ))            
      
      wll(mu,nu) = -AMP(   1)-AMP(   2)


	 enddo !nu
      enddo !mu

      end

c ------------------------------------------------------------	

c ------------------------------------------------------------	

      subroutine vvtozz_spin2(q1,q2,P,h,aa,az,za,zz)
	
      IMPLICIT NONE

      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 aa(0:3,0:3)
      complex*16 az(0:3,0:3)
      complex*16 za(0:3,0:3)
      complex*16 zz(0:3,0:3)
      integer lsign(3:6,4),h,ll
      

	! possible lepton helicities:
	data (lsign(ll,1),ll=3,6) / -1, -1, -1, -1/
	data (lsign(ll,2),ll=3,6) / -1, -1,  1,  1/
	data (lsign(ll,3),ll=3,6) /  1,  1, -1, -1/
	data (lsign(ll,4),ll=3,6) /  1,  1,  1,  1/
	
	call AAtoZZ1_spin2(q1,q2,P,lsign(3,h),aa(0,0))
	call AZtoZZ1_spin2(q1,q2,P,lsign(3,h),az(0,0))
	call AZtoZZ1_spin2(q2,q1,P,lsign(3,h),za(0,0))
	call ZZtoZZ1_spin2(q1,q2,P,lsign(3,h),zz(0,0))
		
	end
		
c ------------------------------------------------------------	
       
      subroutine AAtoZZ1_spin2(q1,q2,P,lsign,aa)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : a a -> e+ e- mu+ mu-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  64) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=  60) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 aa(0:3,0:3)
      integer lsign(3:6)
C  
C LOCAL VARIABLES 
C  
      INTEGER I, mu,nu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(18,NWAVEFUNCS)
C  
c  lepton spinors and Z polarization vectors
#include "tensorz.inc"
c
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/spin2coupl.inc"
   
      logical lswitch
      parameter (lswitch=.true.)

c only for spin-2 formfactor
      double precision absmomsp2sq, absmoma1sq, absmoma2sq, formfac
C                                                                          
C ----------
C BEGIN CODE
C ----------
     
      if (lswitch) then
      	do i = 1,6
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,5) = lup(i)
	 w(i,6) = lum(i)
	
         w(i,20) = au(i)
         w(i,22) = zu(i)
         w(i,45) = ae(i)
         w(i,46) = ze(i)
      	enddo
      else 
      
      	CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3   ),-1,W(1,3   ))	 
      	CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4   ),+1,W(1,4   ))	 
     	CALL IXXXXX(P(0,5   ),ZERO ,-lsign(5   ),-1,W(1,5   ))	 
      	CALL OXXXXX(P(0,6   ),ZERO ,+lsign(6   ),+1,W(1,6   ))	 

       	CALL JIOXXX(W(1,5   ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,20  ))    
      	CALL JIOXXX(W(1,5   ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,22  ))    
      	CALL JIOXXX(W(1,3   ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,45  ))    
      	CALL JIOXXX(W(1,3   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,46  ))    
      endif

      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),zero ,zero, MU,-1,W(1,1	  ))	    
      CALL VCARTX(Q2(0),zero ,zero, NU,-1,W(1,2	  ))      
      
      CALL FVIXXX(W(1,3   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL JIOXXX(W(1,7   ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,8   ))    
      CALL FVIXXX(W(1,5   ),W(1,8   ),GAL ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,9   ),W(1,6   ),W(1,1   ),GAL ,AMP(1   ))            
      CALL JIOXXX(W(1,7   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,10  ))    
      CALL FVIXXX(W(1,5   ),W(1,10  ),GZL ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL IOVXXX(W(1,11  ),W(1,6   ),W(1,1   ),GAL ,AMP(2   ))            
      CALL FVIXXX(W(1,5   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,12  ))    
      CALL IOVXXX(W(1,12  ),W(1,6   ),W(1,8   ),GAL ,AMP(3   ))            
      CALL IOVXXX(W(1,12  ),W(1,6   ),W(1,10  ),GZL ,AMP(4   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,13  ))    
      CALL FVOXXX(W(1,6   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL JIOXXX(W(1,3   ),W(1,13  ),GAL ,ZERO    ,ZERO    ,W(1,15  ))    
      CALL IOVXXX(W(1,5   ),W(1,14  ),W(1,15  ),GAL ,AMP(5   ))            
      CALL JIOXXX(W(1,3   ),W(1,13  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,16  ))    
      CALL IOVXXX(W(1,5   ),W(1,14  ),W(1,16  ),GZL ,AMP(6   ))            
      CALL FVIXXX(W(1,5   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,17  ))    
      CALL JIOXXX(W(1,17  ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,18  ))    
      CALL IOVXXX(W(1,3   ),W(1,13  ),W(1,18  ),GAL ,AMP(7   ))            
      CALL JIOXXX(W(1,17  ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,19  ))    
      CALL IOVXXX(W(1,3   ),W(1,13  ),W(1,19  ),GZL ,AMP(8   ))            
      CALL FVOXXX(W(1,13  ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,21  ))    
      CALL IOVXXX(W(1,3   ),W(1,21  ),W(1,20  ),GAL ,AMP(9   ))                  
      CALL IOVXXX(W(1,3   ),W(1,21  ),W(1,22  ),GZL ,AMP(10  ))                  
      CALL FVIXXX(W(1,7   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,23  ))    
      CALL JIOXXX(W(1,23  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,24  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,24  ),GAL ,AMP(11  ))            
      CALL JIOXXX(W(1,23  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,25  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,25  ),GZL ,AMP(12  ))            
      CALL JIOXXX(W(1,7   ),W(1,13  ),GAL ,ZERO    ,ZERO    ,W(1,26  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,26  ),GAL ,AMP(13  ))            
      CALL JIOXXX(W(1,7   ),W(1,13  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,27  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,27  ),GZL ,AMP(14  ))            
      CALL FVOXXX(W(1,4   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,28  ))    
      CALL FVOXXX(W(1,6   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,29  ))    
      CALL JIOXXX(W(1,3   ),W(1,28  ),GAL ,ZERO    ,ZERO    ,W(1,30  ))    
      CALL IOVXXX(W(1,5   ),W(1,29  ),W(1,30  ),GAL ,AMP(15  ))            
      CALL JIOXXX(W(1,3   ),W(1,28  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,31  ))    
      CALL IOVXXX(W(1,5   ),W(1,29  ),W(1,31  ),GZL ,AMP(16  ))            
      CALL JIOXXX(W(1,12  ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,32  ))    
      CALL IOVXXX(W(1,3   ),W(1,28  ),W(1,32  ),GAL ,AMP(17  ))            
      CALL JIOXXX(W(1,12  ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,33  ))    
      CALL IOVXXX(W(1,3   ),W(1,28  ),W(1,33  ),GZL ,AMP(18  ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,34  ))    
      CALL JIOXXX(W(1,34  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,35  ))    
      CALL FVIXXX(W(1,5   ),W(1,35  ),GAL ,ZERO    ,ZERO    ,W(1,36  ))    
      CALL IOVXXX(W(1,36  ),W(1,6   ),W(1,2   ),GAL ,AMP(19  ))            
      CALL JIOXXX(W(1,34  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,37  ))    
      CALL FVIXXX(W(1,5   ),W(1,37  ),GZL ,ZERO    ,ZERO    ,W(1,38  ))    
      CALL IOVXXX(W(1,38  ),W(1,6   ),W(1,2   ),GAL ,AMP(20  ))            
      CALL IOVXXX(W(1,17  ),W(1,6   ),W(1,35  ),GAL ,AMP(21  ))            
      CALL IOVXXX(W(1,17  ),W(1,6   ),W(1,37  ),GZL ,AMP(22  ))            
      CALL FVOXXX(W(1,28  ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,39  ))    
      CALL IOVXXX(W(1,3   ),W(1,39  ),W(1,20  ),GAL ,AMP(23  ))            
      CALL IOVXXX(W(1,3   ),W(1,39  ),W(1,22  ),GZL ,AMP(24  ))            
      CALL FVIXXX(W(1,34  ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,40  ))    
      CALL JIOXXX(W(1,40  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,41  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,41  ),GAL ,AMP(25  ))            
      CALL JIOXXX(W(1,40  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,42  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,42  ),GZL ,AMP(26  ))            
      CALL JIOXXX(W(1,34  ),W(1,28  ),GAL ,ZERO    ,ZERO    ,W(1,43  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,43  ),GAL ,AMP(27  ))            
      CALL JIOXXX(W(1,34  ),W(1,28  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,44  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,44  ),GZL ,AMP(28  ))                  
      CALL IOVXXX(W(1,12  ),W(1,14  ),W(1,45  ),GAL ,AMP(29  ))                  
      CALL IOVXXX(W(1,12  ),W(1,14  ),W(1,46  ),GZL ,AMP(30  ))            
      CALL FVOXXX(W(1,6   ),W(1,45  ),GAL ,ZERO    ,ZERO    ,W(1,47  ))    
      CALL IOVXXX(W(1,12  ),W(1,47  ),W(1,2   ),GAL ,AMP(31  ))            
      CALL FVOXXX(W(1,6   ),W(1,46  ),GZL ,ZERO    ,ZERO    ,W(1,48  ))    
      CALL IOVXXX(W(1,12  ),W(1,48  ),W(1,2   ),GAL ,AMP(32  ))            
      CALL IOVXXX(W(1,17  ),W(1,29  ),W(1,45  ),GAL ,AMP(33  ))            
      CALL IOVXXX(W(1,17  ),W(1,29  ),W(1,46  ),GZL ,AMP(34  ))            
      CALL IOVXXX(W(1,17  ),W(1,47  ),W(1,1   ),GAL ,AMP(35  ))            
      CALL IOVXXX(W(1,17  ),W(1,48  ),W(1,1   ),GAL ,AMP(36  ))            
      CALL FVIXXX(W(1,5   ),W(1,45  ),GAL ,ZERO    ,ZERO    ,W(1,49  ))    
      CALL IOVXXX(W(1,49  ),W(1,29  ),W(1,2   ),GAL ,AMP(37  ))            
      CALL FVIXXX(W(1,5   ),W(1,46  ),GZL ,ZERO    ,ZERO    ,W(1,50  ))    
      CALL IOVXXX(W(1,50  ),W(1,29  ),W(1,2   ),GAL ,AMP(38  ))            
      CALL IOVXXX(W(1,49  ),W(1,14  ),W(1,1   ),GAL ,AMP(39  ))            
      CALL IOVXXX(W(1,50  ),W(1,14  ),W(1,1   ),GAL ,AMP(40  )) 

c additional spin-2 graphs
c singlet

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      AMP(41  )=0.0d0
      AMP(42  )=0.0d0
      AMP(43  )=0.0d0
      AMP(44  )=0.0d0
      AMP(45  )=0.0d0
      AMP(46  )=0.0d0
      AMP(47  )=0.0d0
      AMP(48  )=0.0d0
      AMP(49  )=0.0d0
      AMP(50  )=0.0d0
      AMP(51  )=0.0d0
      AMP(52  )=0.0d0

      else

c save time if couplings are equal and therefore T-gamma-Z-vertex is zero
        if ((f1.EQ.f2) .and. (f3.EQ.f4)) then   

         AMP(41   )=0.0d0
         AMP(42   )=0.0d0
         AMP(43   )=0.0d0
         AMP(44   )=0.0d0
         AMP(47   )=0.0d0
         AMP(48   )=0.0d0
         AMP(51   )=0.0d0
         AMP(52   )=0.0d0

      CALL UAAXXX_SING(W(1,45 ),W(1,1  ) , W(1,53 ))
      CALL UAAXXX_SING(W(1,20 ),W(1,1  ) , W(1,54 ))
      CALL UAAXXX_SING(W(1,1  ),W(1,2  ) , W(1,55 ))

      CALL AATXXX_SING(W(1,20 ),W(1,2  ),W(1,53) , AMP(45  ))
      CALL AATXXX_SING(W(1,45 ),W(1,2  ),W(1,54) , AMP(46  ))
      CALL ZZTXXX_SING(W(1,46 ),W(1,22 ),W(1,55) , AMP(49  ))
      CALL AATXXX_SING(W(1,45 ),W(1,20 ),W(1,55) , AMP(50  ))

        else

      CALL UAZXXX_SING(W(1,1  ),W(1,46 ) , W(1,51 ))
      CALL UAZXXX_SING(W(1,1  ),W(1,22 ) , W(1,52 ))
      CALL UAAXXX_SING(W(1,45 ),W(1,1  ) , W(1,53 ))
      CALL UAAXXX_SING(W(1,20 ),W(1,1  ) , W(1,54 ))
      CALL UAAXXX_SING(W(1,1  ),W(1,2  ) , W(1,55 ))

      CALL AZTXXX_SING(W(1,2  ),W(1,22 ),W(1,51) , AMP(41  ))
      CALL AZTXXX_SING(W(1,2  ),W(1,46 ),W(1,52) , AMP(42  ))
      CALL AZTXXX_SING(W(1,2  ),W(1,22 ),W(1,53) , AMP(43  ))
      CALL AZTXXX_SING(W(1,2  ),W(1,46 ),W(1,54) , AMP(44  ))
      CALL AATXXX_SING(W(1,20 ),W(1,2  ),W(1,53) , AMP(45  ))
      CALL AATXXX_SING(W(1,45 ),W(1,2  ),W(1,54) , AMP(46  ))
      CALL AZTXXX_SING(W(1,20 ),W(1,46 ),W(1,55) , AMP(47  ))
      CALL AZTXXX_SING(W(1,45 ),W(1,22 ),W(1,55) , AMP(48  ))
      CALL ZZTXXX_SING(W(1,46 ),W(1,22 ),W(1,55) , AMP(49  ))
      CALL AATXXX_SING(W(1,45 ),W(1,20 ),W(1,55) , AMP(50  ))
      CALL AATXXX_SING(W(1,45 ),W(1,2  ),W(1,52) , AMP(51  ))
      CALL AATXXX_SING(W(1,20 ),W(1,2  ),W(1,51) , AMP(52  ))

       endif

      endif

c triplet

      if ((f6.EQ.0.0d0) .and. (f7.EQ.0.0d0)) then

      AMP(53  )=0.0d0
      AMP(54  )=0.0d0
      AMP(55  )=0.0d0
      AMP(56  )=0.0d0
      AMP(57  )=0.0d0
      AMP(58  )=0.0d0
      AMP(59  )=0.0d0
      AMP(60  )=0.0d0
      AMP(61  )=0.0d0
      AMP(62  )=0.0d0
      AMP(63  )=0.0d0
      AMP(64  )=0.0d0

      else

      CALL UAZXXX_TRIPN(W(1,1  ),W(1,46 ) , W(1,56 ))
      CALL UAZXXX_TRIPN(W(1,1  ),W(1,22 ) , W(1,57 ))
      CALL UAAXXX_TRIPN(W(1,45 ),W(1,1  ) , W(1,58 ))
      CALL UAAXXX_TRIPN(W(1,20 ),W(1,1  ) , W(1,59 ))
      CALL UAAXXX_TRIPN(W(1,1  ),W(1,2  ) , W(1,60 ))

      CALL AZTXXX_TRIPN(W(1,2  ),W(1,22 ),W(1,56) , AMP(53  ))
      CALL AZTXXX_TRIPN(W(1,2  ),W(1,46 ),W(1,57) , AMP(54  ))
      CALL AZTXXX_TRIPN(W(1,2  ),W(1,22 ),W(1,58) , AMP(55  ))
      CALL AZTXXX_TRIPN(W(1,2  ),W(1,46 ),W(1,59) , AMP(56  ))
      CALL AATXXX_TRIPN(W(1,20 ),W(1,2  ),W(1,58) , AMP(57  ))
      CALL AATXXX_TRIPN(W(1,45 ),W(1,2  ),W(1,59) , AMP(58  ))
      CALL AZTXXX_TRIPN(W(1,20 ),W(1,46 ),W(1,60) , AMP(59  ))
      CALL AZTXXX_TRIPN(W(1,45 ),W(1,22 ),W(1,60) , AMP(60  ))
      CALL ZZTXXX_TRIPN(W(1,46 ),W(1,22 ),W(1,60) , AMP(61  ))
      CALL AATXXX_TRIPN(W(1,45 ),W(1,20 ),W(1,60) , AMP(62  ))
      CALL AATXXX_TRIPN(W(1,45 ),W(1,2  ),W(1,57) , AMP(63  ))
      CALL AATXXX_TRIPN(W(1,20 ),W(1,2  ),W(1,56) , AMP(64  ))

      endif
c end of additional spin-2 graphs 

c formfactor
      absmoma1sq=abs((dreal(W(5,1)))**2-(dreal(W(6,1)))**2
     &               -(dimag(W(6,1)))**2-(dimag(W(5,1)))**2)

      absmoma2sq=abs((dreal(W(5,2)))**2-(dreal(W(6,2)))**2
     &               -(dimag(W(6,2)))**2-(dimag(W(5,2)))**2)

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      absmomsp2sq=abs((dreal(W(17,60)))**2-(dreal(W(18,60)))**2
     &                -(dimag(W(18,60)))**2-(dimag(W(17,60)))**2)

      else

      absmomsp2sq=abs((dreal(W(17,55)))**2-(dreal(W(18,55)))**2
     &                -(dimag(W(18,55)))**2-(dimag(W(17,55)))**2)

      endif

      formfac=(lambdaff**2/(absmoma1sq+lambdaff**2)*
     &         lambdaff**2/(absmoma2sq+lambdaff**2)*
     &         lambdaff**2/(absmomsp2sq+lambdaff**2))**nff

      
      aa(mu,nu) = +AMP(   1)+AMP(   2)+AMP(   3)+AMP(   4)+AMP(   5)
     &             +AMP(   6)+AMP(   7)+AMP(   8)+AMP(   9)+AMP(  10)
     &             +AMP(  11)+AMP(  12)+AMP(  13)+AMP(  14)+AMP(  15)
     &             +AMP(  16)+AMP(  17)+AMP(  18)+AMP(  19)+AMP(  20)
     &             +AMP(  21)+AMP(  22)+AMP(  23)+AMP(  24)+AMP(  25)
     &             +AMP(  26)+AMP(  27)+AMP(  28)+AMP(  29)+AMP(  30)
     &             +AMP(  31)+AMP(  32)+AMP(  33)+AMP(  34)+AMP(  35)
     &             +AMP(  36)+AMP(  37)+AMP(  38)+AMP(  39)+AMP(  40)
     &            +(AMP(  41)+AMP(  42)+AMP(  43)+AMP(  44)+AMP(  45)
     &             +AMP(  46)+AMP(  47)+AMP(  48)+AMP(  49)+AMP(  50)
     &             +AMP(  51)+AMP(  52)+AMP(  53)+AMP(  54)+AMP(  55)
     &             +AMP(  56)+AMP(  57)+AMP(  58)+AMP(  59)+AMP(  60)
     &             +AMP(  61)+AMP(  62)+AMP(  63)+AMP(  64))
     &        *formfac


	   enddo
        enddo
	
	end
	
				
c ------------------------------------------------------------
	
       
      subroutine AZtoZZ1_spin2(q1,q2,P,lsign,az)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : a z -> e+ e- mu+ mu-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  64) 
      INTEGER    NWAVEFUNCS
      PARAMETER (NWAVEFUNCS=  60) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 az(0:3,0:3)
      integer lsign(3:6)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu,nu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(18,NWAVEFUNCS)
C  
c  lepton spinors and Z polarization vectors
#include "tensorz.inc"
c
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/spin2coupl.inc"
   
      logical lswitch
      parameter (lswitch=.true.)

c only for spin-2 formfactor
      double precision absmomsp2sq, absmomasq, absmomzsq, formfac
C                                                                          
C ----------
C BEGIN CODE
C ----------

      if (lswitch) then
      	do i = 1,6
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,5) = lup(i)
	 w(i,6) = lum(i)
	
         w(i,20) = au(i)
         w(i,22) = zu(i)
         w(i,45) = ae(i)
         w(i,46) = ze(i)
      	enddo
      else 
      	CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3   ),-1,W(1,3   ))	 
      	CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4   ),+1,W(1,4   ))	 
     	CALL IXXXXX(P(0,5   ),ZERO ,-lsign(5   ),-1,W(1,5   ))	 
      	CALL OXXXXX(P(0,6   ),ZERO ,+lsign(6   ),+1,W(1,6   ))	 
   
      	CALL JIOXXX(W(1,5   ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,20  ))    
      	CALL JIOXXX(W(1,5   ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,22  ))    
      	CALL JIOXXX(W(1,3   ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,45  ))    
      	CALL JIOXXX(W(1,3   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,46  ))    
      endif

      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),zero  ,zero, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),zMASS ,zwidth, NU,-1,W(1,2   )) 
 
      CALL FVIXXX(W(1,3   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL JIOXXX(W(1,7   ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,8   ))    
      CALL FVIXXX(W(1,5   ),W(1,8   ),GAL ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,9   ),W(1,6   ),W(1,1   ),GAL ,AMP(1   ))            
      CALL JIOXXX(W(1,7   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,10  ))    
      CALL FVIXXX(W(1,5   ),W(1,10  ),GZL ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL IOVXXX(W(1,11  ),W(1,6   ),W(1,1   ),GAL ,AMP(2   ))            
      CALL FVIXXX(W(1,5   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,12  ))    
      CALL IOVXXX(W(1,12  ),W(1,6   ),W(1,8   ),GAL ,AMP(3   ))            
      CALL IOVXXX(W(1,12  ),W(1,6   ),W(1,10  ),GZL ,AMP(4   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,13  ))    
      CALL FVOXXX(W(1,6   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL JIOXXX(W(1,3   ),W(1,13  ),GAL ,ZERO    ,ZERO    ,W(1,15  ))    
      CALL IOVXXX(W(1,5   ),W(1,14  ),W(1,15  ),GAL ,AMP(5   ))            
      CALL JIOXXX(W(1,3   ),W(1,13  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,16  ))    
      CALL IOVXXX(W(1,5   ),W(1,14  ),W(1,16  ),GZL ,AMP(6   ))            
      CALL FVIXXX(W(1,5   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,17  ))    
      CALL JIOXXX(W(1,17  ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,18  ))    
      CALL IOVXXX(W(1,3   ),W(1,13  ),W(1,18  ),GAL ,AMP(7   ))            
      CALL JIOXXX(W(1,17  ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,19  ))    
      CALL IOVXXX(W(1,3   ),W(1,13  ),W(1,19  ),GZL ,AMP(8   ))                  
      CALL FVOXXX(W(1,13  ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,21  ))    
      CALL IOVXXX(W(1,3   ),W(1,21  ),W(1,20  ),GAL ,AMP(9   ))                  
      CALL IOVXXX(W(1,3   ),W(1,21  ),W(1,22  ),GZL ,AMP(10  ))            
      CALL FVIXXX(W(1,7   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,23  ))    
      CALL JIOXXX(W(1,23  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,24  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,24  ),GAL ,AMP(11  ))            
      CALL JIOXXX(W(1,23  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,25  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,25  ),GZL ,AMP(12  ))            
      CALL JIOXXX(W(1,7   ),W(1,13  ),GAL ,ZERO    ,ZERO    ,W(1,26  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,26  ),GAL ,AMP(13  ))            
      CALL JIOXXX(W(1,7   ),W(1,13  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,27  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,27  ),GZL ,AMP(14  ))            
      CALL FVOXXX(W(1,4   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,28  ))    
      CALL FVOXXX(W(1,6   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,29  ))    
      CALL JIOXXX(W(1,3   ),W(1,28  ),GAL ,ZERO    ,ZERO    ,W(1,30  ))    
      CALL IOVXXX(W(1,5   ),W(1,29  ),W(1,30  ),GAL ,AMP(15  ))            
      CALL JIOXXX(W(1,3   ),W(1,28  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,31  ))    
      CALL IOVXXX(W(1,5   ),W(1,29  ),W(1,31  ),GZL ,AMP(16  ))            
      CALL JIOXXX(W(1,12  ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,32  ))    
      CALL IOVXXX(W(1,3   ),W(1,28  ),W(1,32  ),GAL ,AMP(17  ))            
      CALL JIOXXX(W(1,12  ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,33  ))    
      CALL IOVXXX(W(1,3   ),W(1,28  ),W(1,33  ),GZL ,AMP(18  ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,34  ))    
      CALL JIOXXX(W(1,34  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,35  ))    
      CALL FVIXXX(W(1,5   ),W(1,35  ),GAL ,ZERO    ,ZERO    ,W(1,36  ))    
      CALL IOVXXX(W(1,36  ),W(1,6   ),W(1,2   ),GZL ,AMP(19  ))            
      CALL JIOXXX(W(1,34  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,37  ))    
      CALL FVIXXX(W(1,5   ),W(1,37  ),GZL ,ZERO    ,ZERO    ,W(1,38  ))    
      CALL IOVXXX(W(1,38  ),W(1,6   ),W(1,2   ),GZL ,AMP(20  ))            
      CALL IOVXXX(W(1,17  ),W(1,6   ),W(1,35  ),GAL ,AMP(21  ))            
      CALL IOVXXX(W(1,17  ),W(1,6   ),W(1,37  ),GZL ,AMP(22  ))            
      CALL FVOXXX(W(1,28  ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,39  ))    
      CALL IOVXXX(W(1,3   ),W(1,39  ),W(1,20  ),GAL ,AMP(23  ))            
      CALL IOVXXX(W(1,3   ),W(1,39  ),W(1,22  ),GZL ,AMP(24  ))            
      CALL FVIXXX(W(1,34  ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,40  ))    
      CALL JIOXXX(W(1,40  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,41  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,41  ),GAL ,AMP(25  ))            
      CALL JIOXXX(W(1,40  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,42  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,42  ),GZL ,AMP(26  ))            
      CALL JIOXXX(W(1,34  ),W(1,28  ),GAL ,ZERO    ,ZERO    ,W(1,43  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,43  ),GAL ,AMP(27  ))            
      CALL JIOXXX(W(1,34  ),W(1,28  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,44  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,44  ),GZL ,AMP(28  ))            
      CALL IOVXXX(W(1,12  ),W(1,14  ),W(1,45  ),GAL ,AMP(29  ))            
      CALL IOVXXX(W(1,12  ),W(1,14  ),W(1,46  ),GZL ,AMP(30  ))            
      CALL FVOXXX(W(1,6   ),W(1,45  ),GAL ,ZERO    ,ZERO    ,W(1,47  ))    
      CALL IOVXXX(W(1,12  ),W(1,47  ),W(1,2   ),GZL ,AMP(31  ))            
      CALL FVOXXX(W(1,6   ),W(1,46  ),GZL ,ZERO    ,ZERO    ,W(1,48  ))    
      CALL IOVXXX(W(1,12  ),W(1,48  ),W(1,2   ),GZL ,AMP(32  ))            
      CALL IOVXXX(W(1,17  ),W(1,29  ),W(1,45  ),GAL ,AMP(33  ))            
      CALL IOVXXX(W(1,17  ),W(1,29  ),W(1,46  ),GZL ,AMP(34  ))            
      CALL IOVXXX(W(1,17  ),W(1,47  ),W(1,1   ),GAL ,AMP(35  ))            
      CALL IOVXXX(W(1,17  ),W(1,48  ),W(1,1   ),GAL ,AMP(36  ))            
      CALL FVIXXX(W(1,5   ),W(1,45  ),GAL ,ZERO    ,ZERO    ,W(1,49  ))    
      CALL IOVXXX(W(1,49  ),W(1,29  ),W(1,2   ),GZL ,AMP(37  ))            
      CALL FVIXXX(W(1,5   ),W(1,46  ),GZL ,ZERO    ,ZERO    ,W(1,50  ))    
      CALL IOVXXX(W(1,50  ),W(1,29  ),W(1,2   ),GZL ,AMP(38  ))            
      CALL IOVXXX(W(1,49  ),W(1,14  ),W(1,1   ),GAL ,AMP(39  ))            
      CALL IOVXXX(W(1,50  ),W(1,14  ),W(1,1   ),GAL ,AMP(40  ))  

c additional spin-2 graphs
c singlet

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      AMP(41  )=0.0d0
      AMP(42  )=0.0d0
      AMP(43  )=0.0d0
      AMP(44  )=0.0d0
      AMP(45  )=0.0d0
      AMP(46  )=0.0d0
      AMP(47  )=0.0d0
      AMP(48  )=0.0d0
      AMP(49  )=0.0d0
      AMP(50  )=0.0d0
      AMP(51  )=0.0d0
      AMP(52  )=0.0d0

      else

c save time if couplings are equal and therefore T-gamma-Z-vertex is zero
        if ((f1.EQ.f2) .and. (f3.EQ.f4)) then   

      AMP(41  )=0.0d0
      AMP(42  )=0.0d0
      AMP(45  )=0.0d0
      AMP(46  )=0.0d0
      AMP(47  )=0.0d0
      AMP(48  )=0.0d0
      AMP(49  )=0.0d0
      AMP(50  )=0.0d0
      AMP(51  )=0.0d0
      AMP(52  )=0.0d0

      CALL UAAXXX_SING(W(1,45 ),W(1,1  ) , W(1,53 ))
      CALL UAAXXX_SING(W(1,20 ),W(1,1  ) , W(1,54 ))

      CALL ZZTXXX_SING(W(1,2  ),W(1,22 ),W(1,53) , AMP(43  ))
      CALL ZZTXXX_SING(W(1,2  ),W(1,46 ),W(1,54) , AMP(44  ))

       W(17,55 )= W(5,1  )+W(5,2  )
       W(18,55 )= W(6,1  )+W(6,2  )

        else

      CALL UAZXXX_SING(W(1,1  ),W(1,46 ) , W(1,51 ))
      CALL UAZXXX_SING(W(1,1  ),W(1,22 ) , W(1,52 ))
      CALL UAAXXX_SING(W(1,45 ),W(1,1  ) , W(1,53 ))
      CALL UAAXXX_SING(W(1,20 ),W(1,1  ) , W(1,54 ))
      CALL UAZXXX_SING(W(1,1  ),W(1,2  ) , W(1,55 ))

      CALL ZZTXXX_SING(W(1,2  ),W(1,22 ),W(1,51) , AMP(41  ))
      CALL ZZTXXX_SING(W(1,2  ),W(1,46 ),W(1,52) , AMP(42  ))
      CALL ZZTXXX_SING(W(1,2  ),W(1,22 ),W(1,53) , AMP(43  ))
      CALL ZZTXXX_SING(W(1,2  ),W(1,46 ),W(1,54) , AMP(44  ))
      CALL AZTXXX_SING(W(1,20 ),W(1,2  ),W(1,53) , AMP(45  ))
      CALL AZTXXX_SING(W(1,45 ),W(1,2  ),W(1,54) , AMP(46  ))
      CALL AZTXXX_SING(W(1,20 ),W(1,46 ),W(1,55) , AMP(47  ))
      CALL AZTXXX_SING(W(1,45 ),W(1,22 ),W(1,55) , AMP(48  ))
      CALL ZZTXXX_SING(W(1,46 ),W(1,22 ),W(1,55) , AMP(49  ))
      CALL AATXXX_SING(W(1,45 ),W(1,20 ),W(1,55) , AMP(50  ))
      CALL AZTXXX_SING(W(1,45 ),W(1,2  ),W(1,52) , AMP(51  ))
      CALL AZTXXX_SING(W(1,20 ),W(1,2  ),W(1,51) , AMP(52  ))

        endif
      endif

c triplet

      if ((f6.EQ.0.0d0) .and. (f7.EQ.0.0d0)) then

      AMP(53  )=0.0d0
      AMP(54  )=0.0d0
      AMP(55  )=0.0d0
      AMP(56  )=0.0d0
      AMP(57  )=0.0d0
      AMP(58  )=0.0d0
      AMP(59  )=0.0d0
      AMP(60  )=0.0d0
      AMP(61  )=0.0d0
      AMP(62  )=0.0d0
      AMP(63  )=0.0d0
      AMP(64  )=0.0d0

      else

      CALL UAZXXX_TRIPN(W(1,1  ),W(1,46 ) , W(1,56 ))
      CALL UAZXXX_TRIPN(W(1,1  ),W(1,22 ) , W(1,57 ))
      CALL UAAXXX_TRIPN(W(1,45 ),W(1,1  ) , W(1,58 ))
      CALL UAAXXX_TRIPN(W(1,20 ),W(1,1  ) , W(1,59 ))
      CALL UAZXXX_TRIPN(W(1,1  ),W(1,2  ) , W(1,60 ))

      CALL ZZTXXX_TRIPN(W(1,2  ),W(1,22 ),W(1,56) , AMP(53  ))
      CALL ZZTXXX_TRIPN(W(1,2  ),W(1,46 ),W(1,57) , AMP(54  ))
      CALL ZZTXXX_TRIPN(W(1,2  ),W(1,22 ),W(1,58) , AMP(55  ))
      CALL ZZTXXX_TRIPN(W(1,2  ),W(1,46 ),W(1,59) , AMP(56  ))
      CALL AZTXXX_TRIPN(W(1,20 ),W(1,2  ),W(1,58) , AMP(57  ))
      CALL AZTXXX_TRIPN(W(1,45 ),W(1,2  ),W(1,59) , AMP(58  ))
      CALL AZTXXX_TRIPN(W(1,20 ),W(1,46 ),W(1,60) , AMP(59  ))
      CALL AZTXXX_TRIPN(W(1,45 ),W(1,22 ),W(1,60) , AMP(60  ))
      CALL ZZTXXX_TRIPN(W(1,46 ),W(1,22 ),W(1,60) , AMP(61  ))
      CALL AATXXX_TRIPN(W(1,45 ),W(1,20 ),W(1,60) , AMP(62  ))
      CALL AZTXXX_TRIPN(W(1,45 ),W(1,2  ),W(1,57) , AMP(63  ))
      CALL AZTXXX_TRIPN(W(1,20 ),W(1,2  ),W(1,56) , AMP(64  ))

      endif
c end of additional spin-2 graphs 

c formfactor
      absmomasq=abs((dreal(W(5,1)))**2-(dreal(W(6,1)))**2
     &               -(dimag(W(6,1)))**2-(dimag(W(5,1)))**2)

      absmomzsq=abs((dreal(W(5,2)))**2-(dreal(W(6,2)))**2
     &               -(dimag(W(6,2)))**2-(dimag(W(5,2)))**2)

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      absmomsp2sq=abs((dreal(W(17,60)))**2-(dreal(W(18,60)))**2
     &                -(dimag(W(18,60)))**2-(dimag(W(17,60)))**2)

      else

      absmomsp2sq=abs((dreal(W(17,55)))**2-(dreal(W(18,55)))**2
     &                -(dimag(W(18,55)))**2-(dimag(W(17,55)))**2)

      endif

      formfac=(lambdaff**2/(absmomasq+lambdaff**2)*
     &         lambdaff**2/(absmomzsq+lambdaff**2)*
     &         lambdaff**2/(absmomsp2sq+lambdaff**2))**nff

      
      az(mu,nu) = +AMP(   1)+AMP(   2)+AMP(   3)+AMP(   4)+AMP(   5)
     &             +AMP(   6)+AMP(   7)+AMP(   8)+AMP(   9)+AMP(  10)
     &             +AMP(  11)+AMP(  12)+AMP(  13)+AMP(  14)+AMP(  15)
     &             +AMP(  16)+AMP(  17)+AMP(  18)+AMP(  19)+AMP(  20)
     &             +AMP(  21)+AMP(  22)+AMP(  23)+AMP(  24)+AMP(  25)
     &             +AMP(  26)+AMP(  27)+AMP(  28)+AMP(  29)+AMP(  30)
     &             +AMP(  31)+AMP(  32)+AMP(  33)+AMP(  34)+AMP(  35)
     &             +AMP(  36)+AMP(  37)+AMP(  38)+AMP(  39)+AMP(  40)
     &            +(AMP(  41)+AMP(  42)+AMP(  43)+AMP(  44)+AMP(  45)
     &             +AMP(  46)+AMP(  47)+AMP(  48)+AMP(  49)+AMP(  50)
     &             +AMP(  51)+AMP(  52)+AMP(  53)+AMP(  54)+AMP(  55)
     &             +AMP(  56)+AMP(  57)+AMP(  58)+AMP(  59)+AMP(  60)
     &             +AMP(  61)+AMP(  62)+AMP(  63)+AMP(  64))
     &         *formfac

	
	  enddo
       enddo	

      END

c ------------------------------------------------------------	
c       
      subroutine ZZtoZZ1_spin2(q1,q2,P,lsign,zz)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : z z -> e+ e- mu+ mu-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS 
      PARAMETER (NGRAPHS=  67) 
      INTEGER    NWAVEFUNCS   
      PARAMETER (NWAVEFUNCS=  64) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 zz(0:3,0:3)
      integer lsign(3:6)
C  
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu,nu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(18,NWAVEFUNCS)
C  
c  lepton spinors and Z polarization vectors
#include "tensorz.inc"
C  
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/spin2coupl.inc"
C   
      logical lswitch
      parameter (lswitch=.true.)

c only for spin-2 formfactor
      double precision absmomsp2sq, absmomz1sq, absmomz2sq, formfac
C                                                                          
C ----------
C BEGIN CODE
C ----------

      if (lswitch) then
      	do i = 1,6
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,5) = lup(i)
	 w(i,6) = lum(i)
	
         w(i,20) = au(i)
         w(i,22) = zu(i)
         w(i,45) = ae(i)
         w(i,46) = ze(i)
      	enddo
      else 
      	CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3   ),-1,W(1,3   ))	 
      	CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4   ),+1,W(1,4   ))	 
     	CALL IXXXXX(P(0,5   ),ZERO ,-lsign(5   ),-1,W(1,5   ))	 
      	CALL OXXXXX(P(0,6   ),ZERO ,+lsign(6   ),+1,W(1,6   ))	 

      	CALL JIOXXX(W(1,5   ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,20  ))    
      	CALL JIOXXX(W(1,5   ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,22  ))    
      	CALL JIOXXX(W(1,3   ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,45  ))    
      	CALL JIOXXX(W(1,3   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,46  ))    
      endif

      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),ZMASS ,zwidth, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),ZMASS ,zwidth, NU,-1,W(1,2   )) 
 
      CALL FVIXXX(W(1,3   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL JIOXXX(W(1,7   ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,8   ))    
      CALL FVIXXX(W(1,5   ),W(1,8   ),GAL ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,9   ),W(1,6   ),W(1,1   ),GZL ,AMP(1   ))            
      CALL JIOXXX(W(1,7   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,10  ))    
      CALL FVIXXX(W(1,5   ),W(1,10  ),GZL ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL IOVXXX(W(1,11  ),W(1,6   ),W(1,1   ),GZL ,AMP(2   ))            
      CALL FVIXXX(W(1,5   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,12  ))    
      CALL IOVXXX(W(1,12  ),W(1,6   ),W(1,8   ),GAL ,AMP(3   ))            
      CALL IOVXXX(W(1,12  ),W(1,6   ),W(1,10  ),GZL ,AMP(4   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,13  ))    
      CALL FVOXXX(W(1,6   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL JIOXXX(W(1,3   ),W(1,13  ),GAL ,ZERO    ,ZERO    ,W(1,15  ))    
      CALL IOVXXX(W(1,5   ),W(1,14  ),W(1,15  ),GAL ,AMP(5   ))            
      CALL JIOXXX(W(1,3   ),W(1,13  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,16  ))    
      CALL IOVXXX(W(1,5   ),W(1,14  ),W(1,16  ),GZL ,AMP(6   ))            
      CALL FVIXXX(W(1,5   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,17  ))    
      CALL JIOXXX(W(1,17  ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,18  ))    
      CALL IOVXXX(W(1,3   ),W(1,13  ),W(1,18  ),GAL ,AMP(7   ))            
      CALL JIOXXX(W(1,17  ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,19  ))    
      CALL IOVXXX(W(1,3   ),W(1,13  ),W(1,19  ),GZL ,AMP(8   ))            
      CALL FVOXXX(W(1,13  ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,21  ))    
      CALL IOVXXX(W(1,3   ),W(1,21  ),W(1,20  ),GAL ,AMP(9   ))            
      CALL IOVXXX(W(1,3   ),W(1,21  ),W(1,22  ),GZL ,AMP(10  ))            
      CALL FVIXXX(W(1,7   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,23  ))    
      CALL JIOXXX(W(1,23  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,24  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,24  ),GAL ,AMP(11  ))            
      CALL JIOXXX(W(1,23  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,25  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,25  ),GZL ,AMP(12  ))            
      CALL JIOXXX(W(1,7   ),W(1,13  ),GAL ,ZERO    ,ZERO    ,W(1,26  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,26  ),GAL ,AMP(13  ))            
      CALL JIOXXX(W(1,7   ),W(1,13  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,27  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,27  ),GZL ,AMP(14  ))            
      CALL FVOXXX(W(1,4   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,28  ))    
      CALL FVOXXX(W(1,6   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,29  ))    
      CALL JIOXXX(W(1,3   ),W(1,28  ),GAL ,ZERO    ,ZERO    ,W(1,30  ))    
      CALL IOVXXX(W(1,5   ),W(1,29  ),W(1,30  ),GAL ,AMP(15  ))            
      CALL JIOXXX(W(1,3   ),W(1,28  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,31  ))    
      CALL IOVXXX(W(1,5   ),W(1,29  ),W(1,31  ),GZL ,AMP(16  ))            
      CALL JIOXXX(W(1,12  ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,32  ))    
      CALL IOVXXX(W(1,3   ),W(1,28  ),W(1,32  ),GAL ,AMP(17  ))            
      CALL JIOXXX(W(1,12  ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,33  ))    
      CALL IOVXXX(W(1,3   ),W(1,28  ),W(1,33  ),GZL ,AMP(18  ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,34  ))    
      CALL JIOXXX(W(1,34  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,35  ))    
      CALL FVIXXX(W(1,5   ),W(1,35  ),GAL ,ZERO    ,ZERO    ,W(1,36  ))    
      CALL IOVXXX(W(1,36  ),W(1,6   ),W(1,2   ),GZL ,AMP(19  ))            
      CALL JIOXXX(W(1,34  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,37  ))    
      CALL FVIXXX(W(1,5   ),W(1,37  ),GZL ,ZERO    ,ZERO    ,W(1,38  ))    
      CALL IOVXXX(W(1,38  ),W(1,6   ),W(1,2   ),GZL ,AMP(20  ))            
      CALL IOVXXX(W(1,17  ),W(1,6   ),W(1,35  ),GAL ,AMP(21  ))            
      CALL IOVXXX(W(1,17  ),W(1,6   ),W(1,37  ),GZL ,AMP(22  ))            
      CALL FVOXXX(W(1,28  ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,39  ))    
      CALL IOVXXX(W(1,3   ),W(1,39  ),W(1,20  ),GAL ,AMP(23  ))            
      CALL IOVXXX(W(1,3   ),W(1,39  ),W(1,22  ),GZL ,AMP(24  ))            
      CALL FVIXXX(W(1,34  ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,40  ))    
      CALL JIOXXX(W(1,40  ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,41  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,41  ),GAL ,AMP(25  ))            
      CALL JIOXXX(W(1,40  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,42  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,42  ),GZL ,AMP(26  ))            
      CALL JIOXXX(W(1,34  ),W(1,28  ),GAL ,ZERO    ,ZERO    ,W(1,43  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,43  ),GAL ,AMP(27  ))            
      CALL JIOXXX(W(1,34  ),W(1,28  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,44  ))    
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,44  ),GZL ,AMP(28  ))            
      CALL IOVXXX(W(1,12  ),W(1,14  ),W(1,45  ),GAL ,AMP(29  ))            
      CALL IOVXXX(W(1,12  ),W(1,14  ),W(1,46  ),GZL ,AMP(30  ))            
      CALL HVVXXX(W(1,46  ),W(1,2   ),GZZH ,HMASS   ,HWIDTH  ,W(1,         
     &     47  ))                                                          
      CALL VVSXXX(W(1,22  ),W(1,1   ),W(1,47  ),GZZH ,AMP(31  ))           
      CALL FVOXXX(W(1,6   ),W(1,45  ),GAL ,ZERO    ,ZERO    ,W(1,48  ))    
      CALL IOVXXX(W(1,12  ),W(1,48  ),W(1,2   ),GZL ,AMP(32  ))            
      CALL FVOXXX(W(1,6   ),W(1,46  ),GZL ,ZERO    ,ZERO    ,W(1,49  ))    
      CALL IOVXXX(W(1,12  ),W(1,49  ),W(1,2   ),GZL ,AMP(33  ))            
      CALL IOVXXX(W(1,17  ),W(1,29  ),W(1,45  ),GAL ,AMP(34  ))            
      CALL IOVXXX(W(1,17  ),W(1,29  ),W(1,46  ),GZL ,AMP(35  ))            
      CALL HVVXXX(W(1,1   ),W(1,46  ),GZZH ,HMASS   ,HWIDTH  ,W(1,         
     &     50  ))                                                          
      CALL VVSXXX(W(1,22  ),W(1,2   ),W(1,50  ),GZZH ,AMP(36  ))           
      CALL IOVXXX(W(1,17  ),W(1,48  ),W(1,1   ),GZL ,AMP(37  ))            
      CALL IOVXXX(W(1,17  ),W(1,49  ),W(1,1   ),GZL ,AMP(38  ))            
      CALL FVIXXX(W(1,5   ),W(1,45  ),GAL ,ZERO    ,ZERO    ,W(1,51  ))    
      CALL IOVXXX(W(1,51  ),W(1,29  ),W(1,2   ),GZL ,AMP(39  ))            
      CALL FVIXXX(W(1,5   ),W(1,46  ),GZL ,ZERO    ,ZERO    ,W(1,52  ))    
      CALL IOVXXX(W(1,52  ),W(1,29  ),W(1,2   ),GZL ,AMP(40  ))            
      CALL IOVXXX(W(1,51  ),W(1,14  ),W(1,1   ),GZL ,AMP(41  ))            
      CALL IOVXXX(W(1,52  ),W(1,14  ),W(1,1   ),GZL ,AMP(42  ))            
      CALL HVVXXX(W(1,1   ),W(1,2   ),GZZH ,HMASS   ,HWIDTH  ,W(1,         
     &     53  ))                                                          
      CALL JVSXXX(W(1,46  ),W(1,53  ),GZZH ,ZMASS   ,ZWIDTH  ,W(1,         
     &     54  ))                                                          
      CALL IOVXXX(W(1,5   ),W(1,6   ),W(1,54  ),GZL ,AMP(43  ))     

c additional spin-2 graphs
c singlet
      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      AMP(44  )=0.0d0
      AMP(45  )=0.0d0
      AMP(46  )=0.0d0
      AMP(47  )=0.0d0
      AMP(48  )=0.0d0
      AMP(49  )=0.0d0
      AMP(50  )=0.0d0
      AMP(51  )=0.0d0
      AMP(52  )=0.0d0
      AMP(53  )=0.0d0
      AMP(54  )=0.0d0
      AMP(55  )=0.0d0

      else

c save time if couplings are equal and therefore T-gamma-Z-vertex is zero
        if ((f1.EQ.f2) .and. (f3.EQ.f4)) then   

      AMP(46  )=0.0d0
      AMP(47  )=0.0d0
      AMP(48  )=0.0d0
      AMP(49  )=0.0d0
      AMP(50  )=0.0d0
      AMP(51  )=0.0d0
      AMP(54  )=0.0d0
      AMP(55  )=0.0d0

      CALL UZZXXX_SING(W(1,1  ),W(1,46 ) , W(1,55 ))
      CALL UZZXXX_SING(W(1,1  ),W(1,22 ) , W(1,56 ))
      CALL UZZXXX_SING(W(1,1  ),W(1,2  ) , W(1,59 ))

      CALL ZZTXXX_SING(W(1,2  ),W(1,22 ),W(1,55) , AMP(44  ))
      CALL ZZTXXX_SING(W(1,2  ),W(1,46 ),W(1,56) , AMP(45  ))
      CALL ZZTXXX_SING(W(1,46 ),W(1,22 ),W(1,59) , AMP(52  ))
      CALL AATXXX_SING(W(1,45 ),W(1,20 ),W(1,59) , AMP(53  ))

        else

      CALL UZZXXX_SING(W(1,1  ),W(1,46 ) , W(1,55 ))
      CALL UZZXXX_SING(W(1,1  ),W(1,22 ) , W(1,56 ))
      CALL UAZXXX_SING(W(1,45 ),W(1,1  ) , W(1,57 ))
      CALL UAZXXX_SING(W(1,20 ),W(1,1  ) , W(1,58 ))
      CALL UZZXXX_SING(W(1,1  ),W(1,2  ) , W(1,59 ))

      CALL ZZTXXX_SING(W(1,2  ),W(1,22 ),W(1,55) , AMP(44  ))
      CALL ZZTXXX_SING(W(1,2  ),W(1,46 ),W(1,56) , AMP(45  ))
      CALL ZZTXXX_SING(W(1,2  ),W(1,22 ),W(1,57) , AMP(46  ))
      CALL ZZTXXX_SING(W(1,2  ),W(1,46 ),W(1,58) , AMP(47  ))
      CALL AZTXXX_SING(W(1,20 ),W(1,2  ),W(1,57) , AMP(48  ))
      CALL AZTXXX_SING(W(1,45 ),W(1,2  ),W(1,58) , AMP(49  ))
      CALL AZTXXX_SING(W(1,20 ),W(1,46 ),W(1,59) , AMP(50  ))
      CALL AZTXXX_SING(W(1,45 ),W(1,22 ),W(1,59) , AMP(51  ))
      CALL ZZTXXX_SING(W(1,46 ),W(1,22 ),W(1,59) , AMP(52  ))
      CALL AATXXX_SING(W(1,45 ),W(1,20 ),W(1,59) , AMP(53  ))
      CALL AZTXXX_SING(W(1,20 ),W(1,2  ),W(1,55) , AMP(54  ))
      CALL AZTXXX_SING(W(1,45 ),W(1,2  ),W(1,56) , AMP(55  ))
   
        endif
      endif

c triplet

      if ((f6.EQ.0.0d0) .and. (f7.EQ.0.0d0)) then

      AMP(56  )=0.0d0
      AMP(57  )=0.0d0
      AMP(58  )=0.0d0
      AMP(59  )=0.0d0
      AMP(60  )=0.0d0
      AMP(61  )=0.0d0
      AMP(62  )=0.0d0
      AMP(63  )=0.0d0
      AMP(64  )=0.0d0
      AMP(65  )=0.0d0
      AMP(66  )=0.0d0
      AMP(67  )=0.0d0

      else

      CALL UZZXXX_TRIPN(W(1,1  ),W(1,46 ) , W(1,60 ))
      CALL UZZXXX_TRIPN(W(1,1  ),W(1,22 ) , W(1,61 ))
      CALL UAZXXX_TRIPN(W(1,45 ),W(1,1  ) , W(1,62 ))
      CALL UAZXXX_TRIPN(W(1,20 ),W(1,1  ) , W(1,63 ))
      CALL UZZXXX_TRIPN(W(1,1  ),W(1,2  ) , W(1,64 ))

      CALL ZZTXXX_TRIPN(W(1,2  ),W(1,22 ),W(1,60) , AMP(56  ))
      CALL ZZTXXX_TRIPN(W(1,2  ),W(1,46 ),W(1,61) , AMP(57  ))
      CALL ZZTXXX_TRIPN(W(1,2  ),W(1,22 ),W(1,62) , AMP(58  ))
      CALL ZZTXXX_TRIPN(W(1,2  ),W(1,46 ),W(1,63) , AMP(59  ))
      CALL AZTXXX_TRIPN(W(1,20 ),W(1,2  ),W(1,62) , AMP(60  ))
      CALL AZTXXX_TRIPN(W(1,45 ),W(1,2  ),W(1,63) , AMP(61  ))
      CALL AZTXXX_TRIPN(W(1,20 ),W(1,46 ),W(1,64) , AMP(62  ))
      CALL AZTXXX_TRIPN(W(1,45 ),W(1,22 ),W(1,64) , AMP(63  ))
      CALL ZZTXXX_TRIPN(W(1,46 ),W(1,22 ),W(1,64) , AMP(64  ))
      CALL AATXXX_TRIPN(W(1,45 ),W(1,20 ),W(1,64) , AMP(65  ))
      CALL AZTXXX_TRIPN(W(1,20 ),W(1,2  ),W(1,60) , AMP(66  ))
      CALL AZTXXX_TRIPN(W(1,45 ),W(1,2  ),W(1,61) , AMP(67  ))

      endif
c end of additional spin-2 graphs  

c formfactor
      absmomz1sq=abs((dreal(W(5,1)))**2-(dreal(W(6,1)))**2
     &               -(dimag(W(6,1)))**2-(dimag(W(5,1)))**2)

      absmomz2sq=abs((dreal(W(5,2)))**2-(dreal(W(6,2)))**2
     &               -(dimag(W(6,2)))**2-(dimag(W(5,2)))**2)

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      absmomsp2sq=abs((dreal(W(17,64)))**2-(dreal(W(18,64)))**2
     &                -(dimag(W(18,64)))**2-(dimag(W(17,64)))**2)

      else

      absmomsp2sq=abs((dreal(W(17,59)))**2-(dreal(W(18,59)))**2
     &                -(dimag(W(18,59)))**2-(dimag(W(17,59)))**2)

      endif

      formfac=(lambdaff**2/(absmomz1sq+lambdaff**2)*
     &         lambdaff**2/(absmomz2sq+lambdaff**2)*
     &         lambdaff**2/(absmomsp2sq+lambdaff**2))**nff


      zz(mu,nu)  = +AMP(   1)+AMP(   2)+AMP(   3)+AMP(   4)+AMP(   5)
     &             +AMP(   6)+AMP(   7)+AMP(   8)+AMP(   9)+AMP(  10)
     &             +AMP(  11)+AMP(  12)+AMP(  13)+AMP(  14)+AMP(  15)
     &             +AMP(  16)+AMP(  17)+AMP(  18)+AMP(  19)+AMP(  20)
     &             +AMP(  21)+AMP(  22)+AMP(  23)+AMP(  24)+AMP(  25)
     &             +AMP(  26)+AMP(  27)+AMP(  28)+AMP(  29)+AMP(  30)
     &             +AMP(  31)+AMP(  32)+AMP(  33)+AMP(  34)+AMP(  35)
     &             +AMP(  36)+AMP(  37)+AMP(  38)+AMP(  39)+AMP(  40)
     &             +AMP(  41)+AMP(  42)+AMP(  43)
     &            +(AMP(  44)+AMP(  45)
     &             +AMP(  46)+AMP(  47)+AMP(  48)+AMP(  49)+AMP(  50)
     &             +AMP(  51)+AMP(  52)+AMP(  53)+AMP(  54)+AMP(  55)
     &             +AMP(  56)+AMP(  57)+AMP(  58)+AMP(  59)+AMP(  60)
     &             +AMP(  61)+AMP(  62)+AMP(  63)+AMP(  64)+AMP(  65)
     &             +AMP(  66)+AMP(  67))
     &          *formfac

 
	  enddo
       enddo

      END
c ------------------------------------------------------------	

      subroutine vvtozzn_spin2(q1,q2,P,h,aa,az,za,zz)
	
      IMPLICIT NONE

      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 aa(0:3,0:3)
      complex*16 az(0:3,0:3)
      complex*16 za(0:3,0:3)
      complex*16 zz(0:3,0:3)
      integer lsign(3:6,4),h,ll
      

	! possible lepton helicities:
	data (lsign(ll,1),ll=3,6) / -1, -1, -1, -1/ ! zero
	data (lsign(ll,2),ll=3,6) / -1, -1,  1,  1/
	data (lsign(ll,3),ll=3,6) /  1,  1, -1, -1/ ! zero
	data (lsign(ll,4),ll=3,6) /  1,  1,  1,  1/
	
	call AAtoZZN1_spin2(q1,q2,P,lsign(3,h),aa(0,0))
	call AZtoZZN1_spin2(q1,q2,P,lsign(3,h),az(0,0))
	call AZtoZZN1_spin2(q2,q1,P,lsign(3,h),za(0,0))
	call ZZtoZZN1_spin2(q1,q2,P,lsign(3,h),zz(0,0))
		
	end
		
      
c ------------------------------------------------------------	
       
      subroutine AAtoZZN1_spin2(q1,q2,P,lsign,aa)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : a a -> e+ e- vm vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   18) 
      INTEGER    NWAVEFUNCS 
      PARAMETER (NWAVEFUNCS=  29) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C    
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 aa(0:3,0:3)
      integer lsign(3:6)
C  
C LOCAL VARIABLES 
C  
      INTEGER I, mu,nu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(18,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
c  lepton spinors and Z polarization vectors
#include "tensorz.inc"
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/spin2coupl.inc"
C   
      logical lswitch
      parameter (lswitch=.true.)

c only for spin-2 formfactor
      double precision absmomsp2sq, absmoma1sq, absmoma2sq, formfac
c                                                                          
C ----------
C BEGIN CODE
C ----------
      
      if (lswitch) then
      	do i = 1,4
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,6) = lup(i)
	 w(i,5) = lum(i)
	 	
         w(i,8) = - zu(i)
         w(i,21) =  ze(i)
         w(i,22) =  ae(i)
       	enddo
      	do i = 5,6
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,6) = lup(i)
	 w(i,5) = lum(i)
	 	
         w(i,8) =  zu(i)
         w(i,21) =  ze(i)
         w(i,22) =  ae(i)
       	enddo
      else 
       CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3   ),-1,W(1,3   ))	
       CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4   ),+1,W(1,4   ))	
       CALL OXXXXX(P(0,5   ),ZERO ,+lsign(5   ),+1,W(1,5   ))	
       CALL IXXXXX(P(0,6   ),ZERO ,-lsign(6   ),-1,W(1,6   ))	
   
       CALL JIOXXX(W(1,6   ),W(1,5   ),GZN ,ZMASS   ,ZWIDTH  ,W(1,8   ))    
       CALL JIOXXX(W(1,3   ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,22  ))
       CALL JIOXXX(W(1,3   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,21  )) 
      endif

   
      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),zero ,zero, MU,-1,W(1,1	  ))	    
      CALL VCARTX(Q2(0),zero ,zero, NU,-1,W(1,2	  ))      
                  
      CALL FVOXXX(W(1,4   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL FVOXXX(W(1,7   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,3   ),W(1,9   ),W(1,8   ),GZL ,AMP(1   ))            
      CALL FVIXXX(W(1,3   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,10  ))    
      CALL FVIXXX(W(1,10  ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL JIOXXX(W(1,11  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,12  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,12  ),GZN ,AMP(2   ))            
      CALL JIOXXX(W(1,10  ),W(1,7   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,13  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,13  ),GZN ,AMP(3   ))            
      CALL FVOXXX(W(1,4   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL FVOXXX(W(1,14  ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,15  ))    
      CALL IOVXXX(W(1,3   ),W(1,15  ),W(1,8   ),GZL ,AMP(4   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,16  ))    
      CALL FVIXXX(W(1,16  ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,17  ))    
      CALL JIOXXX(W(1,17  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,18  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,18  ),GZN ,AMP(5   ))            
      CALL JIOXXX(W(1,16  ),W(1,14  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,19  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,19  ),GZN ,AMP(6   ))    

c additional spin-2 graphs   
c singlet

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      AMP(7  )=0.0d0
      AMP(8  )=0.0d0
      AMP(9  )=0.0d0
      AMP(10  )=0.0d0
      AMP(11  )=0.0d0
      AMP(12  )=0.0d0
   
      else

c save time if couplings are equal and therefore T-gamma-Z-vertex is zero
        if ((f1.EQ.f2) .and. (f3.EQ.f4)) then  

      AMP(7  )=0.0d0
      AMP(9  )=0.0d0
      AMP(10  )=0.0d0
      AMP(11  )=0.0d0
      AMP(12  )=0.0d0

      CALL UAAXXX_SING(W(1,1  ),W(1,2  ) , W(1,20 ))
      CALL ZZTXXX_SING(W(1,21 ),W(1,8  ),W(1,20) , AMP(8  ))

        else

      CALL UAAXXX_SING(W(1,1  ),W(1,2  ) , W(1,20 )) 
      CALL UAAXXX_SING(W(1,1  ),W(1,22 ) , W(1,23 ))
      CALL UAZXXX_SING(W(1,1  ),W(1,21 ) , W(1,24 ))
      CALL UAZXXX_SING(W(1,1  ),W(1,8  ) , W(1,25 ))

      CALL AZTXXX_SING(W(1,22 ),W(1,8  ),W(1,20) , AMP(7  ))
      CALL ZZTXXX_SING(W(1,21 ),W(1,8  ),W(1,20) , AMP(8  ))
      CALL AZTXXX_SING(W(1,2  ),W(1,8  ),W(1,23) , AMP(9  ))
      CALL AZTXXX_SING(W(1,2  ),W(1,8  ),W(1,24) , AMP(10  ))
      CALL AZTXXX_SING(W(1,2  ),W(1,21 ),W(1,25) , AMP(11  ))
      CALL AATXXX_SING(W(1,2  ),W(1,22 ),W(1,25) , AMP(12  ))

        endif
      endif

c triplet

      if ((f6.EQ.0.0d0) .and. (f7.EQ.0.0d0)) then

      AMP(13  )=0.0d0
      AMP(14  )=0.0d0
      AMP(15  )=0.0d0
      AMP(16  )=0.0d0
      AMP(17  )=0.0d0
      AMP(18  )=0.0d0

      else

      CALL UAAXXX_TRIPN(W(1,1  ),W(1,2  ) , W(1,26 )) 
      CALL UAAXXX_TRIPN(W(1,1  ),W(1,22 ) , W(1,27 ))
      CALL UAZXXX_TRIPN(W(1,1  ),W(1,21 ) , W(1,28 ))
      CALL UAZXXX_TRIPN(W(1,1  ),W(1,8  ) , W(1,29 ))

      CALL AZTXXX_TRIPN(W(1,22 ),W(1,8  ),W(1,26) , AMP(13  ))
      CALL ZZTXXX_TRIPN(W(1,21 ),W(1,8  ),W(1,26) , AMP(14  ))
      CALL AZTXXX_TRIPN(W(1,2  ),W(1,8  ),W(1,27) , AMP(15  ))
      CALL AZTXXX_TRIPN(W(1,2  ),W(1,8  ),W(1,28) , AMP(16  ))
      CALL AZTXXX_TRIPN(W(1,2  ),W(1,21 ),W(1,29) , AMP(17  ))
      CALL AATXXX_TRIPN(W(1,2  ),W(1,22 ),W(1,29) , AMP(18  ))

      endif

c end of additional spin-2 graphs

c formfactor
      absmoma1sq=abs((dreal(W(5,1)))**2-(dreal(W(6,1)))**2
     &               -(dimag(W(6,1)))**2-(dimag(W(5,1)))**2)

      absmoma2sq=abs((dreal(W(5,2)))**2-(dreal(W(6,2)))**2
     &               -(dimag(W(6,2)))**2-(dimag(W(5,2)))**2)

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      absmomsp2sq=abs((dreal(W(17,26)))**2-(dreal(W(18,26)))**2
     &                -(dimag(W(18,26)))**2-(dimag(W(17,26)))**2)

      else

      absmomsp2sq=abs((dreal(W(17,20)))**2-(dreal(W(18,20)))**2
     &                -(dimag(W(18,20)))**2-(dimag(W(17,20)))**2)

      endif

      formfac=(lambdaff**2/(absmoma1sq+lambdaff**2)*
     &         lambdaff**2/(absmoma2sq+lambdaff**2)*
     &         lambdaff**2/(absmomsp2sq+lambdaff**2))**nff

      
      aa(mu,nu) = -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)-AMP(   5)
     &            -AMP(   6)
     &            +(-AMP(   7)-AMP(   8)-AMP(   9)-AMP(  10)
     &            -AMP(  11)-AMP(  12)-AMP(  13)-AMP(  14)-AMP(  15)
     &            -AMP(  16)-AMP(  17)-AMP(  18))
     &         *formfac


	enddo
      enddo
      
      end	
      
      			
c ------------------------------------------------------------
	
       
      subroutine AZtoZZN1_spin2(q1,q2,P,lsign,az)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : a z -> e+ e- vm vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  22) 
      INTEGER    NWAVEFUNCS    
      PARAMETER (NWAVEFUNCS=  35) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 az(0:3,0:3)
      integer lsign(3:6)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu,nu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(18,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/spin2coupl.inc"
#include "tensorz.inc"
C   
      logical lswitch
      parameter (lswitch=.true.)

c only for spin-2 formfactor
      double precision absmomsp2sq, absmomasq, absmomzsq, formfac
C  
C                                                                          
C ----------
C BEGIN CODE
C ----------

      if (lswitch) then
      	do i = 1,4
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,6) = lup(i)
	 w(i,5) = lum(i)
	
         w(i,12) = - zu(i)
         w(i,28) = ze(i)
         w(i,27) = ae(i)
       	enddo
      	do i = 5,6
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,6) = lup(i)
	 w(i,5) = lum(i)
	
         w(i,12) = zu(i)
         w(i,28) = ze(i)
         w(i,27) = ae(i)
       	enddo
      else 
      	CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3   ),-1,W(1,3   ))	 
      	CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4   ),+1,W(1,4   ))	 
     	CALL OXXXXX(P(0,5   ),ZERO ,+lsign(5   ),+1,W(1,5   ))	 
      	CALL IXXXXX(P(0,6   ),ZERO ,-lsign(6   ),-1,W(1,6   ))	 
  
      	CALL JIOXXX(W(1,6   ),W(1,5   ),GZN ,ZMASS   ,ZWIDTH  ,W(1,12  ))  
        CALL JIOXXX(W(1,3   ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,27  ))
        CALL JIOXXX(W(1,3   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,28  ))     
      endif


      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),zero  ,zero, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),zMASS ,zwidth, NU,-1,W(1,2   )) 
      
      CALL FVOXXX(W(1,4   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL FVIXXX(W(1,6   ),W(1,2   ),GZN ,ZERO    ,ZERO    ,W(1,8   ))    
      CALL JIOXXX(W(1,3   ),W(1,7   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,9   ))    
      CALL IOVXXX(W(1,8   ),W(1,5   ),W(1,9   ),GZN ,AMP(1   ))            
      CALL FVOXXX(W(1,5   ),W(1,2   ),GZN ,ZERO    ,ZERO    ,W(1,10  ))    
      CALL JIOXXX(W(1,6   ),W(1,10  ),GZN ,ZMASS   ,ZWIDTH  ,W(1,11  ))    
      CALL IOVXXX(W(1,3   ),W(1,7   ),W(1,11  ),GZL ,AMP(2   ))            
      CALL FVOXXX(W(1,7   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,13  ))    
      CALL IOVXXX(W(1,3   ),W(1,13  ),W(1,12  ),GZL ,AMP(3   ))            
      CALL FVIXXX(W(1,3   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL FVIXXX(W(1,14  ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,15  ))    
      CALL JIOXXX(W(1,15  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,16  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,16  ),GZN ,AMP(4   ))            
      CALL JIOXXX(W(1,14  ),W(1,7   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,17  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,17  ),GZN ,AMP(5   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,18  ))    
      CALL JIOXXX(W(1,18  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,19  ))    
      CALL FVOXXX(W(1,5   ),W(1,19  ),GZN ,ZERO    ,ZERO    ,W(1,20  ))    
      CALL IOVXXX(W(1,6   ),W(1,20  ),W(1,2   ),GZN ,AMP(6   ))            
      CALL IOVXXX(W(1,6   ),W(1,10  ),W(1,19  ),GZN ,AMP(7   ))            
      CALL FVOXXX(W(1,4   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,21  ))    
      CALL FVOXXX(W(1,21  ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,22  ))    
      CALL IOVXXX(W(1,3   ),W(1,22  ),W(1,12  ),GZL ,AMP(8   ))            
      CALL FVIXXX(W(1,18  ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,23  ))    
      CALL JIOXXX(W(1,23  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,24  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,24  ),GZN ,AMP(9   ))            
      CALL JIOXXX(W(1,18  ),W(1,21  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,25  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,25  ),GZN ,AMP(10  ))  
   
c additional spin-2 graphs   
c singlet

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      AMP(11  )=0.0d0
      AMP(12  )=0.0d0
      AMP(13  )=0.0d0
      AMP(14  )=0.0d0
      AMP(15  )=0.0d0
      AMP(16  )=0.0d0

      else

c save time if couplings are equal and therefore T-gamma-Z-vertex is zero
        if ((f1.EQ.f2) .and. (f3.EQ.f4)) then  

      AMP(11  )=0.0d0
      AMP(12  )=0.0d0
      AMP(14  )=0.0d0
      AMP(15  )=0.0d0
      AMP(16  )=0.0d0

    
      CALL UAAXXX_SING(W(1,1  ),W(1,27 ) , W(1,29 ))
      CALL ZZTXXX_SING(W(1,2  ),W(1,12 ),W(1,29) , AMP(13  ))

         W(17,26 )= W(5,1  )+W(5,2  )
         W(18,26 )= W(6,1  )+W(6,2  )

        else

      CALL UAZXXX_SING(W(1,1  ),W(1,2  ) , W(1,26 ))  
      CALL UAAXXX_SING(W(1,1  ),W(1,27 ) , W(1,29 ))
      CALL UAZXXX_SING(W(1,1  ),W(1,28 ) , W(1,30 ))
      CALL UAZXXX_SING(W(1,1  ),W(1,12 ) , W(1,31 ))

      CALL AZTXXX_SING(W(1,27 ),W(1,12 ),W(1,26) , AMP(11  ))
      CALL ZZTXXX_SING(W(1,28 ),W(1,12 ),W(1,26) , AMP(12  ))
      CALL ZZTXXX_SING(W(1,2  ),W(1,12 ),W(1,29) , AMP(13  ))
      CALL ZZTXXX_SING(W(1,2  ),W(1,12 ),W(1,30) , AMP(14  ))
      CALL ZZTXXX_SING(W(1,2  ),W(1,28 ),W(1,31) , AMP(15  ))
      CALL AZTXXX_SING(W(1,27 ),W(1,2  ),W(1,31) , AMP(16  ))

        endif
      endif

c triplet

      if ((f6.EQ.0.0d0) .and. (f7.EQ.0.0d0)) then

      AMP(17  )=0.0d0
      AMP(18  )=0.0d0
      AMP(19  )=0.0d0
      AMP(20  )=0.0d0
      AMP(21  )=0.0d0
      AMP(22  )=0.0d0

      else

      CALL UAZXXX_TRIPN(W(1,1  ),W(1,2  ) , W(1,32 ))  
      CALL UAAXXX_TRIPN(W(1,1  ),W(1,27 ) , W(1,33 ))
      CALL UAZXXX_TRIPN(W(1,1  ),W(1,28 ) , W(1,34 ))
      CALL UAZXXX_TRIPN(W(1,1  ),W(1,12 ) , W(1,35 ))

      CALL AZTXXX_TRIPN(W(1,27 ),W(1,12 ),W(1,32) , AMP(17  ))
      CALL ZZTXXX_TRIPN(W(1,28 ),W(1,12 ),W(1,32) , AMP(18  ))
      CALL ZZTXXX_TRIPN(W(1,2  ),W(1,12 ),W(1,33) , AMP(19  ))
      CALL ZZTXXX_TRIPN(W(1,2  ),W(1,12 ),W(1,34) , AMP(20  ))
      CALL ZZTXXX_TRIPN(W(1,2  ),W(1,28 ),W(1,35) , AMP(21  ))
      CALL AZTXXX_TRIPN(W(1,27 ),W(1,2  ),W(1,35) , AMP(22  ))

      endif

c end of additional spin-2 graphs

c formfactor
      absmomasq=abs((dreal(W(5,1)))**2-(dreal(W(6,1)))**2
     &               -(dimag(W(6,1)))**2-(dimag(W(5,1)))**2)

      absmomzsq=abs((dreal(W(5,2)))**2-(dreal(W(6,2)))**2
     &               -(dimag(W(6,2)))**2-(dimag(W(5,2)))**2)

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      absmomsp2sq=abs((dreal(W(17,32)))**2-(dreal(W(18,32)))**2
     &                -(dimag(W(18,32)))**2-(dimag(W(17,32)))**2)

      else

      absmomsp2sq=abs((dreal(W(17,26)))**2-(dreal(W(18,26)))**2
     &                -(dimag(W(18,26)))**2-(dimag(W(17,26)))**2)

      endif

      formfac=(lambdaff**2/(absmomasq+lambdaff**2)*
     &         lambdaff**2/(absmomzsq+lambdaff**2)*
     &         lambdaff**2/(absmomsp2sq+lambdaff**2))**nff

           
      az(mu,nu) =  -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)-AMP(   5)
     &             -AMP(   6)-AMP(   7)-AMP(   8)-AMP(   9)-AMP(  10)
     &           +(-AMP(  11)-AMP(  12)-AMP(  13)-AMP(  14)-AMP(  15)
     &             -AMP(  16)-AMP(  17)-AMP(  18)-AMP(  19)-AMP(  20)
     &             -AMP(  21)-AMP(  22))
     &        *formfac
		
	  enddo
       enddo	

      END

c ------------------------------------------------------------	
c       
      subroutine ZZtoZZN1_spin2(q1,q2,P,lsign,zz)
C  
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : z z -> e+ e- vm vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=  35) 
      INTEGER    NWAVEFUNCS    
      PARAMETER (NWAVEFUNCS=  47) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 Q1(0:3), Q2(0:3), P(0:3,3:6)
      complex*16 zz(0:3,0:3)
      integer lsign(3:6)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu,nu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(18,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
#include "VBFNLO/utilities/coupl.inc"
#include "VBFNLO/utilities/spin2coupl.inc"
#include "tensorz.inc"
C   
      logical lswitch
      parameter (lswitch=.true.)

c only for spin-2 formfactor
      double precision absmomsp2sq, absmomz1sq, absmomz2sq, formfac
C  
C                                                                          
C ----------
C BEGIN CODE
C ----------

      if (lswitch) then
      	do i = 1,4
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,6) = lup(i)
	 w(i,5) = lum(i)
	
         w(i,16) =  - zu(i)
         w(i,32) =   ze(i)
         w(i,40) =   ae(i)
       	enddo
      	do i = 5,6
	 w(i,3) = lep(i)
	 w(i,4) = lem(i)
	 w(i,6) = lup(i)
	 w(i,5) = lum(i)
	
         w(i,16) =   zu(i)
         w(i,32) =   ze(i)
         w(i,40) =   ae(i)
       	enddo
      else 
      	CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3   ),-1,W(1,3   ))	 
      	CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4   ),+1,W(1,4   ))	 
     	CALL OXXXXX(P(0,5   ),ZERO ,+lsign(5   ),+1,W(1,5   ))	 
      	CALL IXXXXX(P(0,6   ),ZERO ,-lsign(6   ),-1,W(1,6   ))	 

      	CALL JIOXXX(W(1,6   ),W(1,5   ),GZN ,ZMASS   ,ZWIDTH  ,W(1,16  ))    
      	CALL JIOXXX(W(1,3   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,32  )) 
        CALL JIOXXX(W(1,3   ),W(1,4   ),GAL ,ZERO    ,ZERO    ,W(1,40  ))      
      endif

      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),ZMASS ,zwidth, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),ZMASS ,zwidth, NU,-1,W(1,2   )) 
 
      CALL FVIXXX(W(1,3   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL JIOXXX(W(1,7   ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,8   ))    
      CALL FVOXXX(W(1,5   ),W(1,8   ),GZN ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,6   ),W(1,9   ),W(1,1   ),GZN ,AMP(1   ))            
      CALL FVOXXX(W(1,5   ),W(1,1   ),GZN ,ZERO    ,ZERO    ,W(1,10  ))    
      CALL IOVXXX(W(1,6   ),W(1,10  ),W(1,8   ),GZN ,AMP(2   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL FVIXXX(W(1,6   ),W(1,2   ),GZN ,ZERO    ,ZERO    ,W(1,12  ))    
      CALL JIOXXX(W(1,3   ),W(1,11  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,13  ))    
      CALL IOVXXX(W(1,12  ),W(1,5   ),W(1,13  ),GZN ,AMP(3   ))            
      CALL FVOXXX(W(1,5   ),W(1,2   ),GZN ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL JIOXXX(W(1,6   ),W(1,14  ),GZN ,ZMASS   ,ZWIDTH  ,W(1,15  ))    
      CALL IOVXXX(W(1,3   ),W(1,11  ),W(1,15  ),GZL ,AMP(4   ))            
      CALL FVOXXX(W(1,11  ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,17  ))    
      CALL IOVXXX(W(1,3   ),W(1,17  ),W(1,16  ),GZL ,AMP(5   ))            
      CALL FVIXXX(W(1,7   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,18  ))    
      CALL JIOXXX(W(1,18  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,19  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,19  ),GZN ,AMP(6   ))            
      CALL JIOXXX(W(1,7   ),W(1,11  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,20  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,20  ),GZN ,AMP(7   ))            
      CALL FVOXXX(W(1,4   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,21  ))    
      CALL FVIXXX(W(1,6   ),W(1,1   ),GZN ,ZERO    ,ZERO    ,W(1,22  ))    
      CALL JIOXXX(W(1,3   ),W(1,21  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,23  ))    
      CALL IOVXXX(W(1,22  ),W(1,5   ),W(1,23  ),GZN ,AMP(8   ))            
      CALL JIOXXX(W(1,6   ),W(1,10  ),GZN ,ZMASS   ,ZWIDTH  ,W(1,24  ))    
      CALL IOVXXX(W(1,3   ),W(1,21  ),W(1,24  ),GZL ,AMP(9   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,25  ))    
      CALL JIOXXX(W(1,25  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,26  ))    
      CALL FVOXXX(W(1,5   ),W(1,26  ),GZN ,ZERO    ,ZERO    ,W(1,27  ))    
      CALL IOVXXX(W(1,6   ),W(1,27  ),W(1,2   ),GZN ,AMP(10  ))            
      CALL IOVXXX(W(1,6   ),W(1,14  ),W(1,26  ),GZN ,AMP(11  ))            
      CALL FVOXXX(W(1,21  ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,28  ))    
      CALL IOVXXX(W(1,3   ),W(1,28  ),W(1,16  ),GZL ,AMP(12  ))            
      CALL FVIXXX(W(1,25  ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,29  ))    
      CALL JIOXXX(W(1,29  ),W(1,4   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,30  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,30  ),GZN ,AMP(13  ))            
      CALL JIOXXX(W(1,25  ),W(1,21  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,31  ))    
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,31  ),GZN ,AMP(14  ))            
      CALL IOVXXX(W(1,12  ),W(1,10  ),W(1,32  ),GZN ,AMP(15  ))            
      CALL HVVXXX(W(1,32  ),W(1,2   ),GZZH ,HMASS   ,HWIDTH  ,W(1,         
     &     33  ))                                                          
      CALL VVSXXX(W(1,16  ),W(1,1   ),W(1,33  ),GZZH ,AMP(16  ))           
      CALL FVIXXX(W(1,6   ),W(1,32  ),GZN ,ZERO    ,ZERO    ,W(1,34  ))    
      CALL IOVXXX(W(1,34  ),W(1,10  ),W(1,2   ),GZN ,AMP(17  ))            
      CALL IOVXXX(W(1,22  ),W(1,14  ),W(1,32  ),GZN ,AMP(18  ))            
      CALL HVVXXX(W(1,1   ),W(1,32  ),GZZH ,HMASS   ,HWIDTH  ,W(1,         
     &     35  ))                                                          
      CALL VVSXXX(W(1,16  ),W(1,2   ),W(1,35  ),GZZH ,AMP(19  ))           
      CALL IOVXXX(W(1,34  ),W(1,14  ),W(1,1   ),GZN ,AMP(20  ))            
      CALL FVOXXX(W(1,5   ),W(1,32  ),GZN ,ZERO    ,ZERO    ,W(1,36  ))    
      CALL IOVXXX(W(1,22  ),W(1,36  ),W(1,2   ),GZN ,AMP(21  ))            
      CALL IOVXXX(W(1,12  ),W(1,36  ),W(1,1   ),GZN ,AMP(22  ))            
      CALL HVVXXX(W(1,1   ),W(1,2   ),GZZH ,HMASS   ,HWIDTH  ,W(1,         
     &     37  ))                                                          
      CALL JVSXXX(W(1,32  ),W(1,37  ),GZZH ,ZMASS   ,ZWIDTH  ,W(1,         
     &     38  ))                                                          
      CALL IOVXXX(W(1,6   ),W(1,5   ),W(1,38  ),GZN ,AMP(23  ))      

c additional spin-2 graphs
c singlet   

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      AMP(24  )=0.0d0
      AMP(25  )=0.0d0
      AMP(26  )=0.0d0
      AMP(27  )=0.0d0
      AMP(28  )=0.0d0
      AMP(29  )=0.0d0

      else

c save time if couplings are equal and therefore T-gamma-Z-vertex is zero
        if ((f1.EQ.f2) .and. (f3.EQ.f4)) then  

      AMP(25  )=0.0d0
      AMP(28  )=0.0d0
      AMP(29  )=0.0d0

      CALL UZZXXX_SING(W(1,1  ),W(1,2  ) , W(1,39 ))
      CALL UZZXXX_SING(W(1,1  ),W(1,32 ) , W(1,41 ))
      CALL UZZXXX_SING(W(1,1  ),W(1,16 ) , W(1,42 ))

      CALL ZZTXXX_SING(W(1,32 ),W(1,16 ),W(1,39) , AMP(24  ))
      CALL ZZTXXX_SING(W(1,2  ),W(1,16 ),W(1,41) , AMP(26  ))
      CALL ZZTXXX_SING(W(1,2  ),W(1,32 ),W(1,42) , AMP(27  ))

        else

      CALL UZZXXX_SING(W(1,1  ),W(1,2  ) , W(1,39 ))
      CALL UZZXXX_SING(W(1,1  ),W(1,32 ) , W(1,41 ))
      CALL UZZXXX_SING(W(1,1  ),W(1,16 ) , W(1,42 ))
      CALL UAZXXX_SING(W(1,40 ),W(1,1  ) , W(1,43 ))

      CALL ZZTXXX_SING(W(1,32 ),W(1,16 ),W(1,39) , AMP(24  ))
      CALL AZTXXX_SING(W(1,40 ),W(1,16 ),W(1,39) , AMP(25  ))
      CALL ZZTXXX_SING(W(1,2  ),W(1,16 ),W(1,41) , AMP(26  ))
      CALL ZZTXXX_SING(W(1,2  ),W(1,32 ),W(1,42) , AMP(27  ))
      CALL ZZTXXX_SING(W(1,2  ),W(1,16 ),W(1,43) , AMP(28  ))
      CALL AZTXXX_SING(W(1,40 ),W(1,2  ),W(1,42) , AMP(29  ))

        endif
      endif

c triplet

      if ((f6.EQ.0.0d0) .and. (f7.EQ.0.0d0)) then

      AMP(30  )=0.0d0
      AMP(31  )=0.0d0
      AMP(32  )=0.0d0
      AMP(33  )=0.0d0
      AMP(34  )=0.0d0
      AMP(35  )=0.0d0

      else

      CALL UZZXXX_TRIPN(W(1,1  ),W(1,2  ) , W(1,44 ))
      CALL UZZXXX_TRIPN(W(1,1  ),W(1,32 ) , W(1,45 ))
      CALL UZZXXX_TRIPN(W(1,1  ),W(1,16 ) , W(1,46 ))
      CALL UAZXXX_TRIPN(W(1,40 ),W(1,1  ) , W(1,47 ))

      CALL ZZTXXX_TRIPN(W(1,32 ),W(1,16 ),W(1,44) , AMP(30  ))
      CALL AZTXXX_TRIPN(W(1,40 ),W(1,16 ),W(1,44) , AMP(31  ))
      CALL ZZTXXX_TRIPN(W(1,2  ),W(1,16 ),W(1,45) , AMP(32  ))
      CALL ZZTXXX_TRIPN(W(1,2  ),W(1,32 ),W(1,46) , AMP(33  ))
      CALL ZZTXXX_TRIPN(W(1,2  ),W(1,16 ),W(1,47) , AMP(34  ))
      CALL AZTXXX_TRIPN(W(1,40 ),W(1,2  ),W(1,46) , AMP(35  ))

      endif

c end of additional spin-2 graphs 

c formfactor
      absmomz1sq=abs((dreal(W(5,1)))**2-(dreal(W(6,1)))**2
     &               -(dimag(W(6,1)))**2-(dimag(W(5,1)))**2)

      absmomz2sq=abs((dreal(W(5,2)))**2-(dreal(W(6,2)))**2
     &               -(dimag(W(6,2)))**2-(dimag(W(5,2)))**2)

      if ((f1.EQ.0.0d0) .and. (f2.EQ.0.0d0) .and. (f3.EQ.0.0d0) .and.
     &    (f4.EQ.0.0d0) .and. (f5.EQ.0.0d0)) then

      absmomsp2sq=abs((dreal(W(17,44)))**2-(dreal(W(18,44)))**2
     &                -(dimag(W(18,44)))**2-(dimag(W(17,44)))**2)

      else

      absmomsp2sq=abs((dreal(W(17,39)))**2-(dreal(W(18,39)))**2
     &                -(dimag(W(18,39)))**2-(dimag(W(17,39)))**2)

      endif

      formfac=(lambdaff**2/(absmomz1sq+lambdaff**2)*
     &         lambdaff**2/(absmomz2sq+lambdaff**2)*
     &         lambdaff**2/(absmomsp2sq+lambdaff**2))**nff

 
      zz(mu,nu)= -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)-AMP(   5)
     &             -AMP(   6)-AMP(   7)-AMP(   8)-AMP(   9)-AMP(  10)
     &             -AMP(  11)-AMP(  12)-AMP(  13)-AMP(  14)-AMP(  15)
     &             -AMP(  16)-AMP(  17)-AMP(  18)-AMP(  19)-AMP(  20)
     &             -AMP(  21)-AMP(  22)-AMP(  23)
     &           +(-AMP(  24)-AMP(  25)
     &             -AMP(  26)-AMP(  27)-AMP(  28)-AMP(  29)-AMP(  30)
     &             -AMP(  31)-AMP(  32)-AMP(  33)-AMP(  34)-AMP(  35))
     &        *formfac
 
	  enddo
       enddo

      END
c ------------------------------------------------------------	
c ------------------------------------------------------------	

      subroutine vvtoll_spin2(idb,idl,h,Q,v,aa,az,za,zz)
	
      IMPLICIT NONE

        integer idb,idbb,idl,h
        real*8 q(0:3), v(0:3,4)
        complex*16 aa(0:3,0:3)
        complex*16 az(0:3,0:3)
        complex*16 za(0:3,0:3)
c        complex*16 zan(0:3,0:3)
        complex*16 zz(0:3,0:3)
	integer lsign(2,2),i,ll,nu
      
c	data (lsign(ll,1),ll=1,2) /  1,  1/
c	data (lsign(ll,2),ll=1,2) / -1, -1/
	
	data (lsign(ll,1),ll=1,2) / -1, -1/
	data (lsign(ll,2),ll=1,2) / +1, +1/
	
	idbb = -idb+3
	
	if (idl.eq.1) then ! e+e-
	   if (h.eq.1.or.h.eq.2)  i = 1
	   if (h.eq.3.or.h.eq.4)  i = 2
	elseif (idl.eq.2) then ! mu+mu-
	   if (h.eq.1.or.h.eq.3)  i = 1
	   if (h.eq.2.or.h.eq.4)  i = 2
	endif   

	        call AAtoLL1_spin2(idb ,idl,Q,v,lsign(1,i),aa(0,0))
	        call AZtoLL1_spin2(idb ,idl,Q,v,lsign(1,i),az(0,0))
	        call ZAtoLL1_spin2(idb,idl,Q,v,lsign(1,i),za(0,0)) 
	        call ZZtoLL1_spin2(idb ,idl,Q,v,lsign(1,i),zz(0,0))
			
	end
		
c ------------------------------------------------------------	
       
      subroutine AAtoLL1_spin2(idb,idl,Q,v,lsign,aa)
C  Input:   Q(*)        one of the two incoming boson momenta 
c           idb = 1      Q = q1 = A(1) momentum
c           idb = 2      Q = q2 = A(2) momentum
c	    idl = 1	 l is e
c	    idl = 2	 l is mu
c  OUPTPUT: aa(mu,nu)  lepton tensor for a a --> l+l-  
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : a a -> e+ e-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS 
      PARAMETER (NGRAPHS=   2) 
      INTEGER    NWAVEFUNCS   
      PARAMETER (NWAVEFUNCS=   6) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      integer idb,idl
      real*8 q(0:3), v(0:3,4), p(0:3,3:4)
      complex*16 aa(0:3,0:3)
      integer lsign(3:4)
C    
C LOCAL VARIABLES 
C  
      INTEGER I,mu,nu
      real*8 Q1(0:3), Q2(0:3)
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
c  lepton spinors 
#include "tensorz.inc"
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
   
      logical lswitch
      parameter (lswitch=.true.)
C                                                                          
C ----------
C BEGIN CODE
C ----------
      
      if (idb.eq.1) then
         do mu = 0,3
            q1(mu) = q(mu)
	    if (idl.eq.1) then
                q2(mu) = qe(mu)-q(mu)
		p(mu,3) = v(mu,1)
		p(mu,4) = v(mu,2)
	    else
	        q2(mu) = qu(mu)-q(mu)
		p(mu,3) = v(mu,3)
		p(mu,4) = v(mu,4)
	    endif
         enddo
      elseif (idb.eq.2) then
         do mu = 0,3
            q2(mu) = q(mu)
	    if (idl.eq.1) then
            	q1(mu) = qe(mu)-q(mu)
		p(mu,3) = v(mu,1)
		p(mu,4) = v(mu,2)
	    else
            	q1(mu) = qu(mu)-q(mu)
		p(mu,3) = v(mu,3)
		p(mu,4) = v(mu,4)
	    endif
         enddo
      endif
	
	if (lswitch) then
	  if (idl.eq.1) then
	    do i = 1,6
	    w(i,3) = lep(i)
	    w(i,4) = lem(i)
	    enddo
	  else
	    do i = 1,6
	    w(i,3) = lup(i)
	    w(i,4) = lum(i)
	    enddo
	  endif
	else	 
       	  CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3),-1,W(1,3   ))	     
       	  CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4),+1,W(1,4   )) 
	endif
             
      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),zero ,zero, MU,-1,W(1,1	  ))	    
      CALL VCARTX(Q2(0),zero ,zero, NU,-1,W(1,2	  )) 
 
 
      CALL FVIXXX(W(1,3   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,5   ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,1   ),GAL ,AMP(1   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL IOVXXX(W(1,6   ),W(1,4   ),W(1,2   ),GAL ,AMP(2   ))            
      
      aa(mu,nu) = +AMP(   1)+AMP(   2)
        
	 enddo !nu
      enddo !mu

      end

c ------------------------------------------------------------	
       
      subroutine AZtoLL1_spin2(idb,idl,Q,v,lsign,az)
C  Input:   Q(*)        one of the two incoming boson momenta 
c           idb = 1      Q = q1 = A(1) momentum
c           idb = 2      Q = q2 = A(2) momentum
c	    idl = 1	 l is e
c	    idl = 2	 l is mu
c  OUPTPUT: aa(mu,nu)  lepton tensor for a z --> l+l-  
C  
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : a z -> e+ e-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS 
      PARAMETER (NGRAPHS=   2) 
      INTEGER    NWAVEFUNCS  
      PARAMETER (NWAVEFUNCS=   6) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      integer idb,idl
      real*8 q(0:3), v(0:3,4), p(0:3,3:4)
      complex*16 az(0:3,0:3)
      integer lsign(3:4)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu,nu
      real*8 Q1(0:3), Q2(0:3)
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
c  lepton spinors 
#include "tensorz.inc"
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
   
      logical lswitch
      parameter (lswitch=.true.)
C  
C ----------
C BEGIN CODE
C ----------
      
      if (idb.eq.1) then
         do mu = 0,3
            q1(mu) = q(mu)
	    if (idl.eq.1) then
                q2(mu) = qe(mu)-q(mu)
		p(mu,3) = v(mu,1)
		p(mu,4) = v(mu,2)
	    else
	        q2(mu) = qu(mu)-q(mu)
		p(mu,3) = v(mu,3)
		p(mu,4) = v(mu,4)
	    endif
         enddo
      elseif (idb.eq.2) then
         do mu = 0,3
            q2(mu) = q(mu)
	    if (idl.eq.1) then
            	q1(mu) = qe(mu)-q(mu)
		p(mu,3) = v(mu,1)
		p(mu,4) = v(mu,2)
	    else
            	q1(mu) = qu(mu)-q(mu)
		p(mu,3) = v(mu,3)
		p(mu,4) = v(mu,4)
	    endif
         enddo
      endif
	 
        if (lswitch) then
	  if (idl.eq.1) then
	    do i = 1,6
	    w(i,3) = lep(i)
	    w(i,4) = lem(i)
	    enddo
	  else
	    do i = 1,6
	    w(i,3) = lup(i)
	    w(i,4) = lum(i)
	    enddo
	  endif
	else	 
       	  CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3),-1,W(1,3   ))        
          CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4),+1,W(1,4   )) 
	endif
             
      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),zero  ,zero, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),zMASS ,zwidth, NU,-1,W(1,2   )) 
 
      CALL FVIXXX(W(1,3   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,5   ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,1   ),GAL ,AMP(1   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL IOVXXX(W(1,6   ),W(1,4   ),W(1,2   ),GZL ,AMP(2   ))            
      
      az(mu,nu) = +AMP(   1)+AMP(   2)
         
	 enddo !nu
      enddo !mu

      end

c ------------------------------------------------------------	
       
      subroutine ZAtoLL1_spin2(idb,idl,Q,v,lsign,za)
C  Input:   Q(*)        one of the two incoming boson momenta 
c           idb = 1      Q = q1 = A(1) momentum
c           idb = 2      Q = q2 = A(2) momentum
c	    idl = 1	 l is e
c	    idl = 2	 l is mu
c  OUPTPUT: aa(mu,nu)  lepton tensor for a z --> l+l-  
C  
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : z a -> e+ e-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   2) 
      INTEGER    NWAVEFUNCS 
      PARAMETER (NWAVEFUNCS=   6) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      integer idb,idl
      real*8 q(0:3), v(0:3,4), p(0:3,3:4)
      complex*16 za(0:3,0:3)
      integer lsign(3:4)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu,nu
      real*8 Q1(0:3), Q2(0:3)
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
c  lepton spinors 
#include "tensorz.inc"
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
   
      logical lswitch
      parameter (lswitch=.true.)
C                                                                          
C ----------
C BEGIN CODE
C ----------
      
      if (idb.eq.1) then
         do mu = 0,3
            q1(mu) = q(mu)
	    if (idl.eq.1) then
                q2(mu) = qe(mu)-q(mu)
		p(mu,3) = v(mu,1)
		p(mu,4) = v(mu,2)
	    else
	        q2(mu) = qu(mu)-q(mu)
		p(mu,3) = v(mu,3)
		p(mu,4) = v(mu,4)
	    endif
         enddo
      elseif (idb.eq.2) then
         do mu = 0,3
            q2(mu) = q(mu)
	    if (idl.eq.1) then
            	q1(mu) = qe(mu)-q(mu)
		p(mu,3) = v(mu,1)
		p(mu,4) = v(mu,2)
	    else
            	q1(mu) = qu(mu)-q(mu)
		p(mu,3) = v(mu,3)
		p(mu,4) = v(mu,4)
	    endif
         enddo
      endif

	if (lswitch) then
	  if (idl.eq.1) then
	    do i = 1,6
	    w(i,3) = lep(i)
	    w(i,4) = lem(i)
	    enddo
	  else
	    do i = 1,6
	    w(i,3) = lup(i)
	    w(i,4) = lum(i)
	    enddo
	  endif
	else	 
          CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3),-1,W(1,3   ))        
          CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4),+1,W(1,4   )) 
        endif  
	     
      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),zmass ,zwidth, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),zero  ,zero , NU,-1,W(1,2   )) 
 
      CALL FVIXXX(W(1,3   ),W(1,2   ),GAL ,ZERO    ,ZERO    ,W(1,5   ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,1   ),GZL ,AMP(1   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL IOVXXX(W(1,6   ),W(1,4   ),W(1,2   ),GAL ,AMP(2   ))            
      
      za(mu,nu) = +AMP(   1)+AMP(   2)
 
 	 enddo !nu
      enddo !mu

      end


c ------------------------------------------------------------	
       
      subroutine ZZtoLL1_spin2(idb,idl,Q,v,lsign,zz)
C  Input:   Q(*)        one of the two incoming boson momenta 
c           idb = 1      Q = q1 = A(1) momentum
c           idb = 2      Q = q2 = A(2) momentum
c	    idl = 1	 l is e
c	    idl = 2	 l is mu
c  OUPTPUT: aa(mu,nu)  lepton tensor for z z --> l+l-  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : z z -> e+ e-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS 
      PARAMETER (NGRAPHS=   2) 
      INTEGER    NWAVEFUNCS   
      PARAMETER (NWAVEFUNCS=   6) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      integer idb,idl
      real*8 q(0:3), v(0:3,4), p(0:3,3:4)
      complex*16 zz(0:3,0:3)
      integer lsign(3:4)
C  
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu,nu
      real*8 Q1(0:3), Q2(0:3)
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
c  lepton spinors 
#include "tensorz.inc"
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
   
      logical lswitch
      parameter (lswitch=.true.)
C  
C ----------
C BEGIN CODE
C ----------
      
      if (idb.eq.1) then
         do mu = 0,3
            q1(mu) = q(mu)
	    if (idl.eq.1) then
                q2(mu) = qe(mu)-q(mu)
		p(mu,3) = v(mu,1)
		p(mu,4) = v(mu,2)
	    else
	        q2(mu) = qu(mu)-q(mu)
		p(mu,3) = v(mu,3)
		p(mu,4) = v(mu,4)
	    endif
         enddo
      elseif (idb.eq.2) then
         do mu = 0,3
            q2(mu) = q(mu)
	    if (idl.eq.1) then
            	q1(mu) = qe(mu)-q(mu)
		p(mu,3) = v(mu,1)
		p(mu,4) = v(mu,2)
	    else
            	q1(mu) = qu(mu)-q(mu)
		p(mu,3) = v(mu,3)
		p(mu,4) = v(mu,4)
	    endif
         enddo
      endif

	if (lswitch) then
	  if (idl.eq.1) then
	    do i = 1,6
	    w(i,3) = lep(i)
	    w(i,4) = lem(i)
	    enddo
	  else
	    do i = 1,6
	    w(i,3) = lup(i)
	    w(i,4) = lum(i)
	    enddo
	  endif
	else	 
          CALL IXXXXX(P(0,3   ),ZERO ,-lsign(3),-1,W(1,3   ))        
          CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4),+1,W(1,4   )) 
        endif
	  
	     
      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),zMASS ,zwidth, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),zMASS ,zwidth, NU,-1,W(1,2   )) 
 
      CALL FVIXXX(W(1,3   ),W(1,2   ),GZL ,ZERO    ,ZERO    ,W(1,5   ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,1   ),GZL ,AMP(1   ))            
      CALL FVIXXX(W(1,3   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL IOVXXX(W(1,6   ),W(1,4   ),W(1,2   ),GZL ,AMP(2   ))            
      
      zz(mu,nu) = +AMP(   1)+AMP(   2)
        
	 enddo !nu
      enddo !mu

      end
c ------------------------------------------------------------	

      subroutine vvtolln_spin2(idb,Q,v,aa,az,za,zz)
	
      IMPLICIT NONE

        integer idb
        real*8 q(0:3), v(0:3,2)
        complex*16 aa(0:3,0:3)
        complex*16 az(0:3,0:3)
        complex*16 za(0:3,0:3)
        complex*16 zz(0:3,0:3)
	integer mu,nu

	call ZZtoLLN1_spin2(idb,Q,v,zz)
		
	do mu = 0,3
	   do nu = 0,3
	      aa(mu,nu) = 0d0
	      az(mu,nu) = 0d0
	      za(mu,nu) = 0d0
	   enddo
	enddo   	
		
	end
		
c ------------------------------------------------------------	
       
      subroutine ZZtoLLN1_spin2(idb,Q,v,zz)
   
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : z z -> vm vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   2) 
      INTEGER    NWAVEFUNCS 
      PARAMETER (NWAVEFUNCS=   6) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      integer idb
      real*8 q(0:3), v(0:3,2), p(0:3,3:4)
      complex*16 zz(0:3,0:3)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu,nu
      real*8 Q1(0:3), Q2(0:3)
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
c  lepton spinors 
#include "tensorz.inc"
c
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
   
      logical lswitch
      parameter (lswitch=.true.)
C  
C                                                                          
C ----------
C BEGIN CODE
C ----------
      
      if (idb.eq.1) then
         do mu = 0,3
            q1(mu) = q(mu)
	    q2(mu) = qu(mu)-q(mu)
	    p(mu,3) = v(mu,1)
	    p(mu,4) = v(mu,2)
         enddo
      elseif (idb.eq.2) then
         do mu = 0,3
            q2(mu) = q(mu)
            q1(mu) = qu(mu)-q(mu)
	    p(mu,3) = v(mu,1)
	    p(mu,4) = v(mu,2)
         enddo
      endif
 
 	if (lswitch) then
	    do i = 1,6
	    w(i,3) = lum(i)
	    w(i,4) = lup(i)
	    enddo
	else
       	  CALL OXXXXX(P(0,3   ),ZERO ,-1,+1,W(1,3   ))        
       	  CALL IXXXXX(P(0,4   ),ZERO ,+1,-1,W(1,4   )) 
        endif    
	     
      DO MU = 0,3
         DO NU = 0,3
      
      CALL VCARTX(Q1(0),zMASS ,zwidth, MU,-1,W(1,1   ))        
      CALL VCARTX(Q2(0),zMASS ,zwidth, NU,-1,W(1,2   )) 

      CALL FVOXXX(W(1,3   ),W(1,2   ),GZN ,ZERO    ,ZERO    ,W(1,5   ))    
      CALL IOVXXX(W(1,4   ),W(1,5   ),W(1,1   ),GZN ,AMP(1   ))            
      CALL FVOXXX(W(1,3   ),W(1,1   ),GZN ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL IOVXXX(W(1,4   ),W(1,6   ),W(1,2   ),GZN ,AMP(2   ))            
      
      zz(mu,nu)  = -AMP(   1)-AMP(   2)
	
	 enddo !nu
      enddo !mu

      end

c ------------------------------------------------------------	

c ------------------------------------------------------------	

      subroutine vto4l_spin2(p,h,a4l,z4l)
	
      IMPLICIT NONE

      REAL*8 P(0:3,2:5)
      complex*16 a4l(0:5),z4l(0:5)
      integer lsign(2:5,4),h,ll   

	! possible lepton helicities:
	data (lsign(ll,1),ll=2,5) / -1, -1, -1, -1/  !h=1
	data (lsign(ll,2),ll=2,5) / -1, -1,  1,  1/  !h=2
	data (lsign(ll,3),ll=2,5) /  1,  1, -1, -1/  !h=3
	data (lsign(ll,4),ll=2,5) /  1,  1,  1,  1/  !h=4

	call Zto4l_spin2(P,lsign(2,h),z4l)
	call Ato4l_spin2(P,lsign(2,h),a4l)
		
			
	end
		
c ------------------------------------------------------------	
c ------------------------------------------------------------	
   
      subroutine Zto4L_spin2(P,lsign,z)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : z -> e+ e- mu+ mu-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   8) 
      INTEGER    NWAVEFUNCS 
      PARAMETER (NWAVEFUNCS=  16) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,2:5),q(0:3)
      INTEGER lsign(2:5)
      complex*16 z(0:5)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
c  lepton spinors and Z polarization vectors
#include "tensorz.inc"

C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
   
      logical lswitch
      parameter (lswitch=.true.)
C  
C ----------
C BEGIN CODE
C ----------

      if (lswitch) then
      	do i = 1,6
	 w(i,2) = lep(i)
	 w(i,3) = lem(i)
	 w(i,4) = lup(i)
	 w(i,5) = lum(i)
      	enddo
      else 
        CALL IXXXXX(P(0,2   ),ZERO ,-lsign(2),-1,W(1,2   ))       
        CALL OXXXXX(P(0,3   ),ZERO ,+lsign(3),+1,W(1,3   ))       
        CALL IXXXXX(P(0,4   ),ZERO ,-lsign(4),-1,W(1,4   ))       
        CALL OXXXXX(P(0,5   ),ZERO ,+lsign(5),+1,W(1,5   )) 
      endif
             
      do mu = 0,3
         q(mu) = p(mu,2)+p(mu,3)+p(mu,4)+p(mu,5)
      enddo
c
      do mu = 0,3
      CALL VCARTX(Q(0),zmass ,zwidth, MU,-1,W(1,1   ))
      CALL JIOXXX(W(1,2   ),W(1,3   ),GAL ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL FVIXXX(W(1,4   ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL IOVXXX(W(1,7   ),W(1,5   ),W(1,1   ),GZL ,AMP(1   ))            
      CALL JIOXXX(W(1,2   ),W(1,3   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,8   ))    
      CALL FVIXXX(W(1,4   ),W(1,8   ),GZL ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,9   ),W(1,5   ),W(1,1   ),GZL ,AMP(2   ))            
      CALL FVIXXX(W(1,4   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,10  ))    
      CALL IOVXXX(W(1,10  ),W(1,5   ),W(1,6   ),GAL ,AMP(3   ))            
      CALL IOVXXX(W(1,10  ),W(1,5   ),W(1,8   ),GZL ,AMP(4   ))            
      CALL FVOXXX(W(1,3   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL JIOXXX(W(1,2   ),W(1,11  ),GAL ,ZERO    ,ZERO    ,W(1,12  ))    
      CALL IOVXXX(W(1,4   ),W(1,5   ),W(1,12  ),GAL ,AMP(5   ))            
      CALL JIOXXX(W(1,2   ),W(1,11  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,13  ))    
      CALL IOVXXX(W(1,4   ),W(1,5   ),W(1,13  ),GZL ,AMP(6   ))            
      CALL FVIXXX(W(1,2   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL JIOXXX(W(1,14  ),W(1,3   ),GAL ,ZERO    ,ZERO    ,W(1,15  ))    
      CALL IOVXXX(W(1,4   ),W(1,5   ),W(1,15  ),GAL ,AMP(7   ))            
      CALL JIOXXX(W(1,14  ),W(1,3   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,16  ))    
      CALL IOVXXX(W(1,4   ),W(1,5   ),W(1,16  ),GZL ,AMP(8   ))            
      z(mu) = +AMP(   1)+AMP(   2)+AMP(   3)+AMP(   4)+AMP(   5)
     &             +AMP(   6)+AMP(   7)+AMP(   8)
      enddo
             
      z(4) = dcmplx(q(0),q(3))
      z(5) = dcmplx(q(1),q(2))

      return
      END
      
c------------------------------------------------------------------------      
          
      subroutine Ato4L_spin2(P,lsign,a)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : a -> e+ e- mu+ mu-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   8) 
      INTEGER    NWAVEFUNCS    
      PARAMETER (NWAVEFUNCS=  16) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,2:5),q(0:3)
      INTEGER lsign(2:5)
      complex*16 a(0:5)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"
C  
c  lepton spinors and Z polarization vectors
#include "tensorz.inc"
   
      logical lswitch
      parameter (lswitch=.true.)
C                                                                          
C ----------
C BEGIN CODE
C ----------

      if (lswitch) then
      	do i = 1,6
	 w(i,2) = lep(i)
	 w(i,3) = lem(i)
	 w(i,4) = lup(i)
	 w(i,5) = lum(i)
	 
	 w(i,6) = ae(i)
	 w(i,8) = ze(i)
      	enddo
      else   
        CALL IXXXXX(P(0,2   ),ZERO ,-lsign(2   ),-1,W(1,2   ))	   
        CALL OXXXXX(P(0,3   ),ZERO ,+lsign(3   ),+1,W(1,3   ))	   
        CALL IXXXXX(P(0,4   ),ZERO ,-lsign(4   ),-1,W(1,4   ))	   
        CALL OXXXXX(P(0,5   ),ZERO ,+lsign(5   ),+1,W(1,5   ))	   
        
	CALL JIOXXX(W(1,2   ),W(1,3   ),GAL ,ZERO    ,ZERO    ,W(1,6   ))    
        CALL JIOXXX(W(1,2   ),W(1,3   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,8   ))    
      endif

      do mu = 0,3
         q(mu) = p(mu,2)+p(mu,3)+p(mu,4)+p(mu,5)
      enddo

c
      do mu = 0,3
      CALL VCARTX(Q(0),zero ,zero, MU,-1,W(1,1   ))
      CALL FVIXXX(W(1,4   ),W(1,6   ),GAL ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL IOVXXX(W(1,7   ),W(1,5   ),W(1,1   ),GAL ,AMP(1   ))            
      CALL FVIXXX(W(1,4   ),W(1,8   ),GZL ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL IOVXXX(W(1,9   ),W(1,5   ),W(1,1   ),GAL ,AMP(2   ))            
      CALL FVIXXX(W(1,4   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,10  ))    
      CALL IOVXXX(W(1,10  ),W(1,5   ),W(1,6   ),GAL ,AMP(3   ))            
      CALL IOVXXX(W(1,10  ),W(1,5   ),W(1,8   ),GZL ,AMP(4   ))            
      CALL FVOXXX(W(1,3   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL JIOXXX(W(1,2   ),W(1,11  ),GAL ,ZERO    ,ZERO    ,W(1,12  ))    
      CALL IOVXXX(W(1,4   ),W(1,5   ),W(1,12  ),GAL ,AMP(5   ))            
      CALL JIOXXX(W(1,2   ),W(1,11  ),GZL ,ZMASS   ,ZWIDTH  ,W(1,13  ))    
      CALL IOVXXX(W(1,4   ),W(1,5   ),W(1,13  ),GZL ,AMP(6   ))            
      CALL FVIXXX(W(1,2   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,14  ))    
      CALL JIOXXX(W(1,14  ),W(1,3   ),GAL ,ZERO    ,ZERO    ,W(1,15  ))    
      CALL IOVXXX(W(1,4   ),W(1,5   ),W(1,15  ),GAL ,AMP(7   ))            
      CALL JIOXXX(W(1,14  ),W(1,3   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,16  ))    
      CALL IOVXXX(W(1,4   ),W(1,5   ),W(1,16  ),GZL ,AMP(8   ))            
      a(mu) = +AMP(   1)+AMP(   2)+AMP(   3)+AMP(   4)+AMP(   5)
     &             +AMP(   6)+AMP(   7)+AMP(   8)
     
      enddo   
     
      a(4) = dcmplx(q(0),q(3))
      a(5) = dcmplx(q(1),q(2))

      return
      END
      

c ------------------------------------------------------------	

      subroutine vto4ln_spin2(p,h,a4l,z4l)
	
      IMPLICIT NONE

      REAL*8 P(0:3,2:5)
      complex*16 a4l(0:5),z4l(0:5)
      integer lsign(2:5,4),h,ll   

	! possible lepton helicities:
	data (lsign(ll,1),ll=2,5) / -1, -1, -1, -1/  !h=1 
	data (lsign(ll,2),ll=2,5) / -1, -1,  1,  1/  !h=2 -> zero
	data (lsign(ll,3),ll=2,5) /  1,  1, -1, -1/  !h=3 
	data (lsign(ll,4),ll=2,5) /  1,  1,  1,  1/  !h=4 -> zero

	call Zto4ln_spin2(P,lsign(2,h),z4l)
	call Ato4ln_spin2(P,lsign(2,h),a4l)
	
			
	end
		
c ------------------------------------------------------------	
c ------------------------------------------------------------	
   
      subroutine Zto4LN_spin2(P,lsign,z)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : z -> e+ e- vm vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   4) 
      INTEGER    NWAVEFUNCS   
      PARAMETER (NWAVEFUNCS=  12) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,2:5),q(0:3)
      INTEGER lsign(2:5)
      complex*16 z(0:5)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"

c  lepton spinors and Z polarization vectors
#include "tensorz.inc"
  
      logical lswitch
      parameter (lswitch=.true.)
C                                                                          
C ----------
C BEGIN CODE
C ----------

      if (lswitch) then
      	do i = 1,6
	 w(i,2) = lep(i)
	 w(i,3) = lem(i)
	 w(i,4) = lum(i)
	 w(i,5) = lup(i)
	 
	 w(i,6) = ze(i)
      	enddo
      else
        CALL IXXXXX(P(0,2   ),ZERO ,-lsign(2),-1,W(1,2   ))       
        CALL OXXXXX(P(0,3   ),ZERO ,+lsign(3),+1,W(1,3   ))       
        CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4),+1,W(1,4   ))       
        CALL IXXXXX(P(0,5   ),ZERO ,-lsign(5),-1,W(1,5   )) 

        CALL JIOXXX(W(1,2   ),W(1,3   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,6   ))    
      endif
                         
      do mu = 0,3
         q(mu) = p(mu,2)+p(mu,3)+p(mu,4)+p(mu,5)
      enddo


      do mu = 0,3
      CALL VCARTX(Q(0),zmass ,zwidth, MU,-1,W(1,1   ))
      CALL FVOXXX(W(1,4   ),W(1,6   ),GZN ,ZERO    ,ZERO    ,W(1,7   ))    
      CALL IOVXXX(W(1,5   ),W(1,7   ),W(1,1   ),GZN ,AMP(1   ))            
      CALL FVOXXX(W(1,4   ),W(1,1   ),GZN ,ZERO    ,ZERO    ,W(1,8   ))    
      CALL IOVXXX(W(1,5   ),W(1,8   ),W(1,6   ),GZN ,AMP(2   ))            
      CALL FVOXXX(W(1,3   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,9   ))    
      CALL JIOXXX(W(1,2   ),W(1,9   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,10  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,10  ),GZN ,AMP(3   ))            
      CALL FVIXXX(W(1,2   ),W(1,1   ),GZL ,ZERO    ,ZERO    ,W(1,11  ))    
      CALL JIOXXX(W(1,11  ),W(1,3   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,12  ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,12  ),GZN ,AMP(4   ))            
      z(  mu) = -AMP(   1)-AMP(   2)-AMP(   3)-AMP(   4)
      enddo
             
      z(4) = dcmplx(q(0),q(3))
      z(5) = dcmplx(q(1),q(2))

      return
      END

c------------------------------------------------------------------------      
          
      subroutine Ato4LN_spin2(P,lsign,a)
C  
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : a -> e+ e- vm vm~  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=   2) 
      INTEGER    NWAVEFUNCS   
      PARAMETER (NWAVEFUNCS=   9) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,2:5),q(0:3)
      INTEGER lsign(2:5)
      complex*16 a(0:5)
C  
C  
C LOCAL VARIABLES 
C  
      INTEGER I,mu
      COMPLEX*16 AMP(NGRAPHS)
      COMPLEX*16 W(6,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
#include "VBFNLO/utilities/coupl.inc"

c  lepton spinors and Z polarization vectors
#include "tensorz.inc"
   
      logical lswitch
      parameter (lswitch=.true.)
C  
C                                                                          
C ----------
C BEGIN CODE
C ----------
      
      if (lswitch) then
      	do i = 1,6
	 w(i,2) = lep(i)
	 w(i,3) = lem(i)
	 w(i,4) = lum(i)
	 w(i,5) = lup(i)
      	enddo
      else
        CALL IXXXXX(P(0,2   ),ZERO ,-lsign(2),-1,W(1,2   ))       
        CALL OXXXXX(P(0,3   ),ZERO ,+lsign(3),+1,W(1,3   ))       
        CALL OXXXXX(P(0,4   ),ZERO ,+lsign(4),+1,W(1,4   ))       
        CALL IXXXXX(P(0,5   ),ZERO ,-lsign(5),-1,W(1,5   )) 
      endif  
	                 
      do mu = 0,3
         q(mu) = p(mu,2)+p(mu,3)+p(mu,4)+p(mu,5)
      enddo
 
      do mu = 0,3
      CALL VCARTX(Q(0),zero ,zero, MU,-1,W(1,1   ))
      CALL FVOXXX(W(1,3   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,6   ))    
      CALL JIOXXX(W(1,2   ),W(1,6   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,7   ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,7   ),GZN ,AMP(1   ))            
      CALL FVIXXX(W(1,2   ),W(1,1   ),GAL ,ZERO    ,ZERO    ,W(1,8   ))    
      CALL JIOXXX(W(1,8   ),W(1,3   ),GZL ,ZMASS   ,ZWIDTH  ,W(1,9   ))    
      CALL IOVXXX(W(1,5   ),W(1,4   ),W(1,9   ),GZN ,AMP(2   ))            

      a( mu) = -AMP(   1)-AMP(   2)
       
      enddo   
     
      a(4) = dcmplx(q(0),q(3))
      a(5) = dcmplx(q(1),q(2))
	

      return
      END



