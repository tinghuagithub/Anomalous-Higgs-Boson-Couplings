       subroutine boxlineNoAbe_pmm(p1,p2,p3,p4,barpsi_p3,psi_p1,mup2,m
     -   up4,alpha,musqIn,ngluon,gaugetest,comp,resultgauge,result)
c ************************************************************************************
c ************************************************************************************
c Author: Francisco Campanario
c E-mail: francam@particle.uni-karlsruhe.de
c Date: 28/7/2008
c Modified:25/5/2012
c ************************************************************************************
c determine the non-abelian finite QCD virtual corrections along the quark line i.e 
c The sum of all virtual corrections with color factor CA of the sort showed
c below.Attention!!!!This class of virtual corrections correspond to two 
c different type of born diagram.The p4 leg can be attached before or after 
c position p2:(p2,p4),(p4,p2). So,
c to get the full result you should call this subroutine plus
c the two abelian boxline subroutines for this combination of momenta(pay
c attention that the conventions for the names are different for this one
c and boxlineABEmm).(Pay attention to the position of the gluon)  
c                        mu_p4                       
c                          p4                      
c                          $                     
c                          $                     
c                          $                     
c                          V                      
c                   $$$$$$$$$$$$$$$$$              
c                   $               $              
c                   $               $               
c                   $               $               
c psi(p1)    ---->------->------->------->---   bar_psi(p3)
c                          $                            
c                          $                            
c                          $                           
c                          V                           
c                          $                           
c                          $                           
c                          p2                         
c                        mu_p2                  
c Note: The vertices are just Gamma^(mu_p2)..terms. So the correct
c factor should be added by hand for each boson. i.e, Without adding
c anything it represents pp->gluon+2 photons up to the electromagnetic charge 
c (for uu->g+2 photons is missing (2/3)) from the coupling. For W and Z,
c we have to account for the Diracgamma_5 that are missing in the vertex
c Note: To make it shorter in the promgram: mu_p2,...->mup2,... 
c Notation of External momenta: p1+p2+p3+p4=0 
c mu_p2,mu_p4, should be think as external current 
c alpha is the helicity of the initial spinor 
c musq is the renormalization scale energy  
c gaugetest,integer value.Different gauge test: 
c gaugetest=1 give the result after replacing mu_p2 with p2 
c gaugetest=2 give the result after replacing mu_p4 with p4 
c gaugetest=3 calculates the three different gaugue tests 
c gaugetest>4 no calculation of gauge test in case you
c have already done it before(it safes times)
c comp: integer value.The first time called with p1...p4, comp=1
c ATTENTION: ONLY!!!If you have to call the subroutine consecutively with the same arguments
c(p1,p2,p3,p4). Then, comp=-1 (it safes 4000 lines of code) 
c This applies when you have for examples the same diagram for an off-shell photon
c and a Z boson. The differences are in the coupling and  the part that depends on the
c polarization vector that are calculated at the end of this program.
c resultgauge  are arrays of dimension 2 . 
c In case you use gaugetest=(1,2). The result is given in the first argument:
c resultgauge(1) and resultgaugeb(1).The argument 2,and 3 is set to zero 
c In case you use gaugetest=3. resultgauge(1) is the result of gaugetest=1,
c resultgauge(2) of gaugetest=2
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c    Declaration of variables 
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
       IMPLICIT NONE
      Real*8   p1(0:3),p2(0:3),p3(0:3),p4(0:3)
       Complex*16 barpsi_p3(2),psi_p1(2),mup2(0:3),mup4(0:3)
       Real*8   p1sq, p1p2, p1p3, p1p4, p2sq, p2p3, p2p4, p3sq, 
     -          p3p4, p4sq
       Real*8   s12, s13, s14, s23, s24, s34
       Complex*16   p1mup2, p1mup4, p2mup2, p2mup4, p3mup2, p3mup4, 
     -          p4mup2, p4mup4
       Complex*16 mup2mup4
       Real*8 dotrr
       Complex*16 B0fin,C0fin,D0fin
       EXTERNAL dotrr,B0fin,C0fin,D0fin
       Complex*16 B012,B013,B014,B023,B024,B034
      Real*8 B012R,B013R,B014R,B023R,B024R,B034R
      Real*8 B012I,B013I,B014I,B023I,B024I,B034I
       Complex*16 C0123,C0124,C0134,C0234
       Real*8 C0123R,C0124R,C0134R,C0234R
       Real*8 C0123I,C0124I,C0134I,C0234I
       Real*8 Cij123R(4,2),Cij124R(4,2),Cij134R(4,2),Cij234R(4,2)
       Real*8 Cij123I(4,2),Cij124I(4,2),Cij134I(4,2),Cij234I(4,2)
       Complex*16 D01234
        Real*8 D01234R
        Real*8 D01234I
        Real*8 Dij1234R(13,3)
        Real*8 Dij1234I(13,3)
       Complex*16 SMB(4),SMG(4) ,Fa(6),F(27)
      Real*8 FI(27),FR(27)
      Complex*16 SC1r,SC1c,SC3rcc,dotrc,dotcc,result(3)
       Complex*16 resultgauge(2) 
       Real*8 musq,Is12,Is23,Is12s23,P(25) 
       EXTERNAL   dotrc,dotcc,SC1c,SC1r,SC3rcc
       Integer alpha,comp,gaugetest,ngluon
       common/FfunctionsNoAbemm/F
       common/PfunctionsNoAbemm/P
       SAVE/FfunctionsNoAbemm/
       SAVE/PfunctionsNoAbemm/
       Real*8 musqIn
       Common/musqInv/musq
       musq=musqIn     
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c       Definition of the scalar products. Not inlcueded the contraction of the
c       moments with the external currents  
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
       p1sq = dotrr(p1,p1)
       p1p2 = dotrr(p1,p2)
       p1p3 = dotrr(p1,p3)
       p1p4 = dotrr(p1,p4)
       p2sq = dotrr(p2,p2)
       p2p3 = dotrr(p2,p3)
       p2p4 = dotrr(p2,p4)
       p3sq = dotrr(p3,p3)
       p3p4 = dotrr(p3,p4)
       p4sq = dotrr(p4,p4)
       s12 = (p1sq +p2sq+ 2*p1p2) 
       s13 = (p1sq +p3sq+ 2*p1p3) 
       s14 = (p1sq +p4sq+ 2*p1p4) 
       s23 = (p2sq +p3sq+ 2*p2p3) 
       s24 = (p2sq +p4sq+ 2*p2p4) 
       s34 = (p3sq +p4sq+ 2*p3p4) 
c       Write(*,'(a5,F20.10)')," p1sq ", p1sq 
c       Write(*,'(a5,F20.10)')," p1p2 ", p1p2
c       Write(*,'(a5,F20.10)')," p1p3 ", p1p3
c       Write(*,'(a5,F20.10)')," p1p4 ", p1p4
c       Write(*,'(a5,F20.10)')," p2sq ", p2sq 
c       Write(*,'(a5,F20.10)')," p2p3 ", p2p3
c       Write(*,'(a5,F20.10)')," p2p4 ", p2p4
c       Write(*,'(a5,F20.10)')," p3sq ", p3sq 
c       Write(*,'(a5,F20.10)')," p3p4 ", p3p4
c       Write(*,'(a5,F20.10)')," p4sq ", p4sq 
       Is12=1d0/s12
       Is12s23=1d0/(s12*s23)
       Is23=1d0/s23
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
        if (comp.gt.0) then    
c    Calling C_ij,D_ij Functions    
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
       B012=B0fin(p1sq,musq)             
       B013=B0fin(s12,musq)   
       B014=B0fin(p4sq,musq)   
       B023=B0fin(p2sq,musq)  
       B024=B0fin(s23,musq)   
       B034=B0fin(p3sq,musq)  
       B012R=Dble(B012)          
       B013R=Dble(B013) 
       B014R=Dble(B014)   
       B023R=Dble(B023 ) 
       B024R=Dble( B024)  
       B034R=Dble(B034)  
       B012I=DIMAG(B012)          
       B013I=DIMAG(B013) 
       B014I=DIMAG(B014)   
       B023I=DIMAG(B023) 
       B024I=DIMAG(B024)  
       B034I=DIMAG(B034)  
c************************************************************************************
c************************************************************************************
c************************************************************************************
       C0123=C0fin(p1sq,p2sq,s12,musq)  
       C0124=C0fin(p1sq,s23,p4sq,musq)  
       C0134=C0fin(s12,p3sq,p4sq,musq)  
       C0234=C0fin(p2sq,p3sq,s23,musq)  
c************************************************************************************
c************************************************************************************
       call tens_red3_new_Re_Com(p1sq,p2sq,s12,B023,B013,B012,C0123,C0
     -   123R,C0123I,Cij123R,Cij123I) 
       call tens_red3_new_Re_Com(p1sq,s23,p4sq,B024,B014,B012,C0124,C0
     -   124R,C0124I,Cij124R,Cij124I) 
       call tens_red3_new_Re_Com(s12,p3sq,p4sq,B034,B014,B013,C0134,C0
     -   134R,C0134I,Cij134R,Cij134I) 
       call tens_red3_new_Re_Com(p2sq,p3sq,s23,B034,B024,B023,C0234,C0
     -   234R,C0234I,Cij234R,Cij234I) 
c************************************************************************************
c************************************************************************************
       D01234=D0fin(s12,s23,p1sq,p2sq,p3sq,p4sq,musq)
c************************************************************************************
c************************************************************************************
       call tens_red4_new_Re_Com(p1sq,p2sq,p3sq,p1p2,p1p3,p2p3,C0234R,
     -   C0134R,C0124R,C0123R,Cij234R,Cij134R,Cij124R,Cij123R,C0234I,
     -   C0134I,C0124I,C0123I,Cij234I,Cij134I,Cij124I,Cij123I,D01234,
     -   D01234R,D01234I,Dij1234R,Dij1234I)
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c       Definition of the F,P functions:Independent of the currents    
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
       P(1) = p4sq-2*s23
       P(2) = p4sq-s23
       P(3) = p4sq+3*s12
       P(4) = p4sq-s12
       P(5) = -p4sq+s12
       P(6) = p2sq-2*s12
       P(7) = -p2sq+s23
       P(8) = p2sq-s12
       FR(1) = -Cij124R(1,1)+p2sq*Dij1234R(2,1)-6*Dij1234R(7,2)-4*Dij1
     -   234R(11,3)-(D01234R+2*Dij1234R(1,1))*P(6)+Dij1234R(3,1)*P(7)
     -   +2*(C0134R+Cij134R(1,1)+p2sq*Dij1234R(4,2)-Dij1234R(1,2)*P(8
     -   ))
       FI(1) = -Cij124I(1,1)+p2sq*Dij1234I(2,1)-6*Dij1234I(7,2)-4*Dij1
     -   234I(11,3)-(D01234I+2*Dij1234I(1,1))*P(6)+Dij1234I(3,1)*P(7)
     -   +2*(C0134I+Cij134I(1,1)+p2sq*Dij1234I(4,2)-Dij1234I(1,2)*P(8
     -   ))
       F(1)=DCMPLX(FR(1),FI(1))
       P(9) = p2sq+p4sq-s12-2*s23
       P(10) = -p2sq-p4sq+s12+s23
       P(11) = s23-2*P(8)
       P(12) = p2sq-s23
       FR(2) = -C0123R-C0134R+Cij134R(1,1)+6*Dij1234R(7,2)-4*Dij1234R(
     -   12,3)+2*(p2sq*Dij1234R(2,2)-Dij1234R(4,2)*P(8))-D01234R*P(9)
     -   +Dij1234R(1,1)*P(10)+Dij1234R(2,1)*P(11)+Dij1234R(3,1)*P(12)
       FI(2) = -C0123I-C0134I+Cij134I(1,1)+6*Dij1234I(7,2)-4*Dij1234I(
     -   12,3)+2*(p2sq*Dij1234I(2,2)-Dij1234I(4,2)*P(8))-D01234I*P(9)
     -   +Dij1234I(1,1)*P(10)+Dij1234I(2,1)*P(11)+Dij1234I(3,1)*P(12)
       F(2)=DCMPLX(FR(2),FI(2))
       P(13) = -p2sq+s12
       FR(3) = -C0134R+Cij134R(2,1)-p2sq*Dij1234R(2,1)-4*Dij1234R(13,3
     -   )+2*(s12*Dij1234R(3,1)+p2sq*Dij1234R(6,2)+Dij1234R(7,2)-Dij1
     -   234R(5,2)*P(8))+(D01234R+Dij1234R(1,1))*P(13)
       FI(3) = -C0134I+Cij134I(2,1)-p2sq*Dij1234I(2,1)-4*Dij1234I(13,3
     -   )+2*(s12*Dij1234I(3,1)+p2sq*Dij1234I(6,2)+Dij1234I(7,2)-Dij1
     -   234I(5,2)*P(8))+(D01234I+Dij1234I(1,1))*P(13)
       F(3)=DCMPLX(FR(3),FI(3))
       P(14) = p4sq+s12-2*s23
       P(15) = p4sq+s12
       P(16) = p2sq+3*s23-2*P(15)
       P(17) = -2*p2sq+s12-s23
       P(18) = p2sq+p4sq-s12-s23
       P(19) = p2sq-p4sq-s12+s23
       P(20) = s12-s23
       P(21) = -p2sq+p4sq-s12+s23
       FR(4) = -C0123R+C0124R-Cij123R(1,1)+Cij124R(1,1)-2*(C0134R+Dij1
     -   234R(7,2))-4*Dij1234R(11,3)-D01234R*P(14)+Dij1234R(1,1)*P(16
     -   )+Dij1234R(2,1)*P(17)+Dij1234R(3,1)*P(18)+Dij1234R(1,2)*P(19
     -   )+Dij1234R(4,2)*P(20)+Dij1234R(5,2)*P(21)
       FI(4) = -C0123I+C0124I-Cij123I(1,1)+Cij124I(1,1)-2*(C0134I+Dij1
     -   234I(7,2))-4*Dij1234I(11,3)-D01234I*P(14)+Dij1234I(1,1)*P(16
     -   )+Dij1234I(2,1)*P(17)+Dij1234I(3,1)*P(18)+Dij1234I(1,2)*P(19
     -   )+Dij1234I(4,2)*P(20)+Dij1234I(5,2)*P(21)
       F(4)=DCMPLX(FR(4),FI(4))
       FR(5) = C0124R+C0134R-D01234R*s12-Cij123R(2,1)+Cij134R(1,1)-Cij
     -   234R(1,1)-8*Dij1234R(7,2)-4*Dij1234R(12,3)+Dij1234R(2,1)*P(5
     -   )+Dij1234R(3,1)*P(7)+Dij1234R(1,1)*P(8)+Dij1234R(4,2)*P(19)+
     -   Dij1234R(2,2)*P(20)+Dij1234R(6,2)*P(21)
       FI(5) = C0124I+C0134I-D01234I*s12-Cij123I(2,1)+Cij134I(1,1)-Cij
     -   234I(1,1)-8*Dij1234I(7,2)-4*Dij1234I(12,3)+Dij1234I(2,1)*P(5
     -   )+Dij1234I(3,1)*P(7)+Dij1234I(1,1)*P(8)+Dij1234I(4,2)*P(19)+
     -   Dij1234I(2,2)*P(20)+Dij1234I(6,2)*P(21)
       F(5)=DCMPLX(FR(5),FI(5))
       P(22) = -p4sq+s12-2*P(12)
       FR(6) = Cij134R(2,1)-Cij234R(2,1)+2*(C0134R+p2sq*Dij1234R(2,1)-
     -   Dij1234R(7,2))-4*Dij1234R(13,3)+Dij1234R(5,2)*P(19)+Dij1234R
     -   (6,2)*P(20)+Dij1234R(3,2)*P(21)+Dij1234R(3,1)*P(22)
       FI(6) = Cij134I(2,1)-Cij234I(2,1)+2*(C0134I+p2sq*Dij1234I(2,1)-
     -   Dij1234I(7,2))-4*Dij1234I(13,3)+Dij1234I(5,2)*P(19)+Dij1234I
     -   (6,2)*P(20)+Dij1234I(3,2)*P(21)+Dij1234I(3,1)*P(22)
       F(6)=DCMPLX(FR(6),FI(6))
       P(23) = -p4sq+s23
       P(24) = 2*p2sq+s12-s23
       P(25) = p4sq-s12+2*P(12)
       FR(7) = (-C0123R-3*C0134R-C0234R+Cij124R(2,1)-Cij134R(1,1)+12*D
     -   ij1234R(7,2)-D01234R*P(1)+Dij1234R(1,1)*P(23)-Dij1234R(2,1)*
     -   P(24)+Dij1234R(3,1)*P(25))/2.
       FI(7) = (-C0123I-3*C0134I-C0234I+Cij124I(2,1)-Cij134I(1,1)+12*D
     -   ij1234I(7,2)-D01234I*P(1)+Dij1234I(1,1)*P(23)-Dij1234I(2,1)*
     -   P(24)+Dij1234I(3,1)*P(25))/2.
       F(7)=DCMPLX(FR(7),FI(7))
       FR(8) = C0123R+2*C0134R+Cij134R(1,1)-8*Dij1234R(7,2)-4*Dij1234R
     -   (12,3)+D01234R*P(1)+Dij1234R(1,1)*P(2)+(Dij1234R(2,1)-Dij123
     -   4R(3,1))*P(12)
       FI(8) = C0123I+2*C0134I+Cij134I(1,1)-8*Dij1234I(7,2)-4*Dij1234I
     -   (12,3)+D01234I*P(1)+Dij1234I(1,1)*P(2)+(Dij1234I(2,1)-Dij123
     -   4I(3,1))*P(12)
       F(8)=DCMPLX(FR(8),FI(8))
       FR(9) = -2*(D01234R+Dij1234R(1,1)+3*Dij1234R(2,1)+5*Dij1234R(4,
     -   2)+2*Dij1234R(4,3))
       FI(9) = -2*(D01234I+Dij1234I(1,1)+3*Dij1234I(2,1)+5*Dij1234I(4,
     -   2)+2*Dij1234I(4,3))
       F(9)=DCMPLX(FR(9),FI(9))
       FR(10) = -2*(Dij1234R(2,1)+3*Dij1234R(2,2)+2*Dij1234R(6,3))
       FI(10) = -2*(Dij1234I(2,1)+3*Dij1234I(2,2)+2*Dij1234I(6,3))
       F(10)=DCMPLX(FR(10),FI(10))
       FR(11) = -2*(D01234R+Dij1234R(1,1)+3*(Dij1234R(2,1)+Dij1234R(4,
     -   2))+2*(Dij1234R(2,2)+Dij1234R(6,3)))
       FI(11) = -2*(D01234I+Dij1234I(1,1)+3*(Dij1234I(2,1)+Dij1234I(4,
     -   2))+2*(Dij1234I(2,2)+Dij1234I(6,3)))
       F(11)=DCMPLX(FR(11),FI(11))
       FR(12) = -2*(Dij1234R(2,1)+3*Dij1234R(2,2)+2*Dij1234R(2,3))
       FI(12) = -2*(Dij1234I(2,1)+3*Dij1234I(2,2)+2*Dij1234I(2,3))
       F(12)=DCMPLX(FR(12),FI(12))
       FR(13) = -6*Dij1234R(6,2)+4*(Dij1234R(5,2)-Dij1234R(10,3))
       FI(13) = -6*Dij1234I(6,2)+4*(Dij1234I(5,2)-Dij1234I(10,3))
       F(13)=DCMPLX(FR(13),FI(13))
       FR(14) = -2*(D01234R+Dij1234R(1,1)-Dij1234R(2,1)+4*Dij1234R(3,1
     -   )-Dij1234R(4,2)+2*(2*Dij1234R(5,2)+Dij1234R(6,2)+Dij1234R(10
     -   ,3)))
       FI(14) = -2*(D01234I+Dij1234I(1,1)-Dij1234I(2,1)+4*Dij1234I(3,1
     -   )-Dij1234I(4,2)+2*(2*Dij1234I(5,2)+Dij1234I(6,2)+Dij1234I(10
     -   ,3)))
       F(14)=DCMPLX(FR(14),FI(14))
       FR(15) = 2*(Dij1234R(2,1)+Dij1234R(2,2)-2*(Dij1234R(3,1)+2*Dij1
     -   234R(6,2)+Dij1234R(8,3)))
       FI(15) = 2*(Dij1234I(2,1)+Dij1234I(2,2)-2*(Dij1234I(3,1)+2*Dij1
     -   234I(6,2)+Dij1234I(8,3)))
       F(15)=DCMPLX(FR(15),FI(15))
       FR(16) = -2*(Dij1234R(6,2)+2*Dij1234R(8,3))
       FI(16) = -2*(Dij1234I(6,2)+2*Dij1234I(8,3))
       F(16)=DCMPLX(FR(16),FI(16))
       FR(17) = 2*Dij1234R(6,2)-4*(Dij1234R(3,2)+Dij1234R(9,3))
       FI(17) = 2*Dij1234I(6,2)-4*(Dij1234I(3,2)+Dij1234I(9,3))
       F(17)=DCMPLX(FR(17),FI(17))
       FR(18) = -C0124R-Cij124R(1,1)+3*Cij124R(2,1)+2*Cij124R(3,2)
       FI(18) = -C0124I-Cij124I(1,1)+3*Cij124I(2,1)+2*Cij124I(3,2)
       F(18)=DCMPLX(FR(18),FI(18))
       FR(19) = Cij124R(2,1)+2*Cij124R(2,2)
       FI(19) = Cij124I(2,1)+2*Cij124I(2,2)
       F(19)=DCMPLX(FR(19),FI(19))
       FR(20) = Is23*(B024R-p4sq*Cij124R(2,1)+4*Cij124R(4,2)+C0124R*P(
     -   1)+Cij124R(1,1)*P(2))
       FI(20) = Is23*(B024I-p4sq*Cij124I(2,1)+4*Cij124I(4,2)+C0124I*P(
     -   1)+Cij124I(1,1)*P(2))
       F(20)=DCMPLX(FR(20),FI(20))
       FR(21) = (Is23*(-B024R+p4sq*Cij124R(2,1)-4*Cij124R(4,2)-C0124R*
     -   P(1)-Cij124R(1,1)*P(2)))/2.
       FI(21) = (Is23*(-B024I+p4sq*Cij124I(2,1)-4*Cij124I(4,2)-C0124I*
     -   P(1)-Cij124I(1,1)*P(2)))/2.
       F(21)=DCMPLX(FR(21),FI(21))
       FR(22) = -C0134R-3*Cij134R(1,1)-2*Cij134R(1,2)
       FI(22) = -C0134I-3*Cij134I(1,1)-2*Cij134I(1,2)
       F(22)=DCMPLX(FR(22),FI(22))
       FR(23) = Is12*(-B013R-C0134R*p4sq-2*s12*Cij134R(1,2)-4*Cij134R(
     -   4,2)-Cij134R(1,1)*P(3)+Cij134R(2,1)*P(4))
       FI(23) = Is12*(-B013I-C0134I*p4sq-2*s12*Cij134I(1,2)-4*Cij134I(
     -   4,2)-Cij134I(1,1)*P(3)+Cij134I(2,1)*P(4))
       F(23)=DCMPLX(FR(23),FI(23))
       FR(24) = C0134R+Cij134R(1,1)-3*Cij134R(2,1)-2*Cij134R(3,2)
       FI(24) = C0134I+Cij134I(1,1)-3*Cij134I(2,1)-2*Cij134I(3,2)
       F(24)=DCMPLX(FR(24),FI(24))
       FR(25) = Is12*(-B013R-p4sq*Cij134R(1,1)-4*Cij134R(4,2)+Cij134R(
     -   2,1)*P(4)+C0134R*P(5))
       FI(25) = Is12*(-B013I-p4sq*Cij134I(1,1)-4*Cij134I(4,2)+Cij134I(
     -   2,1)*P(4)+C0134I*P(5))
       F(25)=DCMPLX(FR(25),FI(25))
       FR(26) = (Is12*(-B013R-p4sq*Cij134R(1,1)-4*Cij134R(4,2)-C0134R*
     -   P(4)-Cij134R(2,1)*P(5)))/2.
       FI(26) = (Is12*(-B013I-p4sq*Cij134I(1,1)-4*Cij134I(4,2)-C0134I*
     -   P(4)-Cij134I(2,1)*P(5)))/2.
       F(26)=DCMPLX(FR(26),FI(26))
       FR(27) = Is12*(B013R+p4sq*Cij134R(1,1)+4*Cij134R(4,2)+C0134R*P(
     -   4)+Cij134R(2,1)*P(5))
       FI(27) = Is12*(B013I+p4sq*Cij134I(1,1)+4*Cij134I(4,2)+C0134I*P(
     -   4)+Cij134I(2,1)*P(5))
       F(27)=DCMPLX(FR(27),FI(27))
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
       endif  
c               PART THAT DEPENDS ON THE EXTERNAL CURRENT
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c Computation of Fa fucntions. Depends on the external currents, through
c the contraction of the moments with the currents
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
       p1mup2 = dotrc(p1,mup2)
       p1mup4 = dotrc(p1,mup4)
       p2mup2 = dotrc(p2,mup2)
       p2mup4 = dotrc(p2,mup4)
       p3mup2 = dotrc(p3,mup2)
       p3mup4 = dotrc(p3,mup4)
       p4mup2 = dotrc(p4,mup2)
       p4mup4 = dotrc(p4,mup4)
       mup2mup4=dotcc(mup2,mup4)
c      Print*," p1mup2 ",  p1mup2 
c      Print*," p1mup4 ",  p1mup4 
c      Print*," p2mup2 ",  p2mup2 
c      Print*," p2mup4 ",  p2mup4 
c      Print*," p3mup2 ",  p3mup2 
c      Print*," p3mup4 ",  p3mup4 
c      Print*," p4mup2 ",  p4mup2 
c      Print*," p4mup4 ",  p4mup4 
c       Print*," mup2mup4", mup2mup4  
c************** Calling the Fa functions**********************************************************************
c************************************************************************************
c************************************************************************************
       call FaFunctionNoAbe_pmm(p1mup2, p1mup4, p2mup2, p2mup4,p3mup2,
     -    p3mup4,p4mup2, p4mup4,mup2mup4,Fa)
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c       Definition of the Matrix Element  
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
       SMB(1) = SC1c(barpsi_p3,mup2,psi_p1,alpha)
       SMB(2) = SC1c(barpsi_p3,mup4,psi_p1,alpha)
       SMB(3) = SC3rcc(barpsi_p3,p2,mup2,mup4,psi_p1,alpha)
       SMB(4) = SC1r(barpsi_p3,p2,psi_p1,alpha)
c       Print*," SMB(1) ", SMB(1)
c       Print*," SMB(2) ", SMB(2)
c       Print*," SMB(3) ", SMB(3)
c       Print*," SMB(4) ", SMB(4)
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c       Amplitude                         
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************


c The Finite virtual piece should be multiplied for (-1)  since 
c I have multiplied by (-I) to get the F's and k's without (I) factor
c . The factorization from the B_ij is Fact=(I/(4\[Pi])^2 (4 \[Pi])^Eps Gamma[1+Eps] (musq)^(-Eps))
c  c So, I*I=(-1)!!!
       result(1) = Fa(1)*SMB(1)+Fa(2)*SMB(2)+F(7)*SMB(3)+Fa(3)*SMB(4)
       result(2) = Fa(4)*SMB(1)+Fa(5)*SMB(2)+F(21)*SMB(3)
       result(3) = Fa(6)*SMB(1)+p1mup2*F(25)*SMB(2)+F(26)*SMB(3)+mup2m
     -   up4*F(27)*SMB(4)
       result(1) =  -result(1)
       result(2) =  -result(2)
       result(3) =  -result(3)
       If (ngluon.eq.1) then
       result(1)=(result(1)+result(2)+result(3))
       elseif (ngluon.eq.2) then
c  One gluon case is:  result(i)*CA. True color factor is f^abc T^c T^b= (-I)/2 CA.
c  To restore I should multiply for 2*I
c The color factor should be provided from outside
       result(1)=(0d0,2d0)*result(1)
       result(2)=(0d0,2d0)*(result(2)+result(3))
       else
       Write(*,*) "Error: The position of the gluon is badly indicated
     -   . Look to the heading for explanation" 
       endif
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
      If(gaugetest.eq.1) then 
cc      The mu_p2 is replaced for the incoming moment 
c      mup2->p2 SO:
c     I define the different contraction of the external
c      momenta with the currents making those replacements
       p1mup2=dotrr(p1,p2)
       p2mup2=dotrr(p2,p2)
       p3mup2=dotrr(p3,p2)
       p4mup2=dotrr(p4,p2)
       mup2mup4=dotrc(p2,mup4)
c************************************************************************************
c************************************************************************************
c************** Calling the Fa functions**********************************************************************
       call FaFunctionNoAbe_pmm(p1mup2, p1mup4, p2mup2, p2mup4,p3mup2,
     -    p3mup4,p4mup2, p4mup4,mup2mup4,Fa)
c************************************************************************************
c************************************************************************************
c    Here, the matrix element with the replacement mu_p_j->pj,(j:2)
c************************************************************************************
c************************************************************************************
       SMG(1) = SMB(4)
       SMG(2) = SMB(2)
       SMG(3) = p2sq*SMB(2)
       SMG(4) = SMB(4)
c       Print*," SMG(1) ", SMG(1)
c       Print*," SMG(2) ", SMG(2)
c       Print*," SMG(3) ", SMG(3)
c       Print*," SMG(4) ", SMG(4)
c************************************************************************************
c************************************************************************************
c    This should be equal to the boxline with momenta p1,p2+p3,p4,p5:
c************************************************************************************
c************************************************************************************
       resultgauge(1) = Fa(1)*SMG(1)+Fa(4)*SMG(1)+Fa(6)*SMG(1)+p1mup2*
     -   F(25)*SMG(2)+Fa(2)*SMG(2)+Fa(5)*SMG(2)+F(7)*SMG(3)+F(21)*SMG
     -   (3)+F(26)*SMG(3)+mup2mup4*F(27)*SMG(4)+Fa(3)*SMG(4)
c The Finite virtual piece should be multiplied for (-1)  since 
c I have multiplied by (-I) to get the F's and k's without (I) factor
c . The factorization from the B_ij is Fact=(I/(4\[Pi])^2 (4 \[Pi])^Eps Gamma[1+Eps] (musq)^(-Eps))
c  c So, I*I=(-1)!!!
       resultgauge(1) =-resultgauge(1)
           resultgauge(2)=(0d0,0d0)      
           return      
           endif      
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
      If(gaugetest.eq.2) then 
cc      The mu_p4 is replaced for the incoming moment 
c      mup4->p4 SO:
c     I define the different contraction of the external
c      momenta with the currents making those replacements
       p1mup4=dotrr(p1,p4)
       p2mup4=dotrr(p2,p4)
       p3mup4=dotrr(p3,p4)
       p4mup4=dotrr(p4,p4)
       mup2mup4=dotrc(p4,mup2)
c************************************************************************************
c************************************************************************************
c************** Calling the Fa functions**********************************************************************
       call FaFunctionNoAbe_pmm(p1mup2, p1mup4, p2mup2, p2mup4,p3mup2,
     -    p3mup4,p4mup2, p4mup4,mup2mup4,Fa)
c************************************************************************************
c************************************************************************************
c    Here, the matrix element with the replacement mu_p_j->pj,(j:2)
c************************************************************************************
c************************************************************************************
       SMG(1) = SMB(1)
       SMG(2) = -SMB(4)
       SMG(3) = s23*SMB(1)-2*(p2mup2+p3mup2)*SMB(4)
       SMG(4) = SMB(4)
c************************************************************************************
c************************************************************************************
c    This should be equal to the boxline with momenta p1,p2+p3,p4,p5:
c************************************************************************************
c************************************************************************************
       resultgauge(1) = Fa(1)*SMG(1)+Fa(4)*SMG(1)+Fa(6)*SMG(1)+p1mup2*
     -   F(25)*SMG(2)+Fa(2)*SMG(2)+Fa(5)*SMG(2)+F(7)*SMG(3)+F(21)*SMG
     -   (3)+F(26)*SMG(3)+mup2mup4*F(27)*SMG(4)+Fa(3)*SMG(4)
c The Finite virtual piece should be multiplied for (-1)  since 
c I have multiplied by (-I) to get the F's and k's without (I) factor
c . The factorization from the B_ij is Fact=(I/(4\[Pi])^2 (4 \[Pi])^Eps Gamma[1+Eps] (musq)^(-Eps))
c  c So, I*I=(-1)!!!
       resultgauge(1) =-resultgauge(1)
           resultgauge(2)=(0d0,0d0)      
           return      
           endif      
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
      If(gaugetest.eq.3) then 
cc      The mu_p2 is replaced for the incoming moment 
c      mup2->p2 SO:
c     I define the different contraction of the external
c      momenta with the currents making those replacements
       p1mup2=dotrr(p1,p2)
       p2mup2=dotrr(p2,p2)
       p3mup2=dotrr(p3,p2)
       p4mup2=dotrr(p4,p2)
       mup2mup4=dotrc(p2,mup4)
c************************************************************************************
c************************************************************************************
c************** Calling the Fa functions**********************************************************************
       call FaFunctionNoAbe_pmm(p1mup2, p1mup4, p2mup2, p2mup4,p3mup2,
     -    p3mup4,p4mup2, p4mup4,mup2mup4,Fa)
c************************************************************************************
c************************************************************************************
c    Here, the matrix element with the replacement mu_p_j->pj,(j:2)
c************************************************************************************
c************************************************************************************
       SMG(1) = SMB(4)
       SMG(2) = SMB(2)
       SMG(3) = p2sq*SMB(2)
       SMG(4) = SMB(4)
c************************************************************************************
c************************************************************************************
c    This should be equal to the boxline with momenta p1,p2+p3,p4,p5:
c************************************************************************************
c************************************************************************************
       resultgauge(1) = Fa(1)*SMG(1)+Fa(4)*SMG(1)+Fa(6)*SMG(1)+p1mup2*
     -   F(25)*SMG(2)+Fa(2)*SMG(2)+Fa(5)*SMG(2)+F(7)*SMG(3)+F(21)*SMG
     -   (3)+F(26)*SMG(3)+mup2mup4*F(27)*SMG(4)+Fa(3)*SMG(4)
c The Finite virtual piece should be multiplied for (-1)  since 
c I have multiplied by (-I) to get the F's and k's without (I) factor
c . The factorization from the B_ij is Fact=(I/(4\[Pi])^2 (4 \[Pi])^Eps Gamma[1+Eps] (musq)^(-Eps))
c  c So, I*I=(-1)!!!
       resultgauge(1) =-resultgauge(1)
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c      The mu_p4 is replaced for the incoming moment 
c      mup4->p4 SO:
c     I define the different contraction of the external
c      momenta with the currents making those replacements
       p1mup2 = dotrc(p1,mup2)
       p1mup4 = dotrr(p1,p4)
       p2mup2 = dotrc(p2,mup2)
       p2mup4 = dotrr(p2,p4)
       p3mup2 = dotrc(p3,mup2)
       p3mup4 = dotrr(p3,p4)
       p4mup2 = dotrc(p4,mup2)
       p4mup4 = dotrr(p4,p4)
       mup2mup4=dotrc(p4,mup2)
c************************************************************************************
c************************************************************************************
c************** Calling the Fa functions**********************************************************************
       call FaFunctionNoAbe_pmm(p1mup2, p1mup4, p2mup2, p2mup4,p3mup2,
     -    p3mup4,p4mup2, p4mup4,mup2mup4,Fa)
c************************************************************************************
c************************************************************************************
c    Here, the matrix element with the replacement mu_p_j->pj,(j:3)
c************************************************************************************
c************************************************************************************
       SMG(1) = SMB(1)
       SMG(2) = -SMB(4)
       SMG(3) = s23*SMB(1)-2*(p2mup2+p3mup2)*SMB(4)
       SMG(4) = SMB(4)
c************************************************************************************
c************************************************************************************
c    This should be equal to the subsctraction of boxline with momenta -(p1,p2,p3+p4,p5) :
c************************************************************************************
c************************************************************************************
       resultgauge(2) = Fa(1)*SMG(1)+Fa(4)*SMG(1)+Fa(6)*SMG(1)+p1mup2*
     -   F(25)*SMG(2)+Fa(2)*SMG(2)+Fa(5)*SMG(2)+F(7)*SMG(3)+F(21)*SMG
     -   (3)+F(26)*SMG(3)+mup2mup4*F(27)*SMG(4)+Fa(3)*SMG(4)
c The Finite virtual piece should be multiplied for (-1)  since 
c I have multiplied by (-I) to get the F's and k's without (I) factor
c . The factorization from the B_ij is Fact=(I/(4\[Pi])^2 (4 \[Pi])^Eps Gamma[1+Eps] (musq)^(-Eps))
c  c So, I*I=(-1)!!!
       resultgauge(2) =-resultgauge(2)
           endif      
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
       Return
       End
c************** Calling the Fa functions**********************************************************************
       subroutine FaFunctionNoAbe_pmm(p1mup2, p1mup4,p2mup2,p2mup4,p3m
     -   up2, p3mup4,p4mup2,p4mup4,mup2mup4,Fa)
       IMPLICIT NONE
      Complex*16   p1mup2, p1mup4, p2mup2, p2mup4, p3mup2, p3mup4, 
     -          p4mup2, p4mup4
       Complex*16 mup2mup4
        common/FfunctionsNoAbemm/F
      Complex*16 Fa(6),F(27)

        Fa(1) = p1mup4*F(1)+p2mup4*F(2)+p3mup4*F(3)
       Fa(2) = p1mup2*F(4)+p2mup2*F(5)+p3mup2*F(6)
       Fa(3) = mup2mup4*F(8)+p1mup2*p1mup4*F(9)+p1mup4*p2mup2*F(10)+p1
     -   mup2*p2mup4*F(11)+p2mup2*p2mup4*F(12)+p1mup4*p3mup2*F(13)+p1
     -   mup2*p3mup4*F(14)+p2mup2*p3mup4*F(15)+p2mup4*p3mup2*F(16)+p3
     -   mup2*p3mup4*F(17)
       Fa(4) = p1mup4*F(18)+p2mup4*F(19)+p3mup4*F(19)
       Fa(5) = p2mup2*F(20)+p3mup2*F(20)
       Fa(6) = p1mup4*F(22)+p2mup4*F(23)+p3mup4*F(24)
       Return
       End
