       subroutine FermionVertOddCouplings_Div(za1,za2,za3,zb1,zb2,zb3,m,p1
     -   ,p2,p3,mup1,mup2,mup3,musq,comp,result,resultn,Div)
c ************************************************************************************
c determine the fermion looop
c Note: No couplings are assigned
c Note: To make it shorter in the promgram: mu_p2,...->mup2,... 
c Notation of External momenta: p1+p2+p3+p4=0 
c mu_p1,mu_p2,mu_p3,mu_p4 should be think as external current 
c Note:
c Following the Peskin-S convention this contribution should get a factor i from the Feyman rules
c (including the factor -1 for closed fermion loop)
c and a factor i coming from the scalar integrals.
c -> i*i = -1, add this facor inside of the amplitude !!!!
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c    Declaration of variables 
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
       IMPLICIT NONE
      Real*8   p1(0:3),p2(0:3),p3(0:3)
       Real*8   p1sq, p1p2, p1p3, p2sq, p2p3, p3sq
       Real*8   s12, s13, s23
       Complex*16   p1mup1, p1mup2, p1mup3, p2mup1, p2mup2, p2mup3, 
     -          p3mup1, p3mup2, p3mup3
       Complex*16   mup1mup2, mup1mup3, mup2mup3
       Real*8 dotrr
       Complex*16 B0finDiv,C0finDiv
       Complex*16 A0finDiv,B0tMDiv
       EXTERNAL dotrr,A0finDiv,B0tMDiv,B0finDiv,C0finDiv
       Complex*16 A0,B012,B013,B023
      Real*8 A0R,A0I,B012R,B013R,B023R
      Real*8 B012I,B013I,B023I
      Real*8 B12R(2,2),B13R(2,2),B23R(2,2)
      Real*8 B12I(2,2),B13I(2,2),B23I(2,2)
       Complex*16 C0123
       Real*8 C0123R
       Real*8 C0123I
       Real*8 C123R(6,3)
       Real*8 C123I(6,3)
      Complex*16 F(9)
      Real*8 FI(9),FR(9),P(15)
      Real*8 za1,za2,za3,zb1,zb2,zb3
      Complex*16 mup1(0:3),mup2(0:3),mup3(0:3)
      Complex*16 dotrc,dotcc,result,resultn(4)
       Real*8 musq,m,msq
      EXTERNAL   dotrc,dotcc
      Integer comp,Div
       common/FerVertOddFunctions/F
       common/PFerVertOddFunctions/P
      Save/FerVertOddFunctions/ 
      Save/PFerVertOddFunctions/ 
      Complex*16 Fa(5)
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c       Definition of the scalar products. Not inlcueded the contraction of the
c       moments with the external currents  
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
       msq=m*m
       p1sq = dotrr(p1,p1)
       p1p2 = dotrr(p1,p2)
       p1p3 = dotrr(p1,p3)

       p2sq = dotrr(p2,p2)
       p2p3 = dotrr(p2,p3)

       p3sq = dotrr(p3,p3)

       s12 = (p1sq +p2sq+ 2*p1p2) 
       s13 = (p1sq +p3sq+ 2*p1p3) 

       s23 = (p2sq +p3sq+ 2*p2p3) 
 
c       Write(*,'(a5,F20.10)')," p1sq ", p1sq 
c       Write(*,'(a5,F20.10)')," p1p2 ", p1p2
c       Write(*,'(a5,F20.10)')," p1p3 ", p1p3
c       Write(*,'(a5,F20.10)')," p1p4 ", p1p4
c       Write(*,'(a5,F20.10)')," p2sq ", p2sq 
c       Write(*,'(a5,F20.10)')," p2p3 ", p2p3
c       Write(*,'(a5,F20.10)')," p2p4 ", p2p4
c       Write(*,'(a5,F20.10)')," p3sq ", p3sq 
c       Write(*,'(a5,F20.10)')," p3p4 ", p3p4
c       Write(*,'(a5,F20.10)')," p4sq ", p4sq 
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
        if (comp.gt.0) then  


        if(m.gt.1d-6) then
c    Calling C_ij,D_ij Functions    
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
       A0=A0finDiv(m,Div)  
       A0R=Dble(A0) 
       A0I=DImag(A0) 
       B012=B0tMDiv(m,p1sq,Div)  
       B013=B0tMDiv(m,s12,Div)   
       B023=B0tMDiv(m,p2sq,Div)  
c************************************************************************************
       call tens_red2_Re_1MDiv(m,p1sq,A0R,A0I,B012,B012R,B012I,B12R,B12I) 
       call tens_red2_Re_1MDiv(m,p2sq,A0R,A0I,B023,B023R,B023I,B23R,B23I) 
       call tens_red2_Re_1MDiv(m,s12, A0R,A0I,B013,B013R,B013I,B13R,B13I) 
c************************************************************************************
      C0123=0d0
c************************************************************************************
c************************************************************************************
c************************************************************************************
       call tens_red3_new_Re_Com_1MRank3Div(m,p1sq,p2sq,s12,B023R,B013R,B
     -   012R,B23R,B13R,B12R,B023I,B013I,B012I,B23I,B13I,B12I,C0123,C
     -   0123R,C0123I,C123R,C123I) 
c************************************************************************************
c************************************************************************************
      elseif(m.lt.1d-6) then
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c    Calling C_ij,D_ij Functions    
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
       B012=B0finDiv(p1sq,musq,Div)   
       B013=B0finDiv(s12,musq,Div)   
       B023=B0finDiv(p2sq,musq,Div)  
c************************************************************************************
       call tens_red2_ReDiv(p1sq,B012,B012R,B012I,B12R,B12I) 
       call tens_red2_ReDiv(p2sq,B023,B023R,B023I,B23R,B23I) 
       call tens_red2_ReDiv(s12, B013,B013R,B013I,B13R,B13I) 
c************************************************************************************
c************************************************************************************
      C0123=C0finDiv(p1sq,p2sq,s12,musq,Div) 
c************************************************************************************
c************************************************************************************
       call tens_red3_new_Re_ComRank3Div(p1sq,p2sq,s12,B023R,B013R,B012R,
     -   B23R,B13R,B12R,B023I,B013I,B012I,B23I,B13I,B12I,C0123,C0123R
     -   ,C0123I,C123R,C123I) 
         endif
c       Definition of the F,P functions:Independent of the currents    
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
       P(1) = za1*za2+zb1*zb2
       P(2) = za3-zb3
       P(3) = za1-zb1
       P(4) = za2-zb2
       P(5) = za3*zb1+za1*zb3
       P(6) = za1*za2*za3-zb1*zb2*zb3
       P(7) = -(za1*za2*za3)+zb1*zb2*zb3
       P(8) = -2*M**2*P(4)*P(5)+p1sq*P(6)+s12*P(7)
       P(9) = p1sq-p2sq-s12
       P(10) = 2*M**2*P(2)*P(3)*P(4)+P(6)*P(9)
       FR(1) = (B012R+2*B12R(1,1)+4*C123R(4,2))*P(6)+B013R*P(7)+C0123R
     -   *P(8)+C123R(1,1)*P(10)
       FI(1) = (B012I+2*B12I(1,1)+4*C123I(4,2))*P(6)+B013I*P(7)+C0123I
     -   *P(8)+C123I(1,1)*P(10)
       F(1)=DCMPLX(FR(1),FI(1))
       P(11) = za1+zb1
       P(12) = za2*za3-zb2*zb3
       P(13) = p1sq*P(6)-2*M**2*P(11)*P(12)
       FR(2) = 8*C123R(4,2)*P(6)+(B013R+B023R)*P(7)+C123R(2,1)*P(10)+C
     -   0123R*P(13)
       FI(2) = 8*C123I(4,2)*P(6)+(B013I+B023I)*P(7)+C123I(2,1)*P(10)+C
     -   0123I*P(13)
       F(2)=DCMPLX(FR(2),FI(2))
       FR(3) = 4*(C123R(1,1)+C123R(1,2))*P(6)
       FI(3) = 4*(C123I(1,1)+C123I(1,2))*P(6)
       F(3)=DCMPLX(FR(3),FI(3))
       FR(4) = 4*(C123R(2,1)+C123R(3,2))*P(6)
       FI(4) = 4*(C123I(2,1)+C123I(3,2))*P(6)
       F(4)=DCMPLX(FR(4),FI(4))
       FR(5) = 4*(-C123R(1,1)-C123R(1,2)+C123R(2,1)+C123R(3,2))*P(6)
       FI(5) = 4*(-C123I(1,1)-C123I(1,2)+C123I(2,1)+C123I(3,2))*P(6)
       F(5)=DCMPLX(FR(5),FI(5))
       FR(6) = 4*(C123R(2,2)-C123R(3,2))*P(6)
       FI(6) = 4*(C123I(2,2)-C123I(3,2))*P(6)
       F(6)=DCMPLX(FR(6),FI(6))
       P(14) = p1sq-s12
       P(15) = M**2*P(2)*P(3)*P(4)+P(6)*P(14)
       FR(7) = -2*((B023R+p1sq*C123R(1,1)-4*C123R(4,2))*P(6)+C0123R*M*
     -   *2*P(11)*P(12)-C123R(2,1)*P(15))
       FI(7) = -2*((B023I+p1sq*C123I(1,1)-4*C123I(4,2))*P(6)+C0123I*M*
     -   *2*P(11)*P(12)-C123I(2,1)*P(15))
       F(7)=DCMPLX(FR(7),FI(7))
       FR(8) = 2*M**2*P(4)*(C123R(1,1)*P(2)*P(3)-C0123R*P(5))
       FI(8) = 2*M**2*P(4)*(C123I(1,1)*P(2)*P(3)-C0123I*P(5))
       F(8)=DCMPLX(FR(8),FI(8))
       FR(9) = 2*M**2*P(2)*(C0123R*P(1)+(C123R(1,1)-C123R(2,1))*P(3)*P
     -   (4))
       FI(9) = 2*M**2*P(2)*(C0123I*P(1)+(C123I(1,1)-C123I(2,1))*P(3)*P
     -   (4))
       F(9)=DCMPLX(FR(9),FI(9))
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
       endif  
c               PART THAT DEPENDS ON THE EXTERNAL CURRENT
c************************************************************************************
c************************************************************************************
c************************************************************************************
       p1mup1 = dotrc(p1,mup1)
       p1mup2 = dotrc(p1,mup2)
       p1mup3 = dotrc(p1,mup3)
       p2mup1 = dotrc(p2,mup1)
       p2mup2 = dotrc(p2,mup2)
       p2mup3 = dotrc(p2,mup3)
       p3mup1 = dotrc(p3,mup1)
       p3mup2 = dotrc(p3,mup2)
       p3mup3 = dotrc(p3,mup3)
       mup1mup2 = dotcc(mup1,mup2)
       mup1mup3 = dotcc(mup1,mup3)
       mup2mup3 = dotcc(mup2,mup3)
       call vertOddFaDiv(p1,p2,p3,mup1,mup2,mup3,Fa(1))
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************
c       Amplitude                         
c************************************************************************************
c************************************************************************************
c************************************************************************************
c************************************************************************************


       resultn(1) = (0,-1)*(F(1)*Fa(1)+F(2)*Fa(2)+(p1mup3*F(3)+p2mup3*
     -   F(4))*Fa(3)+(p1mup2*F(5)+p2mup2*F(6))*Fa(4))


        if (comp.gt.0) then


       resultn(2) = (0,-1)*F(7)*Fa(5)
       resultn(3) = (0,-1)*F(8)*Fa(4)
       resultn(4) = (0,-1)*F(9)*Fa(3)


        endif 
c************************************************************************************


c !!! Following the Peskin-S convention this contribution should get a factor i from the Feyman rules
c !!! (including the factor -1 for closed fermion loop)
c !!! and a factor i coming from the scalar integrals.
c !!! -> i*i = -1, add this facor inside of the amplitude !!!!
       result=resultn(1)
c************************************************************************************
c************************************************************************************
       Return
       End
c************** Calling the Fa functions**********************************************************************
       subroutine vertOddFaDiv(p1,p2,p3,mup1,mup2,mup3,Fa)
       IMPLICIT NONE
      Real*8   p1(0:3),p2(0:3),p3(0:3)
       Complex*16   mup1(0:3),mup2(0:3),mup3(0:3)
       Complex*16 EPSCCCC,EPSCCCR,EPSCCRR,EPSCRRR
       Real*8 EPSRRRR
      EXTERNAL   EPSCCCC,EPSCCCR,EPSCCRR,EPSCRRR,EPSRRRR
      Complex*16 Fa(5)
       Fa(1) = EPSCCCR(mup1,mup2,mup3,p1)
       Fa(2) = EPSCCCR(mup1,mup2,mup3,p2)
       Fa(3) = EPSCCRR(mup1,mup2,p1,p2)
       Fa(4) = EPSCCRR(mup1,mup3,p1,p2)
       Fa(5) = EPSCCRR(mup2,mup3,p1,p2)
       Return
       End
